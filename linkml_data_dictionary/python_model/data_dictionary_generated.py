# Auto generated from data_dictionary_spreadsheet_1k2m4oAX3JdfYN2lIbpBiWFUNKZwXnQCiuns0e3Wid9o_20230405.yaml by pythongen.py version: 0.9.0
# Generation date: 2023-05-30T17:51:25
# Schema: data-dictionary
#
# id: https://w3id.org/pcdc/model
# description:
# license: https://creativecommons.org/licenses/by-nc/4.0/

import dataclasses
import sys
import re
from jsonasobj2 import JsonObj, as_dict
from typing import Optional, List, Union, Dict, ClassVar, Any
from dataclasses import dataclass
from linkml_runtime.linkml_model.meta import EnumDefinition, PermissibleValue, PvFormulaOptions

from linkml_runtime.utils.slot import Slot
from linkml_runtime.utils.metamodelcore import empty_list, empty_dict, bnode
from linkml_runtime.utils.yamlutils import YAMLRoot, extended_str, extended_float, extended_int
from linkml_runtime.utils.dataclass_extensions_376 import dataclasses_init_fn_with_kwargs
from linkml_runtime.utils.formatutils import camelcase, underscore, sfx
from linkml_runtime.utils.enumerations import EnumDefinitionImpl
from rdflib import Namespace, URIRef
from linkml_runtime.utils.curienamespace import CurieNamespace
from linkml_runtime.linkml_model.types import Decimal, Integer, String
from linkml_runtime.utils.metamodelcore import Decimal

metamodel_version = "1.7.0"
version = "0.0.1"

# Overwrite dataclasses _init_fn to add **kwargs in __init__
dataclasses._init_fn = dataclasses_init_fn_with_kwargs

# Namespaces
HGNC = CurieNamespace('HGNC', 'https://www.genenames.org/data/gene-symbol-report/#!/hgnc_id/HGNC:')
SO = CurieNamespace('SO', 'http://www.sequenceontology.org/browser/current_release/term/SO:')
ICDO = CurieNamespace('icdo', 'https://www.who.int/standards/classifications/other-classifications/international-classification-of-diseases-for-oncology/')
LINKML = CurieNamespace('linkml', 'https://w3id.org/linkml/')
NCIT = CurieNamespace('ncit', 'https://ncit.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code=')
PCDC = CurieNamespace('pcdc', 'https://w3id.org/pcdc/model')
DEFAULT_ = CurieNamespace('', 'https://w3id.org/pcdc/model/')


# Types

# Class references



@dataclass
class Thing(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Thing"]
    class_class_curie: ClassVar[str] = "pcdc:/Thing"
    class_name: ClassVar[str] = "Thing"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Thing")

    submitter_id: str = None
    type: str = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.submitter_id):
            self.MissingRequiredField("submitter_id")
        if not isinstance(self.submitter_id, str):
            self.submitter_id = str(self.submitter_id)

        if self._is_empty(self.type):
            self.MissingRequiredField("type")
        if not isinstance(self.type, str):
            self.type = str(self.type)

        super().__post_init__(**kwargs)


@dataclass
class Person(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Person"]
    class_class_curie: ClassVar[str] = "pcdc:/Person"
    class_name: ClassVar[str] = "Person"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Person")

    submitter_id: str = None
    type: str = None
    sex: Optional[Union[str, "SexEnum"]] = None
    race: Optional[Union[str, "RaceEnum"]] = None
    race_other: Optional[str] = None
    ethnicity: Optional[Union[str, "EthnicityEnum"]] = None
    country: Optional[str] = None
    race_identification_source: Optional[Union[str, "RaceIdentificationSourceEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.sex is not None and not isinstance(self.sex, SexEnum):
            self.sex = SexEnum(self.sex)

        if self.race is not None and not isinstance(self.race, RaceEnum):
            self.race = RaceEnum(self.race)

        if self.race_other is not None and not isinstance(self.race_other, str):
            self.race_other = str(self.race_other)

        if self.ethnicity is not None and not isinstance(self.ethnicity, EthnicityEnum):
            self.ethnicity = EthnicityEnum(self.ethnicity)

        if self.country is not None and not isinstance(self.country, str):
            self.country = str(self.country)

        if self.race_identification_source is not None and not isinstance(self.race_identification_source, RaceIdentificationSourceEnum):
            self.race_identification_source = RaceIdentificationSourceEnum(self.race_identification_source)

        super().__post_init__(**kwargs)


@dataclass
class Subject(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Subject"]
    class_class_curie: ClassVar[str] = "pcdc:/Subject"
    class_name: ClassVar[str] = "Subject"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Subject")

    submitter_id: str = None
    type: str = None
    persons: Union[dict, Person] = None
    honest_broker_subject_id: Optional[str] = None
    consortium: Optional[Union[str, "ConsortiumEnum"]] = None
    data_contributor_id: Optional[Union[str, "DataContributorIdEnum"]] = None
    study_id: Optional[Union[str, "StudyIdEnum"]] = None
    age_at_enrollment: Optional[int] = None
    treatment_arm: Optional[Union[str, "TreatmentArmEnum"]] = None
    enrolled_status: Optional[Union[str, "EnrolledStatusEnum"]] = None
    data_source: Optional[Union[str, "DataSourceEnum"]] = None
    year_at_enrollment: Optional[int] = None
    study_phase: Optional[Union[str, "StudyPhaseEnum"]] = None
    study_type: Optional[Union[str, "StudyTypeEnum"]] = None
    efs_censor_status: Optional[Union[str, "EfsCensorStatusEnum"]] = None
    age_at_censor_status: Optional[int] = None
    randomized_status: Optional[Union[str, "RandomizedStatusEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.persons):
            self.MissingRequiredField("persons")
        if not isinstance(self.persons, Person):
            self.persons = Person(**as_dict(self.persons))

        if self.honest_broker_subject_id is not None and not isinstance(self.honest_broker_subject_id, str):
            self.honest_broker_subject_id = str(self.honest_broker_subject_id)

        if self.consortium is not None and not isinstance(self.consortium, ConsortiumEnum):
            self.consortium = ConsortiumEnum(self.consortium)

        if self.data_contributor_id is not None and not isinstance(self.data_contributor_id, DataContributorIdEnum):
            self.data_contributor_id = DataContributorIdEnum(self.data_contributor_id)

        if self.study_id is not None and not isinstance(self.study_id, StudyIdEnum):
            self.study_id = StudyIdEnum(self.study_id)

        if self.age_at_enrollment is not None and not isinstance(self.age_at_enrollment, int):
            self.age_at_enrollment = int(self.age_at_enrollment)

        if self.treatment_arm is not None and not isinstance(self.treatment_arm, TreatmentArmEnum):
            self.treatment_arm = TreatmentArmEnum(self.treatment_arm)

        if self.enrolled_status is not None and not isinstance(self.enrolled_status, EnrolledStatusEnum):
            self.enrolled_status = EnrolledStatusEnum(self.enrolled_status)

        if self.data_source is not None and not isinstance(self.data_source, DataSourceEnum):
            self.data_source = DataSourceEnum(self.data_source)

        if self.year_at_enrollment is not None and not isinstance(self.year_at_enrollment, int):
            self.year_at_enrollment = int(self.year_at_enrollment)

        if self.study_phase is not None and not isinstance(self.study_phase, StudyPhaseEnum):
            self.study_phase = StudyPhaseEnum(self.study_phase)

        if self.study_type is not None and not isinstance(self.study_type, StudyTypeEnum):
            self.study_type = StudyTypeEnum(self.study_type)

        if self.efs_censor_status is not None and not isinstance(self.efs_censor_status, EfsCensorStatusEnum):
            self.efs_censor_status = EfsCensorStatusEnum(self.efs_censor_status)

        if self.age_at_censor_status is not None and not isinstance(self.age_at_censor_status, int):
            self.age_at_censor_status = int(self.age_at_censor_status)

        if self.randomized_status is not None and not isinstance(self.randomized_status, RandomizedStatusEnum):
            self.randomized_status = RandomizedStatusEnum(self.randomized_status)

        super().__post_init__(**kwargs)


@dataclass
class TimePeriod(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/TimePeriod"]
    class_class_curie: ClassVar[str] = "pcdc:/TimePeriod"
    class_name: ClassVar[str] = "Time Period"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/TimePeriod")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    time_period_type: Optional[Union[str, "TimePeriodTypeEnum"]] = None
    disease_phase: Optional[Union[str, "DiseasePhaseEnum"]] = None
    course: Optional[Union[str, "CourseEnum"]] = None
    time_period_number: Optional[int] = None
    year_at_start: Optional[int] = None
    age_at_start: Optional[int] = None
    age_at_end: Optional[int] = None
    course_other: Optional[str] = None
    age_at_course_anc_500: Optional[int] = None
    age_at_txassign: Optional[int] = None
    age_precision: Optional[Union[str, "AgePrecisionEnum"]] = None
    exam_type: Optional[Union[str, "ExamTypeEnum"]] = None
    time_periods: Optional[Union[dict, "TimePeriod"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.time_period_type is not None and not isinstance(self.time_period_type, TimePeriodTypeEnum):
            self.time_period_type = TimePeriodTypeEnum(self.time_period_type)

        if self.disease_phase is not None and not isinstance(self.disease_phase, DiseasePhaseEnum):
            self.disease_phase = DiseasePhaseEnum(self.disease_phase)

        if self.course is not None and not isinstance(self.course, CourseEnum):
            self.course = CourseEnum(self.course)

        if self.time_period_number is not None and not isinstance(self.time_period_number, int):
            self.time_period_number = int(self.time_period_number)

        if self.year_at_start is not None and not isinstance(self.year_at_start, int):
            self.year_at_start = int(self.year_at_start)

        if self.age_at_start is not None and not isinstance(self.age_at_start, int):
            self.age_at_start = int(self.age_at_start)

        if self.age_at_end is not None and not isinstance(self.age_at_end, int):
            self.age_at_end = int(self.age_at_end)

        if self.course_other is not None and not isinstance(self.course_other, str):
            self.course_other = str(self.course_other)

        if self.age_at_course_anc_500 is not None and not isinstance(self.age_at_course_anc_500, int):
            self.age_at_course_anc_500 = int(self.age_at_course_anc_500)

        if self.age_at_txassign is not None and not isinstance(self.age_at_txassign, int):
            self.age_at_txassign = int(self.age_at_txassign)

        if self.age_precision is not None and not isinstance(self.age_precision, AgePrecisionEnum):
            self.age_precision = AgePrecisionEnum(self.age_precision)

        if self.exam_type is not None and not isinstance(self.exam_type, ExamTypeEnum):
            self.exam_type = ExamTypeEnum(self.exam_type)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        super().__post_init__(**kwargs)


@dataclass
class OffProtocolTherapyOrStudy(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/OffProtocolTherapyOrStudy"]
    class_class_curie: ClassVar[str] = "pcdc:/OffProtocolTherapyOrStudy"
    class_name: ClassVar[str] = "Off Protocol Therapy Or Study"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/OffProtocolTherapyOrStudy")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_off: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    off_type: Optional[Union[str, "OffTypeEnum"]] = None
    reason_off: Optional[Union[str, "ReasonOffEnum"]] = None
    reason_off_other: Optional[str] = None
    another_study: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_off is not None and not isinstance(self.age_off, int):
            self.age_off = int(self.age_off)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.off_type is not None and not isinstance(self.off_type, OffTypeEnum):
            self.off_type = OffTypeEnum(self.off_type)

        if self.reason_off is not None and not isinstance(self.reason_off, ReasonOffEnum):
            self.reason_off = ReasonOffEnum(self.reason_off)

        if self.reason_off_other is not None and not isinstance(self.reason_off_other, str):
            self.reason_off_other = str(self.reason_off_other)

        if self.another_study is not None and not isinstance(self.another_study, NoNotreportedUnknownYesEnum):
            self.another_study = NoNotreportedUnknownYesEnum(self.another_study)

        super().__post_init__(**kwargs)


@dataclass
class MedicalHistory(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/MedicalHistory"]
    class_class_curie: ClassVar[str] = "pcdc:/MedicalHistory"
    class_name: ClassVar[str] = "Medical History"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/MedicalHistory")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    condition: Optional[Union[str, "ConditionEnum"]] = None
    condition_other: Optional[str] = None
    age_at_condition: Optional[int] = None
    condition_type: Optional[Union[str, "ConditionTypeEnum"]] = None
    diagnosis_basis: Optional[Union[str, "DiagnosisBasisEnum"]] = None
    condition_status: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    assisted_conception: Optional[Union[str, "AssistedConceptionEnum"]] = None
    developmental_delay: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    developmental_delay_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.condition is not None and not isinstance(self.condition, ConditionEnum):
            self.condition = ConditionEnum(self.condition)

        if self.condition_other is not None and not isinstance(self.condition_other, str):
            self.condition_other = str(self.condition_other)

        if self.age_at_condition is not None and not isinstance(self.age_at_condition, int):
            self.age_at_condition = int(self.age_at_condition)

        if self.condition_type is not None and not isinstance(self.condition_type, ConditionTypeEnum):
            self.condition_type = ConditionTypeEnum(self.condition_type)

        if self.diagnosis_basis is not None and not isinstance(self.diagnosis_basis, DiagnosisBasisEnum):
            self.diagnosis_basis = DiagnosisBasisEnum(self.diagnosis_basis)

        if self.condition_status is not None and not isinstance(self.condition_status, NoNotreportedUnknownYesEnum):
            self.condition_status = NoNotreportedUnknownYesEnum(self.condition_status)

        if self.assisted_conception is not None and not isinstance(self.assisted_conception, AssistedConceptionEnum):
            self.assisted_conception = AssistedConceptionEnum(self.assisted_conception)

        if self.developmental_delay is not None and not isinstance(self.developmental_delay, NoNotreportedUnknownYesEnum):
            self.developmental_delay = NoNotreportedUnknownYesEnum(self.developmental_delay)

        if self.developmental_delay_type is not None and not isinstance(self.developmental_delay_type, str):
            self.developmental_delay_type = str(self.developmental_delay_type)

        super().__post_init__(**kwargs)


@dataclass
class SurvivalCharacteristics(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/SurvivalCharacteristics"]
    class_class_curie: ClassVar[str] = "pcdc:/SurvivalCharacteristics"
    class_name: ClassVar[str] = "Survival Characteristics"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/SurvivalCharacteristics")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_lkss: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    lkss: Optional[Union[str, "AliveDeadNotreportedUnknownEnum"]] = None
    lkss_with_disease: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    age_lost_to_follow_up: Optional[int] = None
    cause_of_death: Optional[Union[str, "CauseOfDeathEnum"]] = None
    cause_of_death_other: Optional[str] = None
    trm_type: Optional[Union[str, "TrmTypeEnum"]] = None
    trm_type_other: Optional[str] = None
    cause_of_death_detail: Optional[Union[str, "CauseOfDeathDetailEnum"]] = None
    cause_of_death_detail_other: Optional[str] = None
    cause_of_death_ranking: Optional[Union[str, "CauseOfDeathRankingEnum"]] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_lkss is not None and not isinstance(self.age_at_lkss, int):
            self.age_at_lkss = int(self.age_at_lkss)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.lkss is not None and not isinstance(self.lkss, AliveDeadNotreportedUnknownEnum):
            self.lkss = AliveDeadNotreportedUnknownEnum(self.lkss)

        if self.lkss_with_disease is not None and not isinstance(self.lkss_with_disease, NoNotreportedUnknownYesEnum):
            self.lkss_with_disease = NoNotreportedUnknownYesEnum(self.lkss_with_disease)

        if self.age_lost_to_follow_up is not None and not isinstance(self.age_lost_to_follow_up, int):
            self.age_lost_to_follow_up = int(self.age_lost_to_follow_up)

        if self.cause_of_death is not None and not isinstance(self.cause_of_death, CauseOfDeathEnum):
            self.cause_of_death = CauseOfDeathEnum(self.cause_of_death)

        if self.cause_of_death_other is not None and not isinstance(self.cause_of_death_other, str):
            self.cause_of_death_other = str(self.cause_of_death_other)

        if self.trm_type is not None and not isinstance(self.trm_type, TrmTypeEnum):
            self.trm_type = TrmTypeEnum(self.trm_type)

        if self.trm_type_other is not None and not isinstance(self.trm_type_other, str):
            self.trm_type_other = str(self.trm_type_other)

        if self.cause_of_death_detail is not None and not isinstance(self.cause_of_death_detail, CauseOfDeathDetailEnum):
            self.cause_of_death_detail = CauseOfDeathDetailEnum(self.cause_of_death_detail)

        if self.cause_of_death_detail_other is not None and not isinstance(self.cause_of_death_detail_other, str):
            self.cause_of_death_detail_other = str(self.cause_of_death_detail_other)

        if self.cause_of_death_ranking is not None and not isinstance(self.cause_of_death_ranking, CauseOfDeathRankingEnum):
            self.cause_of_death_ranking = CauseOfDeathRankingEnum(self.cause_of_death_ranking)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        super().__post_init__(**kwargs)


@dataclass
class FamilyMedicalHistory(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/FamilyMedicalHistory"]
    class_class_curie: ClassVar[str] = "pcdc:/FamilyMedicalHistory"
    class_name: ClassVar[str] = "Family Medical History"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/FamilyMedicalHistory")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    relation: Optional[Union[str, "RelationEnum"]] = None
    relation_other: Optional[str] = None
    shared_predisposition: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    relative_honest_broker_id: Optional[str] = None
    prior_cancer: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    prior_cancer_type: Optional[str] = None
    prior_cancer_laterality: Optional[Union[str, "PriorCancerLateralityEnum"]] = None
    lkss_of_relative: Optional[Union[str, "AliveDeadNotreportedUnknownEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.relation is not None and not isinstance(self.relation, RelationEnum):
            self.relation = RelationEnum(self.relation)

        if self.relation_other is not None and not isinstance(self.relation_other, str):
            self.relation_other = str(self.relation_other)

        if self.shared_predisposition is not None and not isinstance(self.shared_predisposition, NoNotreportedUnknownYesEnum):
            self.shared_predisposition = NoNotreportedUnknownYesEnum(self.shared_predisposition)

        if self.relative_honest_broker_id is not None and not isinstance(self.relative_honest_broker_id, str):
            self.relative_honest_broker_id = str(self.relative_honest_broker_id)

        if self.prior_cancer is not None and not isinstance(self.prior_cancer, NoNotreportedUnknownYesEnum):
            self.prior_cancer = NoNotreportedUnknownYesEnum(self.prior_cancer)

        if self.prior_cancer_type is not None and not isinstance(self.prior_cancer_type, str):
            self.prior_cancer_type = str(self.prior_cancer_type)

        if self.prior_cancer_laterality is not None and not isinstance(self.prior_cancer_laterality, PriorCancerLateralityEnum):
            self.prior_cancer_laterality = PriorCancerLateralityEnum(self.prior_cancer_laterality)

        if self.lkss_of_relative is not None and not isinstance(self.lkss_of_relative, AliveDeadNotreportedUnknownEnum):
            self.lkss_of_relative = AliveDeadNotreportedUnknownEnum(self.lkss_of_relative)

        super().__post_init__(**kwargs)


@dataclass
class VitalsAndAnthropometrics(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/VitalsAndAnthropometrics"]
    class_class_curie: ClassVar[str] = "pcdc:/VitalsAndAnthropometrics"
    class_name: ClassVar[str] = "Vitals And Anthropometrics"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/VitalsAndAnthropometrics")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_measurement: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    measurement_type: Optional[Union[str, "MeasurementTypeEnum"]] = None
    measurement_text: Optional[str] = None
    measurement_numeric: Optional[Decimal] = None
    measurement_unit: Optional[Union[str, "MeasurementUnitEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_measurement is not None and not isinstance(self.age_at_measurement, int):
            self.age_at_measurement = int(self.age_at_measurement)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.measurement_type is not None and not isinstance(self.measurement_type, MeasurementTypeEnum):
            self.measurement_type = MeasurementTypeEnum(self.measurement_type)

        if self.measurement_text is not None and not isinstance(self.measurement_text, str):
            self.measurement_text = str(self.measurement_text)

        if self.measurement_numeric is not None and not isinstance(self.measurement_numeric, Decimal):
            self.measurement_numeric = Decimal(self.measurement_numeric)

        if self.measurement_unit is not None and not isinstance(self.measurement_unit, MeasurementUnitEnum):
            self.measurement_unit = MeasurementUnitEnum(self.measurement_unit)

        super().__post_init__(**kwargs)


@dataclass
class LaboratoryTest(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/LaboratoryTest"]
    class_class_curie: ClassVar[str] = "pcdc:/LaboratoryTest"
    class_name: ClassVar[str] = "Laboratory Test"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/LaboratoryTest")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_lab: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    category: Optional[Union[str, "CategoryEnum"]] = None
    test: Optional[Union[str, "TestEnum"]] = None
    specimen: Optional[Union[str, "SpecimenEnum"]] = None
    specimen_other: Optional[str] = None
    method: Optional[Union[str, "MethodEnum"]] = None
    method_other: Optional[str] = None
    result_text: Optional[str] = None
    result_numeric: Optional[Decimal] = None
    result_unit: Optional[Union[str, "ResultUnitEnum"]] = None
    traumatic_tap: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    bm_morphology: Optional[Union[str, "BmMorphologyEnum"]] = None
    result: Optional[Union[str, "NegativeNotreportedPositiveUnknownEnum"]] = None
    threshold_level: Optional[Union[str, "ThresholdLevelEnum"]] = None
    threshold_high: Optional[Decimal] = None
    thredhold_low: Optional[Decimal] = None
    seq_method: Optional[Union[str, "SeqMethodEnum"]] = None
    threshold_low: Optional[Decimal] = None
    pmid_ref: Optional[Decimal] = None
    malignant_cells: Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None
    test_other: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_lab is not None and not isinstance(self.age_at_lab, int):
            self.age_at_lab = int(self.age_at_lab)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.category is not None and not isinstance(self.category, CategoryEnum):
            self.category = CategoryEnum(self.category)

        if self.test is not None and not isinstance(self.test, TestEnum):
            self.test = TestEnum(self.test)

        if self.specimen is not None and not isinstance(self.specimen, SpecimenEnum):
            self.specimen = SpecimenEnum(self.specimen)

        if self.specimen_other is not None and not isinstance(self.specimen_other, str):
            self.specimen_other = str(self.specimen_other)

        if self.method is not None and not isinstance(self.method, MethodEnum):
            self.method = MethodEnum(self.method)

        if self.method_other is not None and not isinstance(self.method_other, str):
            self.method_other = str(self.method_other)

        if self.result_text is not None and not isinstance(self.result_text, str):
            self.result_text = str(self.result_text)

        if self.result_numeric is not None and not isinstance(self.result_numeric, Decimal):
            self.result_numeric = Decimal(self.result_numeric)

        if self.result_unit is not None and not isinstance(self.result_unit, ResultUnitEnum):
            self.result_unit = ResultUnitEnum(self.result_unit)

        if self.traumatic_tap is not None and not isinstance(self.traumatic_tap, NoNotreportedUnknownYesEnum):
            self.traumatic_tap = NoNotreportedUnknownYesEnum(self.traumatic_tap)

        if self.bm_morphology is not None and not isinstance(self.bm_morphology, BmMorphologyEnum):
            self.bm_morphology = BmMorphologyEnum(self.bm_morphology)

        if self.result is not None and not isinstance(self.result, NegativeNotreportedPositiveUnknownEnum):
            self.result = NegativeNotreportedPositiveUnknownEnum(self.result)

        if self.threshold_level is not None and not isinstance(self.threshold_level, ThresholdLevelEnum):
            self.threshold_level = ThresholdLevelEnum(self.threshold_level)

        if self.threshold_high is not None and not isinstance(self.threshold_high, Decimal):
            self.threshold_high = Decimal(self.threshold_high)

        if self.thredhold_low is not None and not isinstance(self.thredhold_low, Decimal):
            self.thredhold_low = Decimal(self.thredhold_low)

        if self.seq_method is not None and not isinstance(self.seq_method, SeqMethodEnum):
            self.seq_method = SeqMethodEnum(self.seq_method)

        if self.threshold_low is not None and not isinstance(self.threshold_low, Decimal):
            self.threshold_low = Decimal(self.threshold_low)

        if self.pmid_ref is not None and not isinstance(self.pmid_ref, Decimal):
            self.pmid_ref = Decimal(self.pmid_ref)

        if self.malignant_cells is not None and not isinstance(self.malignant_cells, AbsentNotreportedPresentUnknownEnum):
            self.malignant_cells = AbsentNotreportedPresentUnknownEnum(self.malignant_cells)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        if self.test_other is not None and not isinstance(self.test_other, str):
            self.test_other = str(self.test_other)

        super().__post_init__(**kwargs)


@dataclass
class GeneticAnalysis(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/GeneticAnalysis"]
    class_class_curie: ClassVar[str] = "pcdc:/GeneticAnalysis"
    class_name: ClassVar[str] = "Genetic Analysis"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/GeneticAnalysis")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_genetic_analysis: Optional[int] = None
    method: Optional[Union[str, "MethodEnum"]] = None
    specimen: Optional[Union[str, "SpecimenEnum"]] = None
    common_name: Optional[Union[str, "CommonNameEnum"]] = None
    karyotype_status: Optional[Union[str, "KaryotypeStatusEnum"]] = None
    status: Optional[Union[str, "StatusEnum"]] = None
    iscn: Optional[str] = None
    total_chromosomes: Optional[Decimal] = None
    chromosome: Optional[str] = None
    gene: Optional[str] = None
    gene2: Optional[str] = None
    variation_type: Optional[Union[str, "VariationTypeEnum"]] = None
    variation_type_other: Optional[str] = None
    copy_number_variation: Optional[Union[str, "CopyNumberVariationEnum"]] = None
    copy_number: Optional[Decimal] = None
    hgvs_coding: Optional[str] = None
    hgvs_protein: Optional[str] = None
    dna_index_numeric: Optional[Decimal] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    method_other: Optional[str] = None
    independent_aberations: Optional[Decimal] = None
    cells_in_metaphase: Optional[Decimal] = None
    common_name_other: Optional[str] = None
    mutant_allele_fraction: Optional[Decimal] = None
    genomic_source_class: Optional[Union[str, "GenomicSourceClassEnum"]] = None
    expression_consequence: Optional[Union[str, "ExpressionConsequenceEnum"]] = None
    chromosomal_consequence: Optional[Union[str, "ChromosomalConsequenceEnum"]] = None
    allelic_state: Optional[Union[str, "AllelicStateEnum"]] = None
    allelic_frequency: Optional[Decimal] = None
    external_ref_id: Optional[str] = None
    external_ref_id_system: Optional[Union[str, "ExternalRefIdSystemEnum"]] = None
    mosaicism_percent: Optional[Decimal] = None
    variation_effect: Optional[Union[str, "VariationEffectEnum"]] = None
    inheritance_pattern: Optional[Union[str, "InheritancePatternEnum"]] = None
    parental_status: Optional[Union[str, "ParentalStatusEnum"]] = None
    hgvs_coding_transcript: Optional[str] = None
    hgvs_protein_transcript: Optional[str] = None
    reported_significance: Optional[Union[str, "ReportedSignificanceEnum"]] = None
    associated_condition: Optional[Union[str, "AssociatedConditionEnum"]] = None
    associated_condition_other: Optional[str] = None
    review_source: Optional[Union[str, "ReviewSourceEnum"]] = None
    tumor_classification: Optional[Union[str, "TumorClassificationEnum"]] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None
    specimen_other: Optional[str] = None
    biological_analyte: Optional[Union[str, "BiologicalAnalyteEnum"]] = None
    biological_analyte_other: Optional[str] = None
    source_pct: Optional[Union[str, "SourcePctEnum"]] = None
    source_pct_numeric: Optional[Decimal] = None
    tkd_involvement: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    maf: Optional[Union[str, "MafEnum"]] = None
    maf_numeric: Optional[Decimal] = None
    clonal_status: Optional[Union[str, "ClonalStatusEnum"]] = None
    dna_index: Optional[Union[str, "DnaIndexEnum"]] = None
    cytodifferentiation: Optional[Union[str, "CytodifferentiationEnum"]] = None
    mitotic_rate: Optional[Union[str, "MitoticRateEnum"]] = None
    mutated_allele_frequency: Optional[int] = None
    cascade_testing: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    alt_status: Optional[Union[str, "AltStatusEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_genetic_analysis is not None and not isinstance(self.age_at_genetic_analysis, int):
            self.age_at_genetic_analysis = int(self.age_at_genetic_analysis)

        if self.method is not None and not isinstance(self.method, MethodEnum):
            self.method = MethodEnum(self.method)

        if self.specimen is not None and not isinstance(self.specimen, SpecimenEnum):
            self.specimen = SpecimenEnum(self.specimen)

        if self.common_name is not None and not isinstance(self.common_name, CommonNameEnum):
            self.common_name = CommonNameEnum(self.common_name)

        if self.karyotype_status is not None and not isinstance(self.karyotype_status, KaryotypeStatusEnum):
            self.karyotype_status = KaryotypeStatusEnum(self.karyotype_status)

        if self.status is not None and not isinstance(self.status, StatusEnum):
            self.status = StatusEnum(self.status)

        if self.iscn is not None and not isinstance(self.iscn, str):
            self.iscn = str(self.iscn)

        if self.total_chromosomes is not None and not isinstance(self.total_chromosomes, Decimal):
            self.total_chromosomes = Decimal(self.total_chromosomes)

        if self.chromosome is not None and not isinstance(self.chromosome, str):
            self.chromosome = str(self.chromosome)

        if self.gene is not None and not isinstance(self.gene, str):
            self.gene = str(self.gene)

        if self.gene2 is not None and not isinstance(self.gene2, str):
            self.gene2 = str(self.gene2)

        if self.variation_type is not None and not isinstance(self.variation_type, VariationTypeEnum):
            self.variation_type = VariationTypeEnum(self.variation_type)

        if self.variation_type_other is not None and not isinstance(self.variation_type_other, str):
            self.variation_type_other = str(self.variation_type_other)

        if self.copy_number_variation is not None and not isinstance(self.copy_number_variation, CopyNumberVariationEnum):
            self.copy_number_variation = CopyNumberVariationEnum(self.copy_number_variation)

        if self.copy_number is not None and not isinstance(self.copy_number, Decimal):
            self.copy_number = Decimal(self.copy_number)

        if self.hgvs_coding is not None and not isinstance(self.hgvs_coding, str):
            self.hgvs_coding = str(self.hgvs_coding)

        if self.hgvs_protein is not None and not isinstance(self.hgvs_protein, str):
            self.hgvs_protein = str(self.hgvs_protein)

        if self.dna_index_numeric is not None and not isinstance(self.dna_index_numeric, Decimal):
            self.dna_index_numeric = Decimal(self.dna_index_numeric)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.method_other is not None and not isinstance(self.method_other, str):
            self.method_other = str(self.method_other)

        if self.independent_aberations is not None and not isinstance(self.independent_aberations, Decimal):
            self.independent_aberations = Decimal(self.independent_aberations)

        if self.cells_in_metaphase is not None and not isinstance(self.cells_in_metaphase, Decimal):
            self.cells_in_metaphase = Decimal(self.cells_in_metaphase)

        if self.common_name_other is not None and not isinstance(self.common_name_other, str):
            self.common_name_other = str(self.common_name_other)

        if self.mutant_allele_fraction is not None and not isinstance(self.mutant_allele_fraction, Decimal):
            self.mutant_allele_fraction = Decimal(self.mutant_allele_fraction)

        if self.genomic_source_class is not None and not isinstance(self.genomic_source_class, GenomicSourceClassEnum):
            self.genomic_source_class = GenomicSourceClassEnum(self.genomic_source_class)

        if self.expression_consequence is not None and not isinstance(self.expression_consequence, ExpressionConsequenceEnum):
            self.expression_consequence = ExpressionConsequenceEnum(self.expression_consequence)

        if self.chromosomal_consequence is not None and not isinstance(self.chromosomal_consequence, ChromosomalConsequenceEnum):
            self.chromosomal_consequence = ChromosomalConsequenceEnum(self.chromosomal_consequence)

        if self.allelic_state is not None and not isinstance(self.allelic_state, AllelicStateEnum):
            self.allelic_state = AllelicStateEnum(self.allelic_state)

        if self.allelic_frequency is not None and not isinstance(self.allelic_frequency, Decimal):
            self.allelic_frequency = Decimal(self.allelic_frequency)

        if self.external_ref_id is not None and not isinstance(self.external_ref_id, str):
            self.external_ref_id = str(self.external_ref_id)

        if self.external_ref_id_system is not None and not isinstance(self.external_ref_id_system, ExternalRefIdSystemEnum):
            self.external_ref_id_system = ExternalRefIdSystemEnum(self.external_ref_id_system)

        if self.mosaicism_percent is not None and not isinstance(self.mosaicism_percent, Decimal):
            self.mosaicism_percent = Decimal(self.mosaicism_percent)

        if self.variation_effect is not None and not isinstance(self.variation_effect, VariationEffectEnum):
            self.variation_effect = VariationEffectEnum(self.variation_effect)

        if self.inheritance_pattern is not None and not isinstance(self.inheritance_pattern, InheritancePatternEnum):
            self.inheritance_pattern = InheritancePatternEnum(self.inheritance_pattern)

        if self.parental_status is not None and not isinstance(self.parental_status, ParentalStatusEnum):
            self.parental_status = ParentalStatusEnum(self.parental_status)

        if self.hgvs_coding_transcript is not None and not isinstance(self.hgvs_coding_transcript, str):
            self.hgvs_coding_transcript = str(self.hgvs_coding_transcript)

        if self.hgvs_protein_transcript is not None and not isinstance(self.hgvs_protein_transcript, str):
            self.hgvs_protein_transcript = str(self.hgvs_protein_transcript)

        if self.reported_significance is not None and not isinstance(self.reported_significance, ReportedSignificanceEnum):
            self.reported_significance = ReportedSignificanceEnum(self.reported_significance)

        if self.associated_condition is not None and not isinstance(self.associated_condition, AssociatedConditionEnum):
            self.associated_condition = AssociatedConditionEnum(self.associated_condition)

        if self.associated_condition_other is not None and not isinstance(self.associated_condition_other, str):
            self.associated_condition_other = str(self.associated_condition_other)

        if self.review_source is not None and not isinstance(self.review_source, ReviewSourceEnum):
            self.review_source = ReviewSourceEnum(self.review_source)

        if self.tumor_classification is not None and not isinstance(self.tumor_classification, TumorClassificationEnum):
            self.tumor_classification = TumorClassificationEnum(self.tumor_classification)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        if self.specimen_other is not None and not isinstance(self.specimen_other, str):
            self.specimen_other = str(self.specimen_other)

        if self.biological_analyte is not None and not isinstance(self.biological_analyte, BiologicalAnalyteEnum):
            self.biological_analyte = BiologicalAnalyteEnum(self.biological_analyte)

        if self.biological_analyte_other is not None and not isinstance(self.biological_analyte_other, str):
            self.biological_analyte_other = str(self.biological_analyte_other)

        if self.source_pct is not None and not isinstance(self.source_pct, SourcePctEnum):
            self.source_pct = SourcePctEnum(self.source_pct)

        if self.source_pct_numeric is not None and not isinstance(self.source_pct_numeric, Decimal):
            self.source_pct_numeric = Decimal(self.source_pct_numeric)

        if self.tkd_involvement is not None and not isinstance(self.tkd_involvement, NoNotreportedUnknownYesEnum):
            self.tkd_involvement = NoNotreportedUnknownYesEnum(self.tkd_involvement)

        if self.maf is not None and not isinstance(self.maf, MafEnum):
            self.maf = MafEnum(self.maf)

        if self.maf_numeric is not None and not isinstance(self.maf_numeric, Decimal):
            self.maf_numeric = Decimal(self.maf_numeric)

        if self.clonal_status is not None and not isinstance(self.clonal_status, ClonalStatusEnum):
            self.clonal_status = ClonalStatusEnum(self.clonal_status)

        if self.dna_index is not None and not isinstance(self.dna_index, DnaIndexEnum):
            self.dna_index = DnaIndexEnum(self.dna_index)

        if self.cytodifferentiation is not None and not isinstance(self.cytodifferentiation, CytodifferentiationEnum):
            self.cytodifferentiation = CytodifferentiationEnum(self.cytodifferentiation)

        if self.mitotic_rate is not None and not isinstance(self.mitotic_rate, MitoticRateEnum):
            self.mitotic_rate = MitoticRateEnum(self.mitotic_rate)

        if self.mutated_allele_frequency is not None and not isinstance(self.mutated_allele_frequency, int):
            self.mutated_allele_frequency = int(self.mutated_allele_frequency)

        if self.cascade_testing is not None and not isinstance(self.cascade_testing, NoNotreportedUnknownYesEnum):
            self.cascade_testing = NoNotreportedUnknownYesEnum(self.cascade_testing)

        if self.alt_status is not None and not isinstance(self.alt_status, AltStatusEnum):
            self.alt_status = AltStatusEnum(self.alt_status)

        super().__post_init__(**kwargs)


@dataclass
class FunctionTest(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/FunctionTest"]
    class_class_curie: ClassVar[str] = "pcdc:/FunctionTest"
    class_name: ClassVar[str] = "Function Test"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/FunctionTest")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_function_test: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    test: Optional[Union[str, "TestEnum"]] = None
    measurement_type: Optional[Union[str, "MeasurementTypeEnum"]] = None
    measurement_text: Optional[str] = None
    measurement_numeric: Optional[Decimal] = None
    measurement_unit: Optional[Union[str, "MeasurementUnitEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_function_test is not None and not isinstance(self.age_at_function_test, int):
            self.age_at_function_test = int(self.age_at_function_test)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.test is not None and not isinstance(self.test, TestEnum):
            self.test = TestEnum(self.test)

        if self.measurement_type is not None and not isinstance(self.measurement_type, MeasurementTypeEnum):
            self.measurement_type = MeasurementTypeEnum(self.measurement_type)

        if self.measurement_text is not None and not isinstance(self.measurement_text, str):
            self.measurement_text = str(self.measurement_text)

        if self.measurement_numeric is not None and not isinstance(self.measurement_numeric, Decimal):
            self.measurement_numeric = Decimal(self.measurement_numeric)

        if self.measurement_unit is not None and not isinstance(self.measurement_unit, MeasurementUnitEnum):
            self.measurement_unit = MeasurementUnitEnum(self.measurement_unit)

        super().__post_init__(**kwargs)


@dataclass
class Immunohistochemistry(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Immunohistochemistry"]
    class_class_curie: ClassVar[str] = "pcdc:/Immunohistochemistry"
    class_name: ClassVar[str] = "Immunohistochemistry"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Immunohistochemistry")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_ihc: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    review_source: Optional[Union[str, "ReviewSourceEnum"]] = None
    test: Optional[Union[str, "TestEnum"]] = None
    result: Optional[Union[str, "NegativeNotreportedPositiveUnknownEnum"]] = None
    result_text: Optional[str] = None
    result_numeric: Optional[Decimal] = None
    specimen: Optional[Union[str, "SpecimenEnum"]] = None
    result_unit: Optional[Union[str, "ResultUnitEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_ihc is not None and not isinstance(self.age_at_ihc, int):
            self.age_at_ihc = int(self.age_at_ihc)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.review_source is not None and not isinstance(self.review_source, ReviewSourceEnum):
            self.review_source = ReviewSourceEnum(self.review_source)

        if self.test is not None and not isinstance(self.test, TestEnum):
            self.test = TestEnum(self.test)

        if self.result is not None and not isinstance(self.result, NegativeNotreportedPositiveUnknownEnum):
            self.result = NegativeNotreportedPositiveUnknownEnum(self.result)

        if self.result_text is not None and not isinstance(self.result_text, str):
            self.result_text = str(self.result_text)

        if self.result_numeric is not None and not isinstance(self.result_numeric, Decimal):
            self.result_numeric = Decimal(self.result_numeric)

        if self.specimen is not None and not isinstance(self.specimen, SpecimenEnum):
            self.specimen = SpecimenEnum(self.specimen)

        if self.result_unit is not None and not isinstance(self.result_unit, ResultUnitEnum):
            self.result_unit = ResultUnitEnum(self.result_unit)

        super().__post_init__(**kwargs)


@dataclass
class Imaging(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Imaging"]
    class_class_curie: ClassVar[str] = "pcdc:/Imaging"
    class_name: ClassVar[str] = "Imaging"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Imaging")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_imaging: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    method: Optional[Union[str, "MethodEnum"]] = None
    result: Optional[Union[str, "NegativeNotreportedPositiveUnknownEnum"]] = None
    deauville_score: Optional[Union[str, "DeauvilleScoreEnum"]] = None
    qpet_score: Optional[Decimal] = None
    finding: Optional[Union[str, "FindingEnum"]] = None
    finding_other: Optional[str] = None
    finding_site: Optional[Union[str, "FindingSiteEnum"]] = None
    finding_site_other: Optional[str] = None
    bone_marrow: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    csf_result: Optional[Union[str, "NegativeNotreportedPositiveUnknownEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_imaging is not None and not isinstance(self.age_at_imaging, int):
            self.age_at_imaging = int(self.age_at_imaging)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.method is not None and not isinstance(self.method, MethodEnum):
            self.method = MethodEnum(self.method)

        if self.result is not None and not isinstance(self.result, NegativeNotreportedPositiveUnknownEnum):
            self.result = NegativeNotreportedPositiveUnknownEnum(self.result)

        if self.deauville_score is not None and not isinstance(self.deauville_score, DeauvilleScoreEnum):
            self.deauville_score = DeauvilleScoreEnum(self.deauville_score)

        if self.qpet_score is not None and not isinstance(self.qpet_score, Decimal):
            self.qpet_score = Decimal(self.qpet_score)

        if self.finding is not None and not isinstance(self.finding, FindingEnum):
            self.finding = FindingEnum(self.finding)

        if self.finding_other is not None and not isinstance(self.finding_other, str):
            self.finding_other = str(self.finding_other)

        if self.finding_site is not None and not isinstance(self.finding_site, FindingSiteEnum):
            self.finding_site = FindingSiteEnum(self.finding_site)

        if self.finding_site_other is not None and not isinstance(self.finding_site_other, str):
            self.finding_site_other = str(self.finding_site_other)

        if self.bone_marrow is not None and not isinstance(self.bone_marrow, NoNotreportedUnknownYesEnum):
            self.bone_marrow = NoNotreportedUnknownYesEnum(self.bone_marrow)

        if self.csf_result is not None and not isinstance(self.csf_result, NegativeNotreportedPositiveUnknownEnum):
            self.csf_result = NegativeNotreportedPositiveUnknownEnum(self.csf_result)

        super().__post_init__(**kwargs)


@dataclass
class Histology(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Histology"]
    class_class_curie: ClassVar[str] = "pcdc:/Histology"
    class_name: ClassVar[str] = "Histology"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Histology")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_hist_assessment: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    morph_code: Optional[str] = None
    morph_code_system: Optional[Union[str, "MorphCodeSystemEnum"]] = None
    morph_code_system_version: Optional[str] = None
    top_code: Optional[str] = None
    top_code_system: Optional[Union[str, "TopCodeSystemEnum"]] = None
    top_code_system_version: Optional[str] = None
    all_type: Optional[Union[str, "AllTypeEnum"]] = None
    fab_type: Optional[Union[str, "FabTypeEnum"]] = None
    who_aml: Optional[Union[str, "WhoAmlEnum"]] = None
    mpal: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    mlds: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    tam: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    secondary_aml: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    histology: Optional[Union[str, "HistologyEnum"]] = None
    molecular_classification: Optional[Union[str, "MolecularClassificationEnum"]] = None
    molecular_classification_other: Optional[str] = None
    determination_source: Optional[Union[str, "DeterminationSourceEnum"]] = None
    method: Optional[Union[str, "MethodEnum"]] = None
    morph_code_txt: Optional[str] = None
    review_source: Optional[Union[str, "ReviewSourceEnum"]] = None
    histology_result_text: Optional[str] = None
    histology_result_numeric: Optional[Decimal] = None
    histology_result_unit: Optional[Union[str, "HistologyResultUnitEnum"]] = None
    histology_grade: Optional[Union[str, "HistologyGradeEnum"]] = None
    mature_glial_implants: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    somatic_malignancy_type: Optional[Union[str, "SomaticMalignancyTypeEnum"]] = None
    somatic_malignancy_type_other: Optional[str] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None
    revised_inpc: Optional[Union[str, "RevisedInpcEnum"]] = None
    mki: Optional[Union[str, "MkiEnum"]] = None
    histology_other: Optional[str] = None
    tumor_site: Optional[Union[str, "TumorSiteEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_hist_assessment is not None and not isinstance(self.age_at_hist_assessment, int):
            self.age_at_hist_assessment = int(self.age_at_hist_assessment)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.morph_code is not None and not isinstance(self.morph_code, str):
            self.morph_code = str(self.morph_code)

        if self.morph_code_system is not None and not isinstance(self.morph_code_system, MorphCodeSystemEnum):
            self.morph_code_system = MorphCodeSystemEnum(self.morph_code_system)

        if self.morph_code_system_version is not None and not isinstance(self.morph_code_system_version, str):
            self.morph_code_system_version = str(self.morph_code_system_version)

        if self.top_code is not None and not isinstance(self.top_code, str):
            self.top_code = str(self.top_code)

        if self.top_code_system is not None and not isinstance(self.top_code_system, TopCodeSystemEnum):
            self.top_code_system = TopCodeSystemEnum(self.top_code_system)

        if self.top_code_system_version is not None and not isinstance(self.top_code_system_version, str):
            self.top_code_system_version = str(self.top_code_system_version)

        if self.all_type is not None and not isinstance(self.all_type, AllTypeEnum):
            self.all_type = AllTypeEnum(self.all_type)

        if self.fab_type is not None and not isinstance(self.fab_type, FabTypeEnum):
            self.fab_type = FabTypeEnum(self.fab_type)

        if self.who_aml is not None and not isinstance(self.who_aml, WhoAmlEnum):
            self.who_aml = WhoAmlEnum(self.who_aml)

        if self.mpal is not None and not isinstance(self.mpal, NoNotreportedUnknownYesEnum):
            self.mpal = NoNotreportedUnknownYesEnum(self.mpal)

        if self.mlds is not None and not isinstance(self.mlds, NoNotreportedUnknownYesEnum):
            self.mlds = NoNotreportedUnknownYesEnum(self.mlds)

        if self.tam is not None and not isinstance(self.tam, NoNotreportedUnknownYesEnum):
            self.tam = NoNotreportedUnknownYesEnum(self.tam)

        if self.secondary_aml is not None and not isinstance(self.secondary_aml, NoNotreportedUnknownYesEnum):
            self.secondary_aml = NoNotreportedUnknownYesEnum(self.secondary_aml)

        if self.histology is not None and not isinstance(self.histology, HistologyEnum):
            self.histology = HistologyEnum(self.histology)

        if self.molecular_classification is not None and not isinstance(self.molecular_classification, MolecularClassificationEnum):
            self.molecular_classification = MolecularClassificationEnum(self.molecular_classification)

        if self.molecular_classification_other is not None and not isinstance(self.molecular_classification_other, str):
            self.molecular_classification_other = str(self.molecular_classification_other)

        if self.determination_source is not None and not isinstance(self.determination_source, DeterminationSourceEnum):
            self.determination_source = DeterminationSourceEnum(self.determination_source)

        if self.method is not None and not isinstance(self.method, MethodEnum):
            self.method = MethodEnum(self.method)

        if self.morph_code_txt is not None and not isinstance(self.morph_code_txt, str):
            self.morph_code_txt = str(self.morph_code_txt)

        if self.review_source is not None and not isinstance(self.review_source, ReviewSourceEnum):
            self.review_source = ReviewSourceEnum(self.review_source)

        if self.histology_result_text is not None and not isinstance(self.histology_result_text, str):
            self.histology_result_text = str(self.histology_result_text)

        if self.histology_result_numeric is not None and not isinstance(self.histology_result_numeric, Decimal):
            self.histology_result_numeric = Decimal(self.histology_result_numeric)

        if self.histology_result_unit is not None and not isinstance(self.histology_result_unit, HistologyResultUnitEnum):
            self.histology_result_unit = HistologyResultUnitEnum(self.histology_result_unit)

        if self.histology_grade is not None and not isinstance(self.histology_grade, HistologyGradeEnum):
            self.histology_grade = HistologyGradeEnum(self.histology_grade)

        if self.mature_glial_implants is not None and not isinstance(self.mature_glial_implants, NoNotreportedUnknownYesEnum):
            self.mature_glial_implants = NoNotreportedUnknownYesEnum(self.mature_glial_implants)

        if self.somatic_malignancy_type is not None and not isinstance(self.somatic_malignancy_type, SomaticMalignancyTypeEnum):
            self.somatic_malignancy_type = SomaticMalignancyTypeEnum(self.somatic_malignancy_type)

        if self.somatic_malignancy_type_other is not None and not isinstance(self.somatic_malignancy_type_other, str):
            self.somatic_malignancy_type_other = str(self.somatic_malignancy_type_other)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        if self.revised_inpc is not None and not isinstance(self.revised_inpc, RevisedInpcEnum):
            self.revised_inpc = RevisedInpcEnum(self.revised_inpc)

        if self.mki is not None and not isinstance(self.mki, MkiEnum):
            self.mki = MkiEnum(self.mki)

        if self.histology_other is not None and not isinstance(self.histology_other, str):
            self.histology_other = str(self.histology_other)

        if self.tumor_site is not None and not isinstance(self.tumor_site, TumorSiteEnum):
            self.tumor_site = TumorSiteEnum(self.tumor_site)

        super().__post_init__(**kwargs)


@dataclass
class DiseaseCharacteristics(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/DiseaseCharacteristics"]
    class_class_curie: ClassVar[str] = "pcdc:/DiseaseCharacteristics"
    class_name: ClassVar[str] = "Disease Characteristics"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/DiseaseCharacteristics")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    disease_site: Optional[Union[str, "DiseaseSiteEnum"]] = None
    detection_method_other: Optional[str] = None
    cns_disease_status: Optional[Union[str, "CnsDiseaseStatusEnum"]] = None
    prior_steroids_week: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    prior_steroids_month: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    bulk_med_mass: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    disease_site_other: Optional[str] = None
    detection_method: Optional[Union[str, "DetectionMethodEnum"]] = None
    myeloid_sarcoma: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    myeloid_sarcoma_site: Optional[Union[str, "MyeloidSarcomaSiteEnum"]] = None
    myeloid_sarcoma_site_other: Optional[str] = None
    age_at_disease_characteristic: Optional[int] = None
    performance_score: Optional[Union[str, "PerformanceScoreEnum"]] = None
    performance_score_system: Optional[Union[str, "PerformanceScoreSystemEnum"]] = None
    gpoh_score: Optional[Union[str, "GpohScoreEnum"]] = None
    risk_group_system: Optional[Union[str, "RiskGroupSystemEnum"]] = None
    risk_group: Optional[Union[str, "RiskGroupEnum"]] = None
    gts_treatment: Optional[Union[str, "GtsTreatmentEnum"]] = None
    bulk_disease: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    bulk_nodal_aggregate: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    med_ratio: Optional[Decimal] = None
    fever: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    night_sweats: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    weight_loss: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    nodular_splenic: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None
    initial_treatment_category: Optional[Union[str, "InitialTreatmentCategoryEnum"]] = None
    tumor_site: Optional[Union[str, "TumorSiteEnum"]] = None
    evaluator: Optional[Union[str, "EvaluatorEnum"]] = None
    evaluator_other: Optional[str] = None
    presentation_symptoms: Optional[Union[str, "PresentationSymptomsEnum"]] = None
    presentation_symptoms_other: Optional[str] = None
    clinical_signs: Optional[Union[str, "ClinicalSignsEnum"]] = None
    clinical_signs_other: Optional[str] = None
    suspected_referring_diagnosis: Optional[Union[str, "SuspectedReferringDiagnosisEnum"]] = None
    suspected_diagnosis_other: Optional[str] = None
    visual_acuity_technique: Optional[Union[str, "VisualAcuityTechniqueEnum"]] = None
    visual_acuity_result: Optional[Union[str, "VisualAcuityResultEnum"]] = None
    visual_acuity_result_numeric: Optional[Decimal] = None
    visual_acuity_notation: Optional[Union[str, "VisualAcuityNotationEnum"]] = None
    anterior_segment_exam: Optional[Union[str, "AnteriorSegmentExamEnum"]] = None
    anterior_segment_details: Optional[Union[str, "AnteriorSegmentDetailsEnum"]] = None
    anterior_segment_details_other: Optional[str] = None
    intraocular_pressure: Optional[Decimal] = None
    intraocular_pressure_unit: Optional[Union[str, "IntraocularPressureUnitEnum"]] = None
    retinal_detachment: Optional[Union[str, "RetinalDetachmentEnum"]] = None
    advanced_disease_signs: Optional[Union[str, "AdvancedDiseaseSignsEnum"]] = None
    advanced_disease_signs_other: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.disease_site is not None and not isinstance(self.disease_site, DiseaseSiteEnum):
            self.disease_site = DiseaseSiteEnum(self.disease_site)

        if self.detection_method_other is not None and not isinstance(self.detection_method_other, str):
            self.detection_method_other = str(self.detection_method_other)

        if self.cns_disease_status is not None and not isinstance(self.cns_disease_status, CnsDiseaseStatusEnum):
            self.cns_disease_status = CnsDiseaseStatusEnum(self.cns_disease_status)

        if self.prior_steroids_week is not None and not isinstance(self.prior_steroids_week, NoNotreportedUnknownYesEnum):
            self.prior_steroids_week = NoNotreportedUnknownYesEnum(self.prior_steroids_week)

        if self.prior_steroids_month is not None and not isinstance(self.prior_steroids_month, NoNotreportedUnknownYesEnum):
            self.prior_steroids_month = NoNotreportedUnknownYesEnum(self.prior_steroids_month)

        if self.bulk_med_mass is not None and not isinstance(self.bulk_med_mass, NoNotreportedUnknownYesEnum):
            self.bulk_med_mass = NoNotreportedUnknownYesEnum(self.bulk_med_mass)

        if self.disease_site_other is not None and not isinstance(self.disease_site_other, str):
            self.disease_site_other = str(self.disease_site_other)

        if self.detection_method is not None and not isinstance(self.detection_method, DetectionMethodEnum):
            self.detection_method = DetectionMethodEnum(self.detection_method)

        if self.myeloid_sarcoma is not None and not isinstance(self.myeloid_sarcoma, NoNotreportedUnknownYesEnum):
            self.myeloid_sarcoma = NoNotreportedUnknownYesEnum(self.myeloid_sarcoma)

        if self.myeloid_sarcoma_site is not None and not isinstance(self.myeloid_sarcoma_site, MyeloidSarcomaSiteEnum):
            self.myeloid_sarcoma_site = MyeloidSarcomaSiteEnum(self.myeloid_sarcoma_site)

        if self.myeloid_sarcoma_site_other is not None and not isinstance(self.myeloid_sarcoma_site_other, str):
            self.myeloid_sarcoma_site_other = str(self.myeloid_sarcoma_site_other)

        if self.age_at_disease_characteristic is not None and not isinstance(self.age_at_disease_characteristic, int):
            self.age_at_disease_characteristic = int(self.age_at_disease_characteristic)

        if self.performance_score is not None and not isinstance(self.performance_score, PerformanceScoreEnum):
            self.performance_score = PerformanceScoreEnum(self.performance_score)

        if self.performance_score_system is not None and not isinstance(self.performance_score_system, PerformanceScoreSystemEnum):
            self.performance_score_system = PerformanceScoreSystemEnum(self.performance_score_system)

        if self.gpoh_score is not None and not isinstance(self.gpoh_score, GpohScoreEnum):
            self.gpoh_score = GpohScoreEnum(self.gpoh_score)

        if self.risk_group_system is not None and not isinstance(self.risk_group_system, RiskGroupSystemEnum):
            self.risk_group_system = RiskGroupSystemEnum(self.risk_group_system)

        if self.risk_group is not None and not isinstance(self.risk_group, RiskGroupEnum):
            self.risk_group = RiskGroupEnum(self.risk_group)

        if self.gts_treatment is not None and not isinstance(self.gts_treatment, GtsTreatmentEnum):
            self.gts_treatment = GtsTreatmentEnum(self.gts_treatment)

        if self.bulk_disease is not None and not isinstance(self.bulk_disease, NoNotreportedUnknownYesEnum):
            self.bulk_disease = NoNotreportedUnknownYesEnum(self.bulk_disease)

        if self.bulk_nodal_aggregate is not None and not isinstance(self.bulk_nodal_aggregate, NoNotreportedUnknownYesEnum):
            self.bulk_nodal_aggregate = NoNotreportedUnknownYesEnum(self.bulk_nodal_aggregate)

        if self.med_ratio is not None and not isinstance(self.med_ratio, Decimal):
            self.med_ratio = Decimal(self.med_ratio)

        if self.fever is not None and not isinstance(self.fever, NoNotreportedUnknownYesEnum):
            self.fever = NoNotreportedUnknownYesEnum(self.fever)

        if self.night_sweats is not None and not isinstance(self.night_sweats, NoNotreportedUnknownYesEnum):
            self.night_sweats = NoNotreportedUnknownYesEnum(self.night_sweats)

        if self.weight_loss is not None and not isinstance(self.weight_loss, NoNotreportedUnknownYesEnum):
            self.weight_loss = NoNotreportedUnknownYesEnum(self.weight_loss)

        if self.nodular_splenic is not None and not isinstance(self.nodular_splenic, NoNotreportedUnknownYesEnum):
            self.nodular_splenic = NoNotreportedUnknownYesEnum(self.nodular_splenic)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        if self.initial_treatment_category is not None and not isinstance(self.initial_treatment_category, InitialTreatmentCategoryEnum):
            self.initial_treatment_category = InitialTreatmentCategoryEnum(self.initial_treatment_category)

        if self.tumor_site is not None and not isinstance(self.tumor_site, TumorSiteEnum):
            self.tumor_site = TumorSiteEnum(self.tumor_site)

        if self.evaluator is not None and not isinstance(self.evaluator, EvaluatorEnum):
            self.evaluator = EvaluatorEnum(self.evaluator)

        if self.evaluator_other is not None and not isinstance(self.evaluator_other, str):
            self.evaluator_other = str(self.evaluator_other)

        if self.presentation_symptoms is not None and not isinstance(self.presentation_symptoms, PresentationSymptomsEnum):
            self.presentation_symptoms = PresentationSymptomsEnum(self.presentation_symptoms)

        if self.presentation_symptoms_other is not None and not isinstance(self.presentation_symptoms_other, str):
            self.presentation_symptoms_other = str(self.presentation_symptoms_other)

        if self.clinical_signs is not None and not isinstance(self.clinical_signs, ClinicalSignsEnum):
            self.clinical_signs = ClinicalSignsEnum(self.clinical_signs)

        if self.clinical_signs_other is not None and not isinstance(self.clinical_signs_other, str):
            self.clinical_signs_other = str(self.clinical_signs_other)

        if self.suspected_referring_diagnosis is not None and not isinstance(self.suspected_referring_diagnosis, SuspectedReferringDiagnosisEnum):
            self.suspected_referring_diagnosis = SuspectedReferringDiagnosisEnum(self.suspected_referring_diagnosis)

        if self.suspected_diagnosis_other is not None and not isinstance(self.suspected_diagnosis_other, str):
            self.suspected_diagnosis_other = str(self.suspected_diagnosis_other)

        if self.visual_acuity_technique is not None and not isinstance(self.visual_acuity_technique, VisualAcuityTechniqueEnum):
            self.visual_acuity_technique = VisualAcuityTechniqueEnum(self.visual_acuity_technique)

        if self.visual_acuity_result is not None and not isinstance(self.visual_acuity_result, VisualAcuityResultEnum):
            self.visual_acuity_result = VisualAcuityResultEnum(self.visual_acuity_result)

        if self.visual_acuity_result_numeric is not None and not isinstance(self.visual_acuity_result_numeric, Decimal):
            self.visual_acuity_result_numeric = Decimal(self.visual_acuity_result_numeric)

        if self.visual_acuity_notation is not None and not isinstance(self.visual_acuity_notation, VisualAcuityNotationEnum):
            self.visual_acuity_notation = VisualAcuityNotationEnum(self.visual_acuity_notation)

        if self.anterior_segment_exam is not None and not isinstance(self.anterior_segment_exam, AnteriorSegmentExamEnum):
            self.anterior_segment_exam = AnteriorSegmentExamEnum(self.anterior_segment_exam)

        if self.anterior_segment_details is not None and not isinstance(self.anterior_segment_details, AnteriorSegmentDetailsEnum):
            self.anterior_segment_details = AnteriorSegmentDetailsEnum(self.anterior_segment_details)

        if self.anterior_segment_details_other is not None and not isinstance(self.anterior_segment_details_other, str):
            self.anterior_segment_details_other = str(self.anterior_segment_details_other)

        if self.intraocular_pressure is not None and not isinstance(self.intraocular_pressure, Decimal):
            self.intraocular_pressure = Decimal(self.intraocular_pressure)

        if self.intraocular_pressure_unit is not None and not isinstance(self.intraocular_pressure_unit, IntraocularPressureUnitEnum):
            self.intraocular_pressure_unit = IntraocularPressureUnitEnum(self.intraocular_pressure_unit)

        if self.retinal_detachment is not None and not isinstance(self.retinal_detachment, RetinalDetachmentEnum):
            self.retinal_detachment = RetinalDetachmentEnum(self.retinal_detachment)

        if self.advanced_disease_signs is not None and not isinstance(self.advanced_disease_signs, AdvancedDiseaseSignsEnum):
            self.advanced_disease_signs = AdvancedDiseaseSignsEnum(self.advanced_disease_signs)

        if self.advanced_disease_signs_other is not None and not isinstance(self.advanced_disease_signs_other, str):
            self.advanced_disease_signs_other = str(self.advanced_disease_signs_other)

        super().__post_init__(**kwargs)


@dataclass
class TumorAssessment(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/TumorAssessment"]
    class_class_curie: ClassVar[str] = "pcdc:/TumorAssessment"
    class_name: ClassVar[str] = "Tumor Assessment"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/TumorAssessment")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_assessment: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    detection_method: Optional[Union[str, "DetectionMethodEnum"]] = None
    review_source: Optional[Union[str, "ReviewSourceEnum"]] = None
    mri_sequence: Optional[Union[str, "MriSequenceEnum"]] = None
    tumor_presentation: Optional[Union[str, "TumorPresentationEnum"]] = None
    classification: Optional[Union[str, "ClassificationEnum"]] = None
    site: Optional[Union[str, "SiteEnum"]] = None
    site_other: Optional[str] = None
    age_at_tumor_assessment: Optional[int] = None
    status: Optional[Union[str, "StatusEnum"]] = None
    assessment_reason: Optional[Union[str, "AssessmentReasonEnum"]] = None
    morph_code: Optional[str] = None
    morph_code_txt: Optional[str] = None
    morph_code_system: Optional[Union[str, "MorphCodeSystemEnum"]] = None
    morph_code_system_version: Optional[str] = None
    top_code: Optional[str] = None
    top_code_txt: Optional[str] = None
    top_code_system: Optional[Union[str, "TopCodeSystemEnum"]] = None
    top_code_system_version: Optional[str] = None
    longest_diam_dim1: Optional[Decimal] = None
    longest_diam_dim2: Optional[Decimal] = None
    longest_diam_dim3: Optional[Decimal] = None
    tumor_submitter_id: Optional[str] = None
    primary_tumor_submitter_id: Optional[str] = None
    tissue_type: Optional[Union[str, "TissueTypeEnum"]] = None
    classification_status: Optional[Union[str, "ClassificationStatusEnum"]] = None
    multiplicity: Optional[Union[str, "MultiplicityEnum"]] = None
    tumor_size: Optional[Union[str, "TumorSizeEnum"]] = None
    tumor_volume: Optional[Union[str, "TumorVolumeEnum"]] = None
    estimated_volume: Optional[Decimal] = None
    laterality: Optional[Union[str, "BilateralLeftMidlineNotreportedRightUnknownEnum"]] = None
    fracture: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    skip_tumor: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    ipsilateral_nodules: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    joint_involvement: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    site_within_bone: Optional[Union[str, "SiteWithinBoneEnum"]] = None
    nodal_involvement: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    nodal_site: Optional[Union[str, "NodalSiteEnum"]] = None
    extension_tumor_type: Optional[Union[str, "ExtensionTumorTypeEnum"]] = None
    detection_method_other: Optional[str] = None
    e_extension_site: Optional[Union[str, "EExtensionSiteEnum"]] = None
    e_extension_site_other: Optional[str] = None
    diam_type: Optional[Union[str, "DiamTypeEnum"]] = None
    bulky_disease: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    effusion: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    effusion_type: Optional[Union[str, "EffusionTypeEnum"]] = None
    response: Optional[Union[str, "ResponseEnum"]] = None
    pct_change: Optional[Decimal] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None
    tumor_type: Optional[Union[str, "TumorTypeEnum"]] = None
    mibg_avidity: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    invasiveness_status: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    depth: Optional[Union[str, "DepthEnum"]] = None
    skip_met_involvement: Optional[Union[str, "SkipMetInvolvementEnum"]] = None
    fracture_site: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    massive_choroidal_extension: Optional[Union[str, "MassiveChoroidalExtensionEnum"]] = None
    visual_discrete_tumors: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    tumor_number: Optional[Decimal] = None
    tumor_from_fovea: Optional[Union[str, "TumorFromFoveaEnum"]] = None
    tumor_from_optic_nerve: Optional[Union[str, "TumorFromOpticNerveEnum"]] = None
    fluid_from_tumor: Optional[Union[str, "FluidFromTumorEnum"]] = None
    seeds_present: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    seeds_pattern: Optional[Union[str, "SeedsPatternEnum"]] = None
    seeds_status: Optional[Union[str, "SeedsStatusEnum"]] = None
    seeds_classification: Optional[Union[str, "SeedsClassificationEnum"]] = None
    invasiveness: Optional[Union[str, "InvasivenessEnum"]] = None
    nodal_determination: Optional[Union[str, "NodalDeterminationEnum"]] = None
    nodal_determination_source: Optional[Union[str, "NodalDeterminationSourceEnum"]] = None
    parameningeal_extension: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    necrosis_status: Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]] = None
    necrosis_pct_numeric: Optional[Decimal] = None
    anaplasia_status: Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]] = None
    anaplasia_type: Optional[Union[str, "AnaplasiaTypeEnum"]] = None
    anaplasia_pct_numeric: Optional[Decimal] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_assessment is not None and not isinstance(self.age_at_assessment, int):
            self.age_at_assessment = int(self.age_at_assessment)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.detection_method is not None and not isinstance(self.detection_method, DetectionMethodEnum):
            self.detection_method = DetectionMethodEnum(self.detection_method)

        if self.review_source is not None and not isinstance(self.review_source, ReviewSourceEnum):
            self.review_source = ReviewSourceEnum(self.review_source)

        if self.mri_sequence is not None and not isinstance(self.mri_sequence, MriSequenceEnum):
            self.mri_sequence = MriSequenceEnum(self.mri_sequence)

        if self.tumor_presentation is not None and not isinstance(self.tumor_presentation, TumorPresentationEnum):
            self.tumor_presentation = TumorPresentationEnum(self.tumor_presentation)

        if self.classification is not None and not isinstance(self.classification, ClassificationEnum):
            self.classification = ClassificationEnum(self.classification)

        if self.site is not None and not isinstance(self.site, SiteEnum):
            self.site = SiteEnum(self.site)

        if self.site_other is not None and not isinstance(self.site_other, str):
            self.site_other = str(self.site_other)

        if self.age_at_tumor_assessment is not None and not isinstance(self.age_at_tumor_assessment, int):
            self.age_at_tumor_assessment = int(self.age_at_tumor_assessment)

        if self.status is not None and not isinstance(self.status, StatusEnum):
            self.status = StatusEnum(self.status)

        if self.assessment_reason is not None and not isinstance(self.assessment_reason, AssessmentReasonEnum):
            self.assessment_reason = AssessmentReasonEnum(self.assessment_reason)

        if self.morph_code is not None and not isinstance(self.morph_code, str):
            self.morph_code = str(self.morph_code)

        if self.morph_code_txt is not None and not isinstance(self.morph_code_txt, str):
            self.morph_code_txt = str(self.morph_code_txt)

        if self.morph_code_system is not None and not isinstance(self.morph_code_system, MorphCodeSystemEnum):
            self.morph_code_system = MorphCodeSystemEnum(self.morph_code_system)

        if self.morph_code_system_version is not None and not isinstance(self.morph_code_system_version, str):
            self.morph_code_system_version = str(self.morph_code_system_version)

        if self.top_code is not None and not isinstance(self.top_code, str):
            self.top_code = str(self.top_code)

        if self.top_code_txt is not None and not isinstance(self.top_code_txt, str):
            self.top_code_txt = str(self.top_code_txt)

        if self.top_code_system is not None and not isinstance(self.top_code_system, TopCodeSystemEnum):
            self.top_code_system = TopCodeSystemEnum(self.top_code_system)

        if self.top_code_system_version is not None and not isinstance(self.top_code_system_version, str):
            self.top_code_system_version = str(self.top_code_system_version)

        if self.longest_diam_dim1 is not None and not isinstance(self.longest_diam_dim1, Decimal):
            self.longest_diam_dim1 = Decimal(self.longest_diam_dim1)

        if self.longest_diam_dim2 is not None and not isinstance(self.longest_diam_dim2, Decimal):
            self.longest_diam_dim2 = Decimal(self.longest_diam_dim2)

        if self.longest_diam_dim3 is not None and not isinstance(self.longest_diam_dim3, Decimal):
            self.longest_diam_dim3 = Decimal(self.longest_diam_dim3)

        if self.tumor_submitter_id is not None and not isinstance(self.tumor_submitter_id, str):
            self.tumor_submitter_id = str(self.tumor_submitter_id)

        if self.primary_tumor_submitter_id is not None and not isinstance(self.primary_tumor_submitter_id, str):
            self.primary_tumor_submitter_id = str(self.primary_tumor_submitter_id)

        if self.tissue_type is not None and not isinstance(self.tissue_type, TissueTypeEnum):
            self.tissue_type = TissueTypeEnum(self.tissue_type)

        if self.classification_status is not None and not isinstance(self.classification_status, ClassificationStatusEnum):
            self.classification_status = ClassificationStatusEnum(self.classification_status)

        if self.multiplicity is not None and not isinstance(self.multiplicity, MultiplicityEnum):
            self.multiplicity = MultiplicityEnum(self.multiplicity)

        if self.tumor_size is not None and not isinstance(self.tumor_size, TumorSizeEnum):
            self.tumor_size = TumorSizeEnum(self.tumor_size)

        if self.tumor_volume is not None and not isinstance(self.tumor_volume, TumorVolumeEnum):
            self.tumor_volume = TumorVolumeEnum(self.tumor_volume)

        if self.estimated_volume is not None and not isinstance(self.estimated_volume, Decimal):
            self.estimated_volume = Decimal(self.estimated_volume)

        if self.laterality is not None and not isinstance(self.laterality, BilateralLeftMidlineNotreportedRightUnknownEnum):
            self.laterality = BilateralLeftMidlineNotreportedRightUnknownEnum(self.laterality)

        if self.fracture is not None and not isinstance(self.fracture, NoNotreportedUnknownYesEnum):
            self.fracture = NoNotreportedUnknownYesEnum(self.fracture)

        if self.skip_tumor is not None and not isinstance(self.skip_tumor, NoNotreportedUnknownYesEnum):
            self.skip_tumor = NoNotreportedUnknownYesEnum(self.skip_tumor)

        if self.ipsilateral_nodules is not None and not isinstance(self.ipsilateral_nodules, NoNotreportedUnknownYesEnum):
            self.ipsilateral_nodules = NoNotreportedUnknownYesEnum(self.ipsilateral_nodules)

        if self.joint_involvement is not None and not isinstance(self.joint_involvement, NoNotreportedUnknownYesEnum):
            self.joint_involvement = NoNotreportedUnknownYesEnum(self.joint_involvement)

        if self.site_within_bone is not None and not isinstance(self.site_within_bone, SiteWithinBoneEnum):
            self.site_within_bone = SiteWithinBoneEnum(self.site_within_bone)

        if self.nodal_involvement is not None and not isinstance(self.nodal_involvement, NoNotreportedUnknownYesEnum):
            self.nodal_involvement = NoNotreportedUnknownYesEnum(self.nodal_involvement)

        if self.nodal_site is not None and not isinstance(self.nodal_site, NodalSiteEnum):
            self.nodal_site = NodalSiteEnum(self.nodal_site)

        if self.extension_tumor_type is not None and not isinstance(self.extension_tumor_type, ExtensionTumorTypeEnum):
            self.extension_tumor_type = ExtensionTumorTypeEnum(self.extension_tumor_type)

        if self.detection_method_other is not None and not isinstance(self.detection_method_other, str):
            self.detection_method_other = str(self.detection_method_other)

        if self.e_extension_site is not None and not isinstance(self.e_extension_site, EExtensionSiteEnum):
            self.e_extension_site = EExtensionSiteEnum(self.e_extension_site)

        if self.e_extension_site_other is not None and not isinstance(self.e_extension_site_other, str):
            self.e_extension_site_other = str(self.e_extension_site_other)

        if self.diam_type is not None and not isinstance(self.diam_type, DiamTypeEnum):
            self.diam_type = DiamTypeEnum(self.diam_type)

        if self.bulky_disease is not None and not isinstance(self.bulky_disease, NoNotreportedUnknownYesEnum):
            self.bulky_disease = NoNotreportedUnknownYesEnum(self.bulky_disease)

        if self.effusion is not None and not isinstance(self.effusion, NoNotreportedUnknownYesEnum):
            self.effusion = NoNotreportedUnknownYesEnum(self.effusion)

        if self.effusion_type is not None and not isinstance(self.effusion_type, EffusionTypeEnum):
            self.effusion_type = EffusionTypeEnum(self.effusion_type)

        if self.response is not None and not isinstance(self.response, ResponseEnum):
            self.response = ResponseEnum(self.response)

        if self.pct_change is not None and not isinstance(self.pct_change, Decimal):
            self.pct_change = Decimal(self.pct_change)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        if self.tumor_type is not None and not isinstance(self.tumor_type, TumorTypeEnum):
            self.tumor_type = TumorTypeEnum(self.tumor_type)

        if self.mibg_avidity is not None and not isinstance(self.mibg_avidity, NoNotreportedUnknownYesEnum):
            self.mibg_avidity = NoNotreportedUnknownYesEnum(self.mibg_avidity)

        if self.invasiveness_status is not None and not isinstance(self.invasiveness_status, NoNotreportedUnknownYesEnum):
            self.invasiveness_status = NoNotreportedUnknownYesEnum(self.invasiveness_status)

        if self.depth is not None and not isinstance(self.depth, DepthEnum):
            self.depth = DepthEnum(self.depth)

        if self.skip_met_involvement is not None and not isinstance(self.skip_met_involvement, SkipMetInvolvementEnum):
            self.skip_met_involvement = SkipMetInvolvementEnum(self.skip_met_involvement)

        if self.fracture_site is not None and not isinstance(self.fracture_site, NoNotreportedUnknownYesEnum):
            self.fracture_site = NoNotreportedUnknownYesEnum(self.fracture_site)

        if self.massive_choroidal_extension is not None and not isinstance(self.massive_choroidal_extension, MassiveChoroidalExtensionEnum):
            self.massive_choroidal_extension = MassiveChoroidalExtensionEnum(self.massive_choroidal_extension)

        if self.visual_discrete_tumors is not None and not isinstance(self.visual_discrete_tumors, NoNotreportedUnknownYesEnum):
            self.visual_discrete_tumors = NoNotreportedUnknownYesEnum(self.visual_discrete_tumors)

        if self.tumor_number is not None and not isinstance(self.tumor_number, Decimal):
            self.tumor_number = Decimal(self.tumor_number)

        if self.tumor_from_fovea is not None and not isinstance(self.tumor_from_fovea, TumorFromFoveaEnum):
            self.tumor_from_fovea = TumorFromFoveaEnum(self.tumor_from_fovea)

        if self.tumor_from_optic_nerve is not None and not isinstance(self.tumor_from_optic_nerve, TumorFromOpticNerveEnum):
            self.tumor_from_optic_nerve = TumorFromOpticNerveEnum(self.tumor_from_optic_nerve)

        if self.fluid_from_tumor is not None and not isinstance(self.fluid_from_tumor, FluidFromTumorEnum):
            self.fluid_from_tumor = FluidFromTumorEnum(self.fluid_from_tumor)

        if self.seeds_present is not None and not isinstance(self.seeds_present, NoNotreportedUnknownYesEnum):
            self.seeds_present = NoNotreportedUnknownYesEnum(self.seeds_present)

        if self.seeds_pattern is not None and not isinstance(self.seeds_pattern, SeedsPatternEnum):
            self.seeds_pattern = SeedsPatternEnum(self.seeds_pattern)

        if self.seeds_status is not None and not isinstance(self.seeds_status, SeedsStatusEnum):
            self.seeds_status = SeedsStatusEnum(self.seeds_status)

        if self.seeds_classification is not None and not isinstance(self.seeds_classification, SeedsClassificationEnum):
            self.seeds_classification = SeedsClassificationEnum(self.seeds_classification)

        if self.invasiveness is not None and not isinstance(self.invasiveness, InvasivenessEnum):
            self.invasiveness = InvasivenessEnum(self.invasiveness)

        if self.nodal_determination is not None and not isinstance(self.nodal_determination, NodalDeterminationEnum):
            self.nodal_determination = NodalDeterminationEnum(self.nodal_determination)

        if self.nodal_determination_source is not None and not isinstance(self.nodal_determination_source, NodalDeterminationSourceEnum):
            self.nodal_determination_source = NodalDeterminationSourceEnum(self.nodal_determination_source)

        if self.parameningeal_extension is not None and not isinstance(self.parameningeal_extension, NoNotreportedUnknownYesEnum):
            self.parameningeal_extension = NoNotreportedUnknownYesEnum(self.parameningeal_extension)

        if self.necrosis_status is not None and not isinstance(self.necrosis_status, AbsentNotreportedPresentUnknownEnum):
            self.necrosis_status = AbsentNotreportedPresentUnknownEnum(self.necrosis_status)

        if self.necrosis_pct_numeric is not None and not isinstance(self.necrosis_pct_numeric, Decimal):
            self.necrosis_pct_numeric = Decimal(self.necrosis_pct_numeric)

        if self.anaplasia_status is not None and not isinstance(self.anaplasia_status, AbsentNotreportedPresentUnknownEnum):
            self.anaplasia_status = AbsentNotreportedPresentUnknownEnum(self.anaplasia_status)

        if self.anaplasia_type is not None and not isinstance(self.anaplasia_type, AnaplasiaTypeEnum):
            self.anaplasia_type = AnaplasiaTypeEnum(self.anaplasia_type)

        if self.anaplasia_pct_numeric is not None and not isinstance(self.anaplasia_pct_numeric, Decimal):
            self.anaplasia_pct_numeric = Decimal(self.anaplasia_pct_numeric)

        super().__post_init__(**kwargs)


@dataclass
class Staging(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Staging"]
    class_class_curie: ClassVar[str] = "pcdc:/Staging"
    class_name: ClassVar[str] = "Staging"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Staging")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_staging: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    stage_system: Optional[Union[str, "StageSystemEnum"]] = None
    stage: Optional[Union[str, "StageEnum"]] = None
    stage_other: Optional[str] = None
    ann_arbor_mod_ab: Optional[Union[str, "AnnArborModAbEnum"]] = None
    ann_arbor_mod_e: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    ann_arbor_mod_s: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None
    site: Optional[Union[str, "SiteEnum"]] = None
    stage_system_category: Optional[Union[str, "StageSystemCategoryEnum"]] = None
    stage_type: Optional[Union[str, "StageTypeEnum"]] = None
    h_stage: Optional[Union[str, "HStageEnum"]] = None
    group_system: Optional[Union[str, "GroupSystemEnum"]] = None
    group: Optional[Union[str, "GroupEnum"]] = None
    tnm_finding: Optional[Union[str, "TnmFindingEnum"]] = None
    irs_group: Optional[Union[str, "IrsGroupEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_staging is not None and not isinstance(self.age_at_staging, int):
            self.age_at_staging = int(self.age_at_staging)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.stage_system is not None and not isinstance(self.stage_system, StageSystemEnum):
            self.stage_system = StageSystemEnum(self.stage_system)

        if self.stage is not None and not isinstance(self.stage, StageEnum):
            self.stage = StageEnum(self.stage)

        if self.stage_other is not None and not isinstance(self.stage_other, str):
            self.stage_other = str(self.stage_other)

        if self.ann_arbor_mod_ab is not None and not isinstance(self.ann_arbor_mod_ab, AnnArborModAbEnum):
            self.ann_arbor_mod_ab = AnnArborModAbEnum(self.ann_arbor_mod_ab)

        if self.ann_arbor_mod_e is not None and not isinstance(self.ann_arbor_mod_e, NoNotreportedUnknownYesEnum):
            self.ann_arbor_mod_e = NoNotreportedUnknownYesEnum(self.ann_arbor_mod_e)

        if self.ann_arbor_mod_s is not None and not isinstance(self.ann_arbor_mod_s, NoNotreportedUnknownYesEnum):
            self.ann_arbor_mod_s = NoNotreportedUnknownYesEnum(self.ann_arbor_mod_s)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        if self.site is not None and not isinstance(self.site, SiteEnum):
            self.site = SiteEnum(self.site)

        if self.stage_system_category is not None and not isinstance(self.stage_system_category, StageSystemCategoryEnum):
            self.stage_system_category = StageSystemCategoryEnum(self.stage_system_category)

        if self.stage_type is not None and not isinstance(self.stage_type, StageTypeEnum):
            self.stage_type = StageTypeEnum(self.stage_type)

        if self.h_stage is not None and not isinstance(self.h_stage, HStageEnum):
            self.h_stage = HStageEnum(self.h_stage)

        if self.group_system is not None and not isinstance(self.group_system, GroupSystemEnum):
            self.group_system = GroupSystemEnum(self.group_system)

        if self.group is not None and not isinstance(self.group, GroupEnum):
            self.group = GroupEnum(self.group)

        if self.tnm_finding is not None and not isinstance(self.tnm_finding, TnmFindingEnum):
            self.tnm_finding = TnmFindingEnum(self.tnm_finding)

        if self.irs_group is not None and not isinstance(self.irs_group, IrsGroupEnum):
            self.irs_group = IrsGroupEnum(self.irs_group)

        super().__post_init__(**kwargs)


@dataclass
class RadiationTherapy(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/RadiationTherapy"]
    class_class_curie: ClassVar[str] = "pcdc:/RadiationTherapy"
    class_name: ClassVar[str] = "Radiation Therapy"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/RadiationTherapy")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_rt_start: Optional[int] = None
    age_at_rt_end: Optional[int] = None
    protocol_radiation_therapy: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    non_protocol_timing: Optional[Union[str, "NonProtocolTimingEnum"]] = None
    site: Optional[Union[str, "SiteEnum"]] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    site_other: Optional[str] = None
    total_dose: Optional[Decimal] = None
    total_dose_unit: Optional[Union[str, "TotalDoseUnitEnum"]] = None
    technique: Optional[Union[str, "TechniqueEnum"]] = None
    energy_type: Optional[Union[str, "EnergyTypeEnum"]] = None
    margin: Optional[Union[str, "MarginEnum"]] = None
    rt_data_source: Optional[Union[str, "RtDataSourceEnum"]] = None
    fraction_dose: Optional[Decimal] = None
    fraction_dose_unit: Optional[Union[str, "CgeNotreportedUnknownCgyEnum"]] = None
    num_fraction: Optional[Decimal] = None
    target_volume: Optional[Union[str, "TargetVolumeEnum"]] = None
    boost: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    boost_dose: Optional[Decimal] = None
    boost_unit: Optional[Union[str, "CgeNotreportedUnknownCgyEnum"]] = None
    boost_target_volume: Optional[Union[str, "BoostTargetVolumeEnum"]] = None
    classification: Optional[Union[str, "ClassificationEnum"]] = None
    tissue_type: Optional[Union[str, "TissueTypeEnum"]] = None
    laterality: Optional[Union[str, "BilateralLeftMidlineNotreportedRightUnknownEnum"]] = None
    technique_other: Optional[str] = None
    transposition_organ: Optional[Union[str, "TranspositionOrganEnum"]] = None
    boost_dose_unit: Optional[Union[str, "BoostDoseUnitEnum"]] = None
    energy_type_other: Optional[str] = None
    indication: Optional[Union[str, "IndicationEnum"]] = None
    indication_other: Optional[str] = None
    proton_delivery_mode: Optional[Union[str, "ProtonDeliveryModeEnum"]] = None
    plaque_size: Optional[Union[str, "PlaqueSizeEnum"]] = None
    apex_dose: Optional[Decimal] = None
    rt_completed: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_rt_start is not None and not isinstance(self.age_at_rt_start, int):
            self.age_at_rt_start = int(self.age_at_rt_start)

        if self.age_at_rt_end is not None and not isinstance(self.age_at_rt_end, int):
            self.age_at_rt_end = int(self.age_at_rt_end)

        if self.protocol_radiation_therapy is not None and not isinstance(self.protocol_radiation_therapy, NoNotreportedUnknownYesEnum):
            self.protocol_radiation_therapy = NoNotreportedUnknownYesEnum(self.protocol_radiation_therapy)

        if self.non_protocol_timing is not None and not isinstance(self.non_protocol_timing, NonProtocolTimingEnum):
            self.non_protocol_timing = NonProtocolTimingEnum(self.non_protocol_timing)

        if self.site is not None and not isinstance(self.site, SiteEnum):
            self.site = SiteEnum(self.site)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.site_other is not None and not isinstance(self.site_other, str):
            self.site_other = str(self.site_other)

        if self.total_dose is not None and not isinstance(self.total_dose, Decimal):
            self.total_dose = Decimal(self.total_dose)

        if self.total_dose_unit is not None and not isinstance(self.total_dose_unit, TotalDoseUnitEnum):
            self.total_dose_unit = TotalDoseUnitEnum(self.total_dose_unit)

        if self.technique is not None and not isinstance(self.technique, TechniqueEnum):
            self.technique = TechniqueEnum(self.technique)

        if self.energy_type is not None and not isinstance(self.energy_type, EnergyTypeEnum):
            self.energy_type = EnergyTypeEnum(self.energy_type)

        if self.margin is not None and not isinstance(self.margin, MarginEnum):
            self.margin = MarginEnum(self.margin)

        if self.rt_data_source is not None and not isinstance(self.rt_data_source, RtDataSourceEnum):
            self.rt_data_source = RtDataSourceEnum(self.rt_data_source)

        if self.fraction_dose is not None and not isinstance(self.fraction_dose, Decimal):
            self.fraction_dose = Decimal(self.fraction_dose)

        if self.fraction_dose_unit is not None and not isinstance(self.fraction_dose_unit, CgeNotreportedUnknownCgyEnum):
            self.fraction_dose_unit = CgeNotreportedUnknownCgyEnum(self.fraction_dose_unit)

        if self.num_fraction is not None and not isinstance(self.num_fraction, Decimal):
            self.num_fraction = Decimal(self.num_fraction)

        if self.target_volume is not None and not isinstance(self.target_volume, TargetVolumeEnum):
            self.target_volume = TargetVolumeEnum(self.target_volume)

        if self.boost is not None and not isinstance(self.boost, NoNotreportedUnknownYesEnum):
            self.boost = NoNotreportedUnknownYesEnum(self.boost)

        if self.boost_dose is not None and not isinstance(self.boost_dose, Decimal):
            self.boost_dose = Decimal(self.boost_dose)

        if self.boost_unit is not None and not isinstance(self.boost_unit, CgeNotreportedUnknownCgyEnum):
            self.boost_unit = CgeNotreportedUnknownCgyEnum(self.boost_unit)

        if self.boost_target_volume is not None and not isinstance(self.boost_target_volume, BoostTargetVolumeEnum):
            self.boost_target_volume = BoostTargetVolumeEnum(self.boost_target_volume)

        if self.classification is not None and not isinstance(self.classification, ClassificationEnum):
            self.classification = ClassificationEnum(self.classification)

        if self.tissue_type is not None and not isinstance(self.tissue_type, TissueTypeEnum):
            self.tissue_type = TissueTypeEnum(self.tissue_type)

        if self.laterality is not None and not isinstance(self.laterality, BilateralLeftMidlineNotreportedRightUnknownEnum):
            self.laterality = BilateralLeftMidlineNotreportedRightUnknownEnum(self.laterality)

        if self.technique_other is not None and not isinstance(self.technique_other, str):
            self.technique_other = str(self.technique_other)

        if self.transposition_organ is not None and not isinstance(self.transposition_organ, TranspositionOrganEnum):
            self.transposition_organ = TranspositionOrganEnum(self.transposition_organ)

        if self.boost_dose_unit is not None and not isinstance(self.boost_dose_unit, BoostDoseUnitEnum):
            self.boost_dose_unit = BoostDoseUnitEnum(self.boost_dose_unit)

        if self.energy_type_other is not None and not isinstance(self.energy_type_other, str):
            self.energy_type_other = str(self.energy_type_other)

        if self.indication is not None and not isinstance(self.indication, IndicationEnum):
            self.indication = IndicationEnum(self.indication)

        if self.indication_other is not None and not isinstance(self.indication_other, str):
            self.indication_other = str(self.indication_other)

        if self.proton_delivery_mode is not None and not isinstance(self.proton_delivery_mode, ProtonDeliveryModeEnum):
            self.proton_delivery_mode = ProtonDeliveryModeEnum(self.proton_delivery_mode)

        if self.plaque_size is not None and not isinstance(self.plaque_size, PlaqueSizeEnum):
            self.plaque_size = PlaqueSizeEnum(self.plaque_size)

        if self.apex_dose is not None and not isinstance(self.apex_dose, Decimal):
            self.apex_dose = Decimal(self.apex_dose)

        if self.rt_completed is not None and not isinstance(self.rt_completed, NoNotreportedUnknownYesEnum):
            self.rt_completed = NoNotreportedUnknownYesEnum(self.rt_completed)

        super().__post_init__(**kwargs)


@dataclass
class StemCellTransplant(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/StemCellTransplant"]
    class_class_curie: ClassVar[str] = "pcdc:/StemCellTransplant"
    class_name: ClassVar[str] = "Stem Cell Transplant"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/StemCellTransplant")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_sct: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    protocol_sct: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    non_protocol_timing: Optional[Union[str, "NonProtocolTimingEnum"]] = None
    sct_type: Optional[Union[str, "SctTypeEnum"]] = None
    stem_cell_source: Optional[Union[str, "StemCellSourceEnum"]] = None
    donor_relationship: Optional[Union[str, "DonorRelationshipEnum"]] = None
    hla_match: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    number_hla: Optional[Decimal] = None
    number_matches: Optional[Decimal] = None
    conditioning_type: Optional[Union[str, "ConditioningTypeEnum"]] = None
    prior_tbi: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    hla_a_result: Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]] = None
    hla_b_result: Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]] = None
    hla_c_result: Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]] = None
    hla_drb1_result: Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]] = None
    hla_dq_result: Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]] = None
    age_at_sct_harvest: Optional[int] = None
    age_at_recovery: Optional[int] = None
    recovery_type: Optional[Union[str, "RecoveryTypeEnum"]] = None
    recovery_status: Optional[Union[str, "RecoveryStatusEnum"]] = None
    cd34_collected: Optional[Decimal] = None
    cd34_transplant: Optional[Decimal] = None
    sct_cycles: Optional[Decimal] = None
    stem_cell_source_other: Optional[str] = None
    sct_success: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_sct is not None and not isinstance(self.age_at_sct, int):
            self.age_at_sct = int(self.age_at_sct)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.protocol_sct is not None and not isinstance(self.protocol_sct, NoNotreportedUnknownYesEnum):
            self.protocol_sct = NoNotreportedUnknownYesEnum(self.protocol_sct)

        if self.non_protocol_timing is not None and not isinstance(self.non_protocol_timing, NonProtocolTimingEnum):
            self.non_protocol_timing = NonProtocolTimingEnum(self.non_protocol_timing)

        if self.sct_type is not None and not isinstance(self.sct_type, SctTypeEnum):
            self.sct_type = SctTypeEnum(self.sct_type)

        if self.stem_cell_source is not None and not isinstance(self.stem_cell_source, StemCellSourceEnum):
            self.stem_cell_source = StemCellSourceEnum(self.stem_cell_source)

        if self.donor_relationship is not None and not isinstance(self.donor_relationship, DonorRelationshipEnum):
            self.donor_relationship = DonorRelationshipEnum(self.donor_relationship)

        if self.hla_match is not None and not isinstance(self.hla_match, NoNotreportedUnknownYesEnum):
            self.hla_match = NoNotreportedUnknownYesEnum(self.hla_match)

        if self.number_hla is not None and not isinstance(self.number_hla, Decimal):
            self.number_hla = Decimal(self.number_hla)

        if self.number_matches is not None and not isinstance(self.number_matches, Decimal):
            self.number_matches = Decimal(self.number_matches)

        if self.conditioning_type is not None and not isinstance(self.conditioning_type, ConditioningTypeEnum):
            self.conditioning_type = ConditioningTypeEnum(self.conditioning_type)

        if self.prior_tbi is not None and not isinstance(self.prior_tbi, NoNotreportedUnknownYesEnum):
            self.prior_tbi = NoNotreportedUnknownYesEnum(self.prior_tbi)

        if self.hla_a_result is not None and not isinstance(self.hla_a_result, BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum):
            self.hla_a_result = BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum(self.hla_a_result)

        if self.hla_b_result is not None and not isinstance(self.hla_b_result, BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum):
            self.hla_b_result = BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum(self.hla_b_result)

        if self.hla_c_result is not None and not isinstance(self.hla_c_result, BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum):
            self.hla_c_result = BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum(self.hla_c_result)

        if self.hla_drb1_result is not None and not isinstance(self.hla_drb1_result, BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum):
            self.hla_drb1_result = BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum(self.hla_drb1_result)

        if self.hla_dq_result is not None and not isinstance(self.hla_dq_result, BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum):
            self.hla_dq_result = BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum(self.hla_dq_result)

        if self.age_at_sct_harvest is not None and not isinstance(self.age_at_sct_harvest, int):
            self.age_at_sct_harvest = int(self.age_at_sct_harvest)

        if self.age_at_recovery is not None and not isinstance(self.age_at_recovery, int):
            self.age_at_recovery = int(self.age_at_recovery)

        if self.recovery_type is not None and not isinstance(self.recovery_type, RecoveryTypeEnum):
            self.recovery_type = RecoveryTypeEnum(self.recovery_type)

        if self.recovery_status is not None and not isinstance(self.recovery_status, RecoveryStatusEnum):
            self.recovery_status = RecoveryStatusEnum(self.recovery_status)

        if self.cd34_collected is not None and not isinstance(self.cd34_collected, Decimal):
            self.cd34_collected = Decimal(self.cd34_collected)

        if self.cd34_transplant is not None and not isinstance(self.cd34_transplant, Decimal):
            self.cd34_transplant = Decimal(self.cd34_transplant)

        if self.sct_cycles is not None and not isinstance(self.sct_cycles, Decimal):
            self.sct_cycles = Decimal(self.sct_cycles)

        if self.stem_cell_source_other is not None and not isinstance(self.stem_cell_source_other, str):
            self.stem_cell_source_other = str(self.stem_cell_source_other)

        if self.sct_success is not None and not isinstance(self.sct_success, NoNotreportedUnknownYesEnum):
            self.sct_success = NoNotreportedUnknownYesEnum(self.sct_success)

        super().__post_init__(**kwargs)


@dataclass
class Medication(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/Medication"]
    class_class_curie: ClassVar[str] = "pcdc:/Medication"
    class_name: ClassVar[str] = "Medication"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/Medication")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_medication_start: Optional[int] = None
    age_at_medication_end: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    route: Optional[Union[str, "RouteEnum"]] = None
    medication: Optional[Union[str, "MedicationEnum"]] = None
    administration_status: Optional[Union[str, "AdministrationStatusEnum"]] = None
    number_doses: Optional[Decimal] = None
    total_dose_administered: Optional[Decimal] = None
    total_dose_intended: Optional[Decimal] = None
    total_dose_unit: Optional[Union[str, "TotalDoseUnitEnum"]] = None
    protocol_medication: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    non_protocol_timing: Optional[Union[str, "NonProtocolTimingEnum"]] = None
    non_protocol_reason: Optional[Union[str, "NonProtocolReasonEnum"]] = None
    medication_other: Optional[str] = None
    category: Optional[Union[str, "CategoryEnum"]] = None
    concomitant_reason: Optional[Union[str, "ConcomitantReasonEnum"]] = None
    concomitant_reason_other: Optional[str] = None
    route_detail: Optional[Union[str, "RouteDetailEnum"]] = None
    normalization_basis: Optional[Union[str, "NormalizationBasisEnum"]] = None
    cycle_number: Optional[int] = None
    cycles_planned: Optional[int] = None
    session_number: Optional[int] = None
    tumor_site: Optional[Union[str, "TumorSiteEnum"]] = None
    administration_site: Optional[Union[str, "AdministrationSiteEnum"]] = None
    total_dose_given: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    delivery_status: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_medication_start is not None and not isinstance(self.age_at_medication_start, int):
            self.age_at_medication_start = int(self.age_at_medication_start)

        if self.age_at_medication_end is not None and not isinstance(self.age_at_medication_end, int):
            self.age_at_medication_end = int(self.age_at_medication_end)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.route is not None and not isinstance(self.route, RouteEnum):
            self.route = RouteEnum(self.route)

        if self.medication is not None and not isinstance(self.medication, MedicationEnum):
            self.medication = MedicationEnum(self.medication)

        if self.administration_status is not None and not isinstance(self.administration_status, AdministrationStatusEnum):
            self.administration_status = AdministrationStatusEnum(self.administration_status)

        if self.number_doses is not None and not isinstance(self.number_doses, Decimal):
            self.number_doses = Decimal(self.number_doses)

        if self.total_dose_administered is not None and not isinstance(self.total_dose_administered, Decimal):
            self.total_dose_administered = Decimal(self.total_dose_administered)

        if self.total_dose_intended is not None and not isinstance(self.total_dose_intended, Decimal):
            self.total_dose_intended = Decimal(self.total_dose_intended)

        if self.total_dose_unit is not None and not isinstance(self.total_dose_unit, TotalDoseUnitEnum):
            self.total_dose_unit = TotalDoseUnitEnum(self.total_dose_unit)

        if self.protocol_medication is not None and not isinstance(self.protocol_medication, NoNotreportedUnknownYesEnum):
            self.protocol_medication = NoNotreportedUnknownYesEnum(self.protocol_medication)

        if self.non_protocol_timing is not None and not isinstance(self.non_protocol_timing, NonProtocolTimingEnum):
            self.non_protocol_timing = NonProtocolTimingEnum(self.non_protocol_timing)

        if self.non_protocol_reason is not None and not isinstance(self.non_protocol_reason, NonProtocolReasonEnum):
            self.non_protocol_reason = NonProtocolReasonEnum(self.non_protocol_reason)

        if self.medication_other is not None and not isinstance(self.medication_other, str):
            self.medication_other = str(self.medication_other)

        if self.category is not None and not isinstance(self.category, CategoryEnum):
            self.category = CategoryEnum(self.category)

        if self.concomitant_reason is not None and not isinstance(self.concomitant_reason, ConcomitantReasonEnum):
            self.concomitant_reason = ConcomitantReasonEnum(self.concomitant_reason)

        if self.concomitant_reason_other is not None and not isinstance(self.concomitant_reason_other, str):
            self.concomitant_reason_other = str(self.concomitant_reason_other)

        if self.route_detail is not None and not isinstance(self.route_detail, RouteDetailEnum):
            self.route_detail = RouteDetailEnum(self.route_detail)

        if self.normalization_basis is not None and not isinstance(self.normalization_basis, NormalizationBasisEnum):
            self.normalization_basis = NormalizationBasisEnum(self.normalization_basis)

        if self.cycle_number is not None and not isinstance(self.cycle_number, int):
            self.cycle_number = int(self.cycle_number)

        if self.cycles_planned is not None and not isinstance(self.cycles_planned, int):
            self.cycles_planned = int(self.cycles_planned)

        if self.session_number is not None and not isinstance(self.session_number, int):
            self.session_number = int(self.session_number)

        if self.tumor_site is not None and not isinstance(self.tumor_site, TumorSiteEnum):
            self.tumor_site = TumorSiteEnum(self.tumor_site)

        if self.administration_site is not None and not isinstance(self.administration_site, AdministrationSiteEnum):
            self.administration_site = AdministrationSiteEnum(self.administration_site)

        if self.total_dose_given is not None and not isinstance(self.total_dose_given, NoNotreportedUnknownYesEnum):
            self.total_dose_given = NoNotreportedUnknownYesEnum(self.total_dose_given)

        if self.delivery_status is not None and not isinstance(self.delivery_status, NoNotreportedUnknownYesEnum):
            self.delivery_status = NoNotreportedUnknownYesEnum(self.delivery_status)

        super().__post_init__(**kwargs)


@dataclass
class TransfusionMedicineProcedures(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/TransfusionMedicineProcedures"]
    class_class_curie: ClassVar[str] = "pcdc:/TransfusionMedicineProcedures"
    class_name: ClassVar[str] = "Transfusion Medicine Procedures"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/TransfusionMedicineProcedures")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_tmp_start: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    product: Optional[Union[str, "ProductEnum"]] = None
    age_at_tmp: Optional[int] = None
    product_processing: Optional[Union[str, "ProductProcessingEnum"]] = None
    product_processing_other: Optional[str] = None
    number_units: Optional[Decimal] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.type):
            self.MissingRequiredField("type")
        if not isinstance(self.type, str):
            self.type = str(self.type)

        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_tmp_start is not None and not isinstance(self.age_at_tmp_start, int):
            self.age_at_tmp_start = int(self.age_at_tmp_start)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.product is not None and not isinstance(self.product, ProductEnum):
            self.product = ProductEnum(self.product)

        if self.age_at_tmp is not None and not isinstance(self.age_at_tmp, int):
            self.age_at_tmp = int(self.age_at_tmp)

        if self.product_processing is not None and not isinstance(self.product_processing, ProductProcessingEnum):
            self.product_processing = ProductProcessingEnum(self.product_processing)

        if self.product_processing_other is not None and not isinstance(self.product_processing_other, str):
            self.product_processing_other = str(self.product_processing_other)

        if self.number_units is not None and not isinstance(self.number_units, Decimal):
            self.number_units = Decimal(self.number_units)

        super().__post_init__(**kwargs)


@dataclass
class CellularImmunotherapy(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/CellularImmunotherapy"]
    class_class_curie: ClassVar[str] = "pcdc:/CellularImmunotherapy"
    class_name: ClassVar[str] = "Cellular Immunotherapy"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/CellularImmunotherapy")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_cimt_start: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    type_other: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.type):
            self.MissingRequiredField("type")
        if not isinstance(self.type, str):
            self.type = str(self.type)

        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_cimt_start is not None and not isinstance(self.age_at_cimt_start, int):
            self.age_at_cimt_start = int(self.age_at_cimt_start)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.type_other is not None and not isinstance(self.type_other, str):
            self.type_other = str(self.type_other)

        super().__post_init__(**kwargs)


@dataclass
class BiopsyAndSurgicalProcedures(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/BiopsyAndSurgicalProcedures"]
    class_class_curie: ClassVar[str] = "pcdc:/BiopsyAndSurgicalProcedures"
    class_name: ClassVar[str] = "Biopsy And Surgical Procedures"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/BiopsyAndSurgicalProcedures")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_procedure: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    protocol_procedure: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    non_protocol_timing: Optional[Union[str, "NonProtocolTimingEnum"]] = None
    procedure: Optional[Union[str, "ProcedureEnum"]] = None
    site: Optional[Union[str, "SiteEnum"]] = None
    site_other: Optional[str] = None
    extent: Optional[Union[str, "ExtentEnum"]] = None
    outcome: Optional[Union[str, "OutcomeEnum"]] = None
    hydrocephalus: Optional[Union[str, "HydrocephalusEnum"]] = None
    posterior_fossa_syndrome: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    csf_diversion: Optional[Union[str, "CsfDiversionEnum"]] = None
    nephron_sparing_partial_nephrectomy: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    surgery_type_limb: Optional[Union[str, "SurgeryTypeLimbEnum"]] = None
    margins: Optional[Union[str, "MarginsEnum"]] = None
    tumor_rupture: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    surgical_complications: Optional[Union[str, "SurgicalComplicationsEnum"]] = None
    surgical_complications_other: Optional[str] = None
    classification: Optional[Union[str, "ClassificationEnum"]] = None
    tissue_type: Optional[Union[str, "TissueTypeEnum"]] = None
    laterality: Optional[Union[str, "BilateralLeftMidlineNotreportedRightUnknownEnum"]] = None
    biopsy_type: Optional[Union[str, "BiopsyTypeEnum"]] = None
    surgery_type_amputation: Optional[Union[str, "SurgeryTypeAmputationEnum"]] = None
    surgery_type_limb_salvage: Optional[Union[str, "SurgeryTypeLimbSalvageEnum"]] = None
    reconstruction_type: Optional[Union[str, "ReconstructionTypeEnum"]] = None
    procedure_extent: Optional[Union[str, "ProcedureExtentEnum"]] = None
    met_non_lung_mgmt: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    met_lung_mgmt: Optional[Union[str, "MetLungMgmtEnum"]] = None
    localization_technique: Optional[Union[str, "LocalizationTechniqueEnum"]] = None
    distance_margin_tumor: Optional[Decimal] = None
    procedure_other: Optional[str] = None
    biopsy_type_other: Optional[str] = None
    number_nodes: Optional[Union[str, "NumberNodesEnum"]] = None
    number_nodes_numeric: Optional[Decimal] = None
    procedure_purpose: Optional[Union[str, "ProcedurePurposeEnum"]] = None
    procedure_purpose_other: Optional[str] = None
    amputation_type: Optional[Union[str, "AmputationTypeEnum"]] = None
    resection_type: Optional[Union[str, "ResectionTypeEnum"]] = None
    distance_margin: Optional[Decimal] = None
    hemipelvectomy_type: Optional[Union[str, "HemipelvectomyTypeEnum"]] = None
    hemipelvectomy_site: Optional[Union[str, "HemipelvectomySiteEnum"]] = None
    intraop_adjuvant: Optional[Union[str, "IntraopAdjuvantEnum"]] = None
    intraop_adjuvant_other: Optional[str] = None
    laser_type: Optional[Union[str, "LaserTypeEnum"]] = None
    laser_type_other: Optional[str] = None
    laser_power: Optional[Union[str, "LaserPowerEnum"]] = None
    laser_duration: Optional[Union[str, "LaserDurationEnum"]] = None
    laser_duration_numeric: Optional[Decimal] = None
    cryotherapy_freezes: Optional[int] = None
    freeze_thaw_cycle_number: Optional[int] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_procedure is not None and not isinstance(self.age_at_procedure, int):
            self.age_at_procedure = int(self.age_at_procedure)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.protocol_procedure is not None and not isinstance(self.protocol_procedure, NoNotreportedUnknownYesEnum):
            self.protocol_procedure = NoNotreportedUnknownYesEnum(self.protocol_procedure)

        if self.non_protocol_timing is not None and not isinstance(self.non_protocol_timing, NonProtocolTimingEnum):
            self.non_protocol_timing = NonProtocolTimingEnum(self.non_protocol_timing)

        if self.procedure is not None and not isinstance(self.procedure, ProcedureEnum):
            self.procedure = ProcedureEnum(self.procedure)

        if self.site is not None and not isinstance(self.site, SiteEnum):
            self.site = SiteEnum(self.site)

        if self.site_other is not None and not isinstance(self.site_other, str):
            self.site_other = str(self.site_other)

        if self.extent is not None and not isinstance(self.extent, ExtentEnum):
            self.extent = ExtentEnum(self.extent)

        if self.outcome is not None and not isinstance(self.outcome, OutcomeEnum):
            self.outcome = OutcomeEnum(self.outcome)

        if self.hydrocephalus is not None and not isinstance(self.hydrocephalus, HydrocephalusEnum):
            self.hydrocephalus = HydrocephalusEnum(self.hydrocephalus)

        if self.posterior_fossa_syndrome is not None and not isinstance(self.posterior_fossa_syndrome, NoNotreportedUnknownYesEnum):
            self.posterior_fossa_syndrome = NoNotreportedUnknownYesEnum(self.posterior_fossa_syndrome)

        if self.csf_diversion is not None and not isinstance(self.csf_diversion, CsfDiversionEnum):
            self.csf_diversion = CsfDiversionEnum(self.csf_diversion)

        if self.nephron_sparing_partial_nephrectomy is not None and not isinstance(self.nephron_sparing_partial_nephrectomy, NoNotreportedUnknownYesEnum):
            self.nephron_sparing_partial_nephrectomy = NoNotreportedUnknownYesEnum(self.nephron_sparing_partial_nephrectomy)

        if self.surgery_type_limb is not None and not isinstance(self.surgery_type_limb, SurgeryTypeLimbEnum):
            self.surgery_type_limb = SurgeryTypeLimbEnum(self.surgery_type_limb)

        if self.margins is not None and not isinstance(self.margins, MarginsEnum):
            self.margins = MarginsEnum(self.margins)

        if self.tumor_rupture is not None and not isinstance(self.tumor_rupture, NoNotreportedUnknownYesEnum):
            self.tumor_rupture = NoNotreportedUnknownYesEnum(self.tumor_rupture)

        if self.surgical_complications is not None and not isinstance(self.surgical_complications, SurgicalComplicationsEnum):
            self.surgical_complications = SurgicalComplicationsEnum(self.surgical_complications)

        if self.surgical_complications_other is not None and not isinstance(self.surgical_complications_other, str):
            self.surgical_complications_other = str(self.surgical_complications_other)

        if self.classification is not None and not isinstance(self.classification, ClassificationEnum):
            self.classification = ClassificationEnum(self.classification)

        if self.tissue_type is not None and not isinstance(self.tissue_type, TissueTypeEnum):
            self.tissue_type = TissueTypeEnum(self.tissue_type)

        if self.laterality is not None and not isinstance(self.laterality, BilateralLeftMidlineNotreportedRightUnknownEnum):
            self.laterality = BilateralLeftMidlineNotreportedRightUnknownEnum(self.laterality)

        if self.biopsy_type is not None and not isinstance(self.biopsy_type, BiopsyTypeEnum):
            self.biopsy_type = BiopsyTypeEnum(self.biopsy_type)

        if self.surgery_type_amputation is not None and not isinstance(self.surgery_type_amputation, SurgeryTypeAmputationEnum):
            self.surgery_type_amputation = SurgeryTypeAmputationEnum(self.surgery_type_amputation)

        if self.surgery_type_limb_salvage is not None and not isinstance(self.surgery_type_limb_salvage, SurgeryTypeLimbSalvageEnum):
            self.surgery_type_limb_salvage = SurgeryTypeLimbSalvageEnum(self.surgery_type_limb_salvage)

        if self.reconstruction_type is not None and not isinstance(self.reconstruction_type, ReconstructionTypeEnum):
            self.reconstruction_type = ReconstructionTypeEnum(self.reconstruction_type)

        if self.procedure_extent is not None and not isinstance(self.procedure_extent, ProcedureExtentEnum):
            self.procedure_extent = ProcedureExtentEnum(self.procedure_extent)

        if self.met_non_lung_mgmt is not None and not isinstance(self.met_non_lung_mgmt, NoNotreportedUnknownYesEnum):
            self.met_non_lung_mgmt = NoNotreportedUnknownYesEnum(self.met_non_lung_mgmt)

        if self.met_lung_mgmt is not None and not isinstance(self.met_lung_mgmt, MetLungMgmtEnum):
            self.met_lung_mgmt = MetLungMgmtEnum(self.met_lung_mgmt)

        if self.localization_technique is not None and not isinstance(self.localization_technique, LocalizationTechniqueEnum):
            self.localization_technique = LocalizationTechniqueEnum(self.localization_technique)

        if self.distance_margin_tumor is not None and not isinstance(self.distance_margin_tumor, Decimal):
            self.distance_margin_tumor = Decimal(self.distance_margin_tumor)

        if self.procedure_other is not None and not isinstance(self.procedure_other, str):
            self.procedure_other = str(self.procedure_other)

        if self.biopsy_type_other is not None and not isinstance(self.biopsy_type_other, str):
            self.biopsy_type_other = str(self.biopsy_type_other)

        if self.number_nodes is not None and not isinstance(self.number_nodes, NumberNodesEnum):
            self.number_nodes = NumberNodesEnum(self.number_nodes)

        if self.number_nodes_numeric is not None and not isinstance(self.number_nodes_numeric, Decimal):
            self.number_nodes_numeric = Decimal(self.number_nodes_numeric)

        if self.procedure_purpose is not None and not isinstance(self.procedure_purpose, ProcedurePurposeEnum):
            self.procedure_purpose = ProcedurePurposeEnum(self.procedure_purpose)

        if self.procedure_purpose_other is not None and not isinstance(self.procedure_purpose_other, str):
            self.procedure_purpose_other = str(self.procedure_purpose_other)

        if self.amputation_type is not None and not isinstance(self.amputation_type, AmputationTypeEnum):
            self.amputation_type = AmputationTypeEnum(self.amputation_type)

        if self.resection_type is not None and not isinstance(self.resection_type, ResectionTypeEnum):
            self.resection_type = ResectionTypeEnum(self.resection_type)

        if self.distance_margin is not None and not isinstance(self.distance_margin, Decimal):
            self.distance_margin = Decimal(self.distance_margin)

        if self.hemipelvectomy_type is not None and not isinstance(self.hemipelvectomy_type, HemipelvectomyTypeEnum):
            self.hemipelvectomy_type = HemipelvectomyTypeEnum(self.hemipelvectomy_type)

        if self.hemipelvectomy_site is not None and not isinstance(self.hemipelvectomy_site, HemipelvectomySiteEnum):
            self.hemipelvectomy_site = HemipelvectomySiteEnum(self.hemipelvectomy_site)

        if self.intraop_adjuvant is not None and not isinstance(self.intraop_adjuvant, IntraopAdjuvantEnum):
            self.intraop_adjuvant = IntraopAdjuvantEnum(self.intraop_adjuvant)

        if self.intraop_adjuvant_other is not None and not isinstance(self.intraop_adjuvant_other, str):
            self.intraop_adjuvant_other = str(self.intraop_adjuvant_other)

        if self.laser_type is not None and not isinstance(self.laser_type, LaserTypeEnum):
            self.laser_type = LaserTypeEnum(self.laser_type)

        if self.laser_type_other is not None and not isinstance(self.laser_type_other, str):
            self.laser_type_other = str(self.laser_type_other)

        if self.laser_power is not None and not isinstance(self.laser_power, LaserPowerEnum):
            self.laser_power = LaserPowerEnum(self.laser_power)

        if self.laser_duration is not None and not isinstance(self.laser_duration, LaserDurationEnum):
            self.laser_duration = LaserDurationEnum(self.laser_duration)

        if self.laser_duration_numeric is not None and not isinstance(self.laser_duration_numeric, Decimal):
            self.laser_duration_numeric = Decimal(self.laser_duration_numeric)

        if self.cryotherapy_freezes is not None and not isinstance(self.cryotherapy_freezes, int):
            self.cryotherapy_freezes = int(self.cryotherapy_freezes)

        if self.freeze_thaw_cycle_number is not None and not isinstance(self.freeze_thaw_cycle_number, int):
            self.freeze_thaw_cycle_number = int(self.freeze_thaw_cycle_number)

        super().__post_init__(**kwargs)


@dataclass
class ProtocolTreatmentModifications(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/ProtocolTreatmentModifications"]
    class_class_curie: ClassVar[str] = "pcdc:/ProtocolTreatmentModifications"
    class_name: ClassVar[str] = "Protocol Treatment Modifications"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/ProtocolTreatmentModifications")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_modification: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    modification: Optional[Union[str, "ModificationEnum"]] = None
    modification_other: Optional[str] = None
    modification_basis: Optional[Union[str, "ModificationBasisEnum"]] = None
    reason: Optional[Union[str, "ReasonEnum"]] = None
    reason_other: Optional[str] = None
    toxicity_detail: Optional[Union[str, "ToxicityDetailEnum"]] = None
    toxicity_detail_other: Optional[str] = None
    toxicity_immune: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    toxicity_infusion: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    original_agent: Optional[Union[str, "BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum"]] = None
    original_agent_other: Optional[str] = None
    sub_agent: Optional[Union[str, "BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum"]] = None
    sub_agent_other: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_modification is not None and not isinstance(self.age_at_modification, int):
            self.age_at_modification = int(self.age_at_modification)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.modification is not None and not isinstance(self.modification, ModificationEnum):
            self.modification = ModificationEnum(self.modification)

        if self.modification_other is not None and not isinstance(self.modification_other, str):
            self.modification_other = str(self.modification_other)

        if self.modification_basis is not None and not isinstance(self.modification_basis, ModificationBasisEnum):
            self.modification_basis = ModificationBasisEnum(self.modification_basis)

        if self.reason is not None and not isinstance(self.reason, ReasonEnum):
            self.reason = ReasonEnum(self.reason)

        if self.reason_other is not None and not isinstance(self.reason_other, str):
            self.reason_other = str(self.reason_other)

        if self.toxicity_detail is not None and not isinstance(self.toxicity_detail, ToxicityDetailEnum):
            self.toxicity_detail = ToxicityDetailEnum(self.toxicity_detail)

        if self.toxicity_detail_other is not None and not isinstance(self.toxicity_detail_other, str):
            self.toxicity_detail_other = str(self.toxicity_detail_other)

        if self.toxicity_immune is not None and not isinstance(self.toxicity_immune, NoNotreportedUnknownYesEnum):
            self.toxicity_immune = NoNotreportedUnknownYesEnum(self.toxicity_immune)

        if self.toxicity_infusion is not None and not isinstance(self.toxicity_infusion, NoNotreportedUnknownYesEnum):
            self.toxicity_infusion = NoNotreportedUnknownYesEnum(self.toxicity_infusion)

        if self.original_agent is not None and not isinstance(self.original_agent, BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum):
            self.original_agent = BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum(self.original_agent)

        if self.original_agent_other is not None and not isinstance(self.original_agent_other, str):
            self.original_agent_other = str(self.original_agent_other)

        if self.sub_agent is not None and not isinstance(self.sub_agent, BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum):
            self.sub_agent = BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum(self.sub_agent)

        if self.sub_agent_other is not None and not isinstance(self.sub_agent_other, str):
            self.sub_agent_other = str(self.sub_agent_other)

        super().__post_init__(**kwargs)


@dataclass
class MinimalResidualDisease(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/MinimalResidualDisease"]
    class_class_curie: ClassVar[str] = "pcdc:/MinimalResidualDisease"
    class_name: ClassVar[str] = "Minimal Residual Disease"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/MinimalResidualDisease")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_mrd_assessment: Optional[int] = None
    method: Optional[Union[str, "MethodEnum"]] = None
    result_text: Optional[str] = None
    result_numeric: Optional[Decimal] = None
    result_unit: Optional[Union[str, "ResultUnitEnum"]] = None
    sensitivity: Optional[Decimal] = None
    sample_source: Optional[Union[str, "SampleSourceEnum"]] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    method_other: Optional[str] = None
    molecular_markers: Optional[Union[str, "MolecularMarkersEnum"]] = None
    molecular_markers_other: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_mrd_assessment is not None and not isinstance(self.age_at_mrd_assessment, int):
            self.age_at_mrd_assessment = int(self.age_at_mrd_assessment)

        if self.method is not None and not isinstance(self.method, MethodEnum):
            self.method = MethodEnum(self.method)

        if self.result_text is not None and not isinstance(self.result_text, str):
            self.result_text = str(self.result_text)

        if self.result_numeric is not None and not isinstance(self.result_numeric, Decimal):
            self.result_numeric = Decimal(self.result_numeric)

        if self.result_unit is not None and not isinstance(self.result_unit, ResultUnitEnum):
            self.result_unit = ResultUnitEnum(self.result_unit)

        if self.sensitivity is not None and not isinstance(self.sensitivity, Decimal):
            self.sensitivity = Decimal(self.sensitivity)

        if self.sample_source is not None and not isinstance(self.sample_source, SampleSourceEnum):
            self.sample_source = SampleSourceEnum(self.sample_source)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.method_other is not None and not isinstance(self.method_other, str):
            self.method_other = str(self.method_other)

        if self.molecular_markers is not None and not isinstance(self.molecular_markers, MolecularMarkersEnum):
            self.molecular_markers = MolecularMarkersEnum(self.molecular_markers)

        if self.molecular_markers_other is not None and not isinstance(self.molecular_markers_other, str):
            self.molecular_markers_other = str(self.molecular_markers_other)

        super().__post_init__(**kwargs)


@dataclass
class SubjectResponse(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/SubjectResponse"]
    class_class_curie: ClassVar[str] = "pcdc:/SubjectResponse"
    class_name: ClassVar[str] = "Subject Response"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/SubjectResponse")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_response: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    response_category: Optional[Union[str, "ResponseCategoryEnum"]] = None
    response: Optional[Union[str, "ResponseEnum"]] = None
    bm_pct_blasts_at_response: Optional[Decimal] = None
    bm_analysis_method_at_response: Optional[Union[str, "BmAnalysisMethodAtResponseEnum"]] = None
    anc_at_response: Optional[Decimal] = None
    anc_threshold_at_response: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    platelet_count_at_response: Optional[Decimal] = None
    platelet_threshold_at_response: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    response_method: Optional[Union[str, "ResponseMethodEnum"]] = None
    response_system: Optional[Union[str, "ResponseSystemEnum"]] = None
    mri_sequence: Optional[Union[str, "MriSequenceEnum"]] = None
    neurological_status: Optional[Union[str, "NeurologicalStatusEnum"]] = None
    response_system_version: Optional[str] = None
    necrosis: Optional[Union[str, "NecrosisEnum"]] = None
    necrosis_pct: Optional[Decimal] = None
    interim_response: Optional[Union[str, "InterimResponseEnum"]] = None
    response_method_other: Optional[str] = None
    symptoms: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    palpable_nodes: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    nodular_splenic: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    course_timepoint: Optional[Union[str, "CourseTimepointEnum"]] = None
    measurement_type: Optional[Union[str, "MeasurementTypeEnum"]] = None
    measurement_numeric: Optional[Decimal] = None
    tx_prior_response: Optional[Union[str, "TxPriorResponseEnum"]] = None
    tumor_site: Optional[Union[str, "TumorSiteEnum"]] = None
    microscopic_change_type: Optional[Union[str, "MicroscopicChangeTypeEnum"]] = None
    microscopic_change_status: Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]] = None
    microscopic_change_pct: Optional[Union[str, "MicroscopicChangePctEnum"]] = None
    microscopic_change_pct_numeric: Optional[Decimal] = None
    macroscopic_change_type: Optional[Union[str, "MacroscopicChangeTypeEnum"]] = None
    macroscopic_change_status: Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]] = None
    macroscopic_change_pct_numeric: Optional[Decimal] = None
    anaplasia_status: Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]] = None
    anaplasia_type: Optional[Union[str, "AnaplasiaTypeEnum"]] = None
    anaplasia_pct_numeric: Optional[Decimal] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_response is not None and not isinstance(self.age_at_response, int):
            self.age_at_response = int(self.age_at_response)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.response_category is not None and not isinstance(self.response_category, ResponseCategoryEnum):
            self.response_category = ResponseCategoryEnum(self.response_category)

        if self.response is not None and not isinstance(self.response, ResponseEnum):
            self.response = ResponseEnum(self.response)

        if self.bm_pct_blasts_at_response is not None and not isinstance(self.bm_pct_blasts_at_response, Decimal):
            self.bm_pct_blasts_at_response = Decimal(self.bm_pct_blasts_at_response)

        if self.bm_analysis_method_at_response is not None and not isinstance(self.bm_analysis_method_at_response, BmAnalysisMethodAtResponseEnum):
            self.bm_analysis_method_at_response = BmAnalysisMethodAtResponseEnum(self.bm_analysis_method_at_response)

        if self.anc_at_response is not None and not isinstance(self.anc_at_response, Decimal):
            self.anc_at_response = Decimal(self.anc_at_response)

        if self.anc_threshold_at_response is not None and not isinstance(self.anc_threshold_at_response, NoNotreportedUnknownYesEnum):
            self.anc_threshold_at_response = NoNotreportedUnknownYesEnum(self.anc_threshold_at_response)

        if self.platelet_count_at_response is not None and not isinstance(self.platelet_count_at_response, Decimal):
            self.platelet_count_at_response = Decimal(self.platelet_count_at_response)

        if self.platelet_threshold_at_response is not None and not isinstance(self.platelet_threshold_at_response, NoNotreportedUnknownYesEnum):
            self.platelet_threshold_at_response = NoNotreportedUnknownYesEnum(self.platelet_threshold_at_response)

        if self.response_method is not None and not isinstance(self.response_method, ResponseMethodEnum):
            self.response_method = ResponseMethodEnum(self.response_method)

        if self.response_system is not None and not isinstance(self.response_system, ResponseSystemEnum):
            self.response_system = ResponseSystemEnum(self.response_system)

        if self.mri_sequence is not None and not isinstance(self.mri_sequence, MriSequenceEnum):
            self.mri_sequence = MriSequenceEnum(self.mri_sequence)

        if self.neurological_status is not None and not isinstance(self.neurological_status, NeurologicalStatusEnum):
            self.neurological_status = NeurologicalStatusEnum(self.neurological_status)

        if self.response_system_version is not None and not isinstance(self.response_system_version, str):
            self.response_system_version = str(self.response_system_version)

        if self.necrosis is not None and not isinstance(self.necrosis, NecrosisEnum):
            self.necrosis = NecrosisEnum(self.necrosis)

        if self.necrosis_pct is not None and not isinstance(self.necrosis_pct, Decimal):
            self.necrosis_pct = Decimal(self.necrosis_pct)

        if self.interim_response is not None and not isinstance(self.interim_response, InterimResponseEnum):
            self.interim_response = InterimResponseEnum(self.interim_response)

        if self.response_method_other is not None and not isinstance(self.response_method_other, str):
            self.response_method_other = str(self.response_method_other)

        if self.symptoms is not None and not isinstance(self.symptoms, NoNotreportedUnknownYesEnum):
            self.symptoms = NoNotreportedUnknownYesEnum(self.symptoms)

        if self.palpable_nodes is not None and not isinstance(self.palpable_nodes, NoNotreportedUnknownYesEnum):
            self.palpable_nodes = NoNotreportedUnknownYesEnum(self.palpable_nodes)

        if self.nodular_splenic is not None and not isinstance(self.nodular_splenic, NoNotreportedUnknownYesEnum):
            self.nodular_splenic = NoNotreportedUnknownYesEnum(self.nodular_splenic)

        if self.course_timepoint is not None and not isinstance(self.course_timepoint, CourseTimepointEnum):
            self.course_timepoint = CourseTimepointEnum(self.course_timepoint)

        if self.measurement_type is not None and not isinstance(self.measurement_type, MeasurementTypeEnum):
            self.measurement_type = MeasurementTypeEnum(self.measurement_type)

        if self.measurement_numeric is not None and not isinstance(self.measurement_numeric, Decimal):
            self.measurement_numeric = Decimal(self.measurement_numeric)

        if self.tx_prior_response is not None and not isinstance(self.tx_prior_response, TxPriorResponseEnum):
            self.tx_prior_response = TxPriorResponseEnum(self.tx_prior_response)

        if self.tumor_site is not None and not isinstance(self.tumor_site, TumorSiteEnum):
            self.tumor_site = TumorSiteEnum(self.tumor_site)

        if self.microscopic_change_type is not None and not isinstance(self.microscopic_change_type, MicroscopicChangeTypeEnum):
            self.microscopic_change_type = MicroscopicChangeTypeEnum(self.microscopic_change_type)

        if self.microscopic_change_status is not None and not isinstance(self.microscopic_change_status, AbsentNotreportedPresentUnknownEnum):
            self.microscopic_change_status = AbsentNotreportedPresentUnknownEnum(self.microscopic_change_status)

        if self.microscopic_change_pct is not None and not isinstance(self.microscopic_change_pct, MicroscopicChangePctEnum):
            self.microscopic_change_pct = MicroscopicChangePctEnum(self.microscopic_change_pct)

        if self.microscopic_change_pct_numeric is not None and not isinstance(self.microscopic_change_pct_numeric, Decimal):
            self.microscopic_change_pct_numeric = Decimal(self.microscopic_change_pct_numeric)

        if self.macroscopic_change_type is not None and not isinstance(self.macroscopic_change_type, MacroscopicChangeTypeEnum):
            self.macroscopic_change_type = MacroscopicChangeTypeEnum(self.macroscopic_change_type)

        if self.macroscopic_change_status is not None and not isinstance(self.macroscopic_change_status, AbsentNotreportedPresentUnknownEnum):
            self.macroscopic_change_status = AbsentNotreportedPresentUnknownEnum(self.macroscopic_change_status)

        if self.macroscopic_change_pct_numeric is not None and not isinstance(self.macroscopic_change_pct_numeric, Decimal):
            self.macroscopic_change_pct_numeric = Decimal(self.macroscopic_change_pct_numeric)

        if self.anaplasia_status is not None and not isinstance(self.anaplasia_status, AbsentNotreportedPresentUnknownEnum):
            self.anaplasia_status = AbsentNotreportedPresentUnknownEnum(self.anaplasia_status)

        if self.anaplasia_type is not None and not isinstance(self.anaplasia_type, AnaplasiaTypeEnum):
            self.anaplasia_type = AnaplasiaTypeEnum(self.anaplasia_type)

        if self.anaplasia_pct_numeric is not None and not isinstance(self.anaplasia_pct_numeric, Decimal):
            self.anaplasia_pct_numeric = Decimal(self.anaplasia_pct_numeric)

        super().__post_init__(**kwargs)


@dataclass
class AdverseEvents(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/AdverseEvents"]
    class_class_curie: ClassVar[str] = "pcdc:/AdverseEvents"
    class_name: ClassVar[str] = "Adverse Events"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/AdverseEvents")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_ae: Optional[int] = None
    ae_code: Optional[str] = None
    ae_code_system: Optional[Union[str, "AeCodeSystemEnum"]] = None
    ae_code_system_version: Optional[str] = None
    grade: Optional[Union[str, "GradeEnum"]] = None
    grade_system: Optional[Union[str, "GradeSystemEnum"]] = None
    grade_system_version: Optional[str] = None
    attribution: Optional[Union[str, "AttributionEnum"]] = None
    avn_joint: Optional[Union[str, "AvnJointEnum"]] = None
    avn_joint_other: Optional[str] = None
    avn_joint_laterality: Optional[Union[str, "BilateralLeftMidlineNotreportedRightUnknownEnum"]] = None
    avn_method: Optional[Union[str, "AvnMethodEnum"]] = None
    orthopedic_procedure: Optional[Union[str, "OrthopedicProcedureEnum"]] = None
    orthopedic_procedure_other: Optional[str] = None
    ae_pathogen: Optional[Union[str, "AePathogenEnum"]] = None
    ae_pathogen_other: Optional[str] = None
    infection_classification: Optional[Union[str, "InfectionClassificationEnum"]] = None
    age_at_ae_resolved: Optional[int] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    adverse_event: Optional[Union[str, "AdverseEventEnum"]] = None
    adverse_event_other: Optional[str] = None
    icu: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    supportive_medication: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    intervention_status: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    intervention: Optional[Union[str, "InterventionEnum"]] = None
    intervention_other: Optional[str] = None
    ae_pathogen_confirmation: Optional[Union[str, "ConfirmedNotreportedSuspectedUnknownEnum"]] = None
    gvhd_acuity: Optional[Union[str, "GvhdAcuityEnum"]] = None
    gvhd_organ: Optional[Union[str, "GvhdOrganEnum"]] = None
    gvhd_organ_other: Optional[str] = None
    ae_outcome: Optional[Union[str, "AeOutcomeEnum"]] = None
    modification_required: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    tox_delay: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    tox_high_grade_events: Optional[int] = None
    tox_dose_reductions: Optional[int] = None
    ae_immune: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    ae_infusion: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    reported: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    as_expected: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    hospitalization: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    ae_pathogen_status: Optional[Union[str, "ConfirmedNotreportedSuspectedUnknownEnum"]] = None
    tumor_site: Optional[Union[str, "TumorSiteEnum"]] = None
    ae_hospitalization_reason_other: Optional[str] = None
    ae_hospitalization: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_ae is not None and not isinstance(self.age_at_ae, int):
            self.age_at_ae = int(self.age_at_ae)

        if self.ae_code is not None and not isinstance(self.ae_code, str):
            self.ae_code = str(self.ae_code)

        if self.ae_code_system is not None and not isinstance(self.ae_code_system, AeCodeSystemEnum):
            self.ae_code_system = AeCodeSystemEnum(self.ae_code_system)

        if self.ae_code_system_version is not None and not isinstance(self.ae_code_system_version, str):
            self.ae_code_system_version = str(self.ae_code_system_version)

        if self.grade is not None and not isinstance(self.grade, GradeEnum):
            self.grade = GradeEnum(self.grade)

        if self.grade_system is not None and not isinstance(self.grade_system, GradeSystemEnum):
            self.grade_system = GradeSystemEnum(self.grade_system)

        if self.grade_system_version is not None and not isinstance(self.grade_system_version, str):
            self.grade_system_version = str(self.grade_system_version)

        if self.attribution is not None and not isinstance(self.attribution, AttributionEnum):
            self.attribution = AttributionEnum(self.attribution)

        if self.avn_joint is not None and not isinstance(self.avn_joint, AvnJointEnum):
            self.avn_joint = AvnJointEnum(self.avn_joint)

        if self.avn_joint_other is not None and not isinstance(self.avn_joint_other, str):
            self.avn_joint_other = str(self.avn_joint_other)

        if self.avn_joint_laterality is not None and not isinstance(self.avn_joint_laterality, BilateralLeftMidlineNotreportedRightUnknownEnum):
            self.avn_joint_laterality = BilateralLeftMidlineNotreportedRightUnknownEnum(self.avn_joint_laterality)

        if self.avn_method is not None and not isinstance(self.avn_method, AvnMethodEnum):
            self.avn_method = AvnMethodEnum(self.avn_method)

        if self.orthopedic_procedure is not None and not isinstance(self.orthopedic_procedure, OrthopedicProcedureEnum):
            self.orthopedic_procedure = OrthopedicProcedureEnum(self.orthopedic_procedure)

        if self.orthopedic_procedure_other is not None and not isinstance(self.orthopedic_procedure_other, str):
            self.orthopedic_procedure_other = str(self.orthopedic_procedure_other)

        if self.ae_pathogen is not None and not isinstance(self.ae_pathogen, AePathogenEnum):
            self.ae_pathogen = AePathogenEnum(self.ae_pathogen)

        if self.ae_pathogen_other is not None and not isinstance(self.ae_pathogen_other, str):
            self.ae_pathogen_other = str(self.ae_pathogen_other)

        if self.infection_classification is not None and not isinstance(self.infection_classification, InfectionClassificationEnum):
            self.infection_classification = InfectionClassificationEnum(self.infection_classification)

        if self.age_at_ae_resolved is not None and not isinstance(self.age_at_ae_resolved, int):
            self.age_at_ae_resolved = int(self.age_at_ae_resolved)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.adverse_event is not None and not isinstance(self.adverse_event, AdverseEventEnum):
            self.adverse_event = AdverseEventEnum(self.adverse_event)

        if self.adverse_event_other is not None and not isinstance(self.adverse_event_other, str):
            self.adverse_event_other = str(self.adverse_event_other)

        if self.icu is not None and not isinstance(self.icu, NoNotreportedUnknownYesEnum):
            self.icu = NoNotreportedUnknownYesEnum(self.icu)

        if self.supportive_medication is not None and not isinstance(self.supportive_medication, NoNotreportedUnknownYesEnum):
            self.supportive_medication = NoNotreportedUnknownYesEnum(self.supportive_medication)

        if self.intervention_status is not None and not isinstance(self.intervention_status, NoNotreportedUnknownYesEnum):
            self.intervention_status = NoNotreportedUnknownYesEnum(self.intervention_status)

        if self.intervention is not None and not isinstance(self.intervention, InterventionEnum):
            self.intervention = InterventionEnum(self.intervention)

        if self.intervention_other is not None and not isinstance(self.intervention_other, str):
            self.intervention_other = str(self.intervention_other)

        if self.ae_pathogen_confirmation is not None and not isinstance(self.ae_pathogen_confirmation, ConfirmedNotreportedSuspectedUnknownEnum):
            self.ae_pathogen_confirmation = ConfirmedNotreportedSuspectedUnknownEnum(self.ae_pathogen_confirmation)

        if self.gvhd_acuity is not None and not isinstance(self.gvhd_acuity, GvhdAcuityEnum):
            self.gvhd_acuity = GvhdAcuityEnum(self.gvhd_acuity)

        if self.gvhd_organ is not None and not isinstance(self.gvhd_organ, GvhdOrganEnum):
            self.gvhd_organ = GvhdOrganEnum(self.gvhd_organ)

        if self.gvhd_organ_other is not None and not isinstance(self.gvhd_organ_other, str):
            self.gvhd_organ_other = str(self.gvhd_organ_other)

        if self.ae_outcome is not None and not isinstance(self.ae_outcome, AeOutcomeEnum):
            self.ae_outcome = AeOutcomeEnum(self.ae_outcome)

        if self.modification_required is not None and not isinstance(self.modification_required, NoNotreportedUnknownYesEnum):
            self.modification_required = NoNotreportedUnknownYesEnum(self.modification_required)

        if self.tox_delay is not None and not isinstance(self.tox_delay, NoNotreportedUnknownYesEnum):
            self.tox_delay = NoNotreportedUnknownYesEnum(self.tox_delay)

        if self.tox_high_grade_events is not None and not isinstance(self.tox_high_grade_events, int):
            self.tox_high_grade_events = int(self.tox_high_grade_events)

        if self.tox_dose_reductions is not None and not isinstance(self.tox_dose_reductions, int):
            self.tox_dose_reductions = int(self.tox_dose_reductions)

        if self.ae_immune is not None and not isinstance(self.ae_immune, NoNotreportedUnknownYesEnum):
            self.ae_immune = NoNotreportedUnknownYesEnum(self.ae_immune)

        if self.ae_infusion is not None and not isinstance(self.ae_infusion, NoNotreportedUnknownYesEnum):
            self.ae_infusion = NoNotreportedUnknownYesEnum(self.ae_infusion)

        if self.reported is not None and not isinstance(self.reported, NoNotreportedUnknownYesEnum):
            self.reported = NoNotreportedUnknownYesEnum(self.reported)

        if self.as_expected is not None and not isinstance(self.as_expected, NoNotreportedUnknownYesEnum):
            self.as_expected = NoNotreportedUnknownYesEnum(self.as_expected)

        if self.hospitalization is not None and not isinstance(self.hospitalization, NoNotreportedUnknownYesEnum):
            self.hospitalization = NoNotreportedUnknownYesEnum(self.hospitalization)

        if self.ae_pathogen_status is not None and not isinstance(self.ae_pathogen_status, ConfirmedNotreportedSuspectedUnknownEnum):
            self.ae_pathogen_status = ConfirmedNotreportedSuspectedUnknownEnum(self.ae_pathogen_status)

        if self.tumor_site is not None and not isinstance(self.tumor_site, TumorSiteEnum):
            self.tumor_site = TumorSiteEnum(self.tumor_site)

        if self.ae_hospitalization_reason_other is not None and not isinstance(self.ae_hospitalization_reason_other, str):
            self.ae_hospitalization_reason_other = str(self.ae_hospitalization_reason_other)

        if self.ae_hospitalization is not None and not isinstance(self.ae_hospitalization, NoNotreportedUnknownYesEnum):
            self.ae_hospitalization = NoNotreportedUnknownYesEnum(self.ae_hospitalization)

        super().__post_init__(**kwargs)


@dataclass
class SubsequentMalignantNeoplasm(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/SubsequentMalignantNeoplasm"]
    class_class_curie: ClassVar[str] = "pcdc:/SubsequentMalignantNeoplasm"
    class_name: ClassVar[str] = "Subsequent Malignant Neoplasm"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/SubsequentMalignantNeoplasm")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_smn: Optional[int] = None
    treatment_related: Optional[Union[str, "NoNotreportedUnknownYesEnum"]] = None
    morph_code: Optional[str] = None
    morph_code_system: Optional[Union[str, "MorphCodeSystemEnum"]] = None
    morph_code_system_version: Optional[str] = None
    top_code: Optional[str] = None
    top_code_system: Optional[Union[str, "TopCodeSystemEnum"]] = None
    top_code_system_version: Optional[str] = None
    time_periods: Optional[Union[dict, TimePeriod]] = None
    smn_status: Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]] = None
    morph_code_txt: Optional[str] = None
    top_code_txt: Optional[str] = None
    smn_field: Optional[Union[str, "SmnFieldEnum"]] = None
    site: Optional[Union[str, "SiteEnum"]] = None
    site_other: Optional[str] = None
    smn: Optional[Union[str, "SmnEnum"]] = None
    smn_other: Optional[str] = None
    smn_type_other: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_smn is not None and not isinstance(self.age_at_smn, int):
            self.age_at_smn = int(self.age_at_smn)

        if self.treatment_related is not None and not isinstance(self.treatment_related, NoNotreportedUnknownYesEnum):
            self.treatment_related = NoNotreportedUnknownYesEnum(self.treatment_related)

        if self.morph_code is not None and not isinstance(self.morph_code, str):
            self.morph_code = str(self.morph_code)

        if self.morph_code_system is not None and not isinstance(self.morph_code_system, MorphCodeSystemEnum):
            self.morph_code_system = MorphCodeSystemEnum(self.morph_code_system)

        if self.morph_code_system_version is not None and not isinstance(self.morph_code_system_version, str):
            self.morph_code_system_version = str(self.morph_code_system_version)

        if self.top_code is not None and not isinstance(self.top_code, str):
            self.top_code = str(self.top_code)

        if self.top_code_system is not None and not isinstance(self.top_code_system, TopCodeSystemEnum):
            self.top_code_system = TopCodeSystemEnum(self.top_code_system)

        if self.top_code_system_version is not None and not isinstance(self.top_code_system_version, str):
            self.top_code_system_version = str(self.top_code_system_version)

        if self.time_periods is not None and not isinstance(self.time_periods, TimePeriod):
            self.time_periods = TimePeriod(**as_dict(self.time_periods))

        if self.smn_status is not None and not isinstance(self.smn_status, AbsentNotreportedPresentUnknownEnum):
            self.smn_status = AbsentNotreportedPresentUnknownEnum(self.smn_status)

        if self.morph_code_txt is not None and not isinstance(self.morph_code_txt, str):
            self.morph_code_txt = str(self.morph_code_txt)

        if self.top_code_txt is not None and not isinstance(self.top_code_txt, str):
            self.top_code_txt = str(self.top_code_txt)

        if self.smn_field is not None and not isinstance(self.smn_field, SmnFieldEnum):
            self.smn_field = SmnFieldEnum(self.smn_field)

        if self.site is not None and not isinstance(self.site, SiteEnum):
            self.site = SiteEnum(self.site)

        if self.site_other is not None and not isinstance(self.site_other, str):
            self.site_other = str(self.site_other)

        if self.smn is not None and not isinstance(self.smn, SmnEnum):
            self.smn = SmnEnum(self.smn)

        if self.smn_other is not None and not isinstance(self.smn_other, str):
            self.smn_other = str(self.smn_other)

        if self.smn_type_other is not None and not isinstance(self.smn_type_other, str):
            self.smn_type_other = str(self.smn_type_other)

        super().__post_init__(**kwargs)


@dataclass
class PatientReportedOutcomesMetadata(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/PatientReportedOutcomesMetadata"]
    class_class_curie: ClassVar[str] = "pcdc:/PatientReportedOutcomesMetadata"
    class_name: ClassVar[str] = "Patient Reported Outcomes Metadata"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/PatientReportedOutcomesMetadata")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    study_id: Optional[Union[str, "StudyIdEnum"]] = None
    pro_measures: Optional[Union[str, "ProMeasuresEnum"]] = None
    pro_measures_other: Optional[str] = None
    pro_measurement_type: Optional[Union[str, "ProMeasurementTypeEnum"]] = None
    pro_measurement_type_other: Optional[str] = None
    raters: Optional[Union[str, "RatersEnum"]] = None
    raters_other: Optional[str] = None
    eligible_age_lower: Optional[int] = None
    eligible_age_upper: Optional[int] = None
    time_point: Optional[Union[str, "TimePointEnum"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.study_id is not None and not isinstance(self.study_id, StudyIdEnum):
            self.study_id = StudyIdEnum(self.study_id)

        if self.pro_measures is not None and not isinstance(self.pro_measures, ProMeasuresEnum):
            self.pro_measures = ProMeasuresEnum(self.pro_measures)

        if self.pro_measures_other is not None and not isinstance(self.pro_measures_other, str):
            self.pro_measures_other = str(self.pro_measures_other)

        if self.pro_measurement_type is not None and not isinstance(self.pro_measurement_type, ProMeasurementTypeEnum):
            self.pro_measurement_type = ProMeasurementTypeEnum(self.pro_measurement_type)

        if self.pro_measurement_type_other is not None and not isinstance(self.pro_measurement_type_other, str):
            self.pro_measurement_type_other = str(self.pro_measurement_type_other)

        if self.raters is not None and not isinstance(self.raters, RatersEnum):
            self.raters = RatersEnum(self.raters)

        if self.raters_other is not None and not isinstance(self.raters_other, str):
            self.raters_other = str(self.raters_other)

        if self.eligible_age_lower is not None and not isinstance(self.eligible_age_lower, int):
            self.eligible_age_lower = int(self.eligible_age_lower)

        if self.eligible_age_upper is not None and not isinstance(self.eligible_age_upper, int):
            self.eligible_age_upper = int(self.eligible_age_upper)

        if self.time_point is not None and not isinstance(self.time_point, TimePointEnum):
            self.time_point = TimePointEnum(self.time_point)

        super().__post_init__(**kwargs)


@dataclass
class LateEffects(Thing):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = PCDC["/LateEffects"]
    class_class_curie: ClassVar[str] = "pcdc:/LateEffects"
    class_name: ClassVar[str] = "Late Effects"
    class_model_uri: ClassVar[URIRef] = URIRef("https://w3id.org/pcdc/model/LateEffects")

    submitter_id: str = None
    type: str = None
    subjects: Union[dict, Subject] = None
    age_at_le_eval: Optional[int] = None
    late_effect: Optional[Union[str, "LateEffectEnum"]] = None
    code: Optional[str] = None
    code_system: Optional[Union[str, "CodeSystemEnum"]] = None
    code_system_version: Optional[str] = None
    grade: Optional[Union[str, "GradeEnum"]] = None
    grade_system: Optional[Union[str, "GradeSystemEnum"]] = None
    grade_system_version: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.subjects):
            self.MissingRequiredField("subjects")
        if not isinstance(self.subjects, Subject):
            self.subjects = Subject(**as_dict(self.subjects))

        if self.age_at_le_eval is not None and not isinstance(self.age_at_le_eval, int):
            self.age_at_le_eval = int(self.age_at_le_eval)

        if self.late_effect is not None and not isinstance(self.late_effect, LateEffectEnum):
            self.late_effect = LateEffectEnum(self.late_effect)

        if self.code is not None and not isinstance(self.code, str):
            self.code = str(self.code)

        if self.code_system is not None and not isinstance(self.code_system, CodeSystemEnum):
            self.code_system = CodeSystemEnum(self.code_system)

        if self.code_system_version is not None and not isinstance(self.code_system_version, str):
            self.code_system_version = str(self.code_system_version)

        if self.grade is not None and not isinstance(self.grade, GradeEnum):
            self.grade = GradeEnum(self.grade)

        if self.grade_system is not None and not isinstance(self.grade_system, GradeSystemEnum):
            self.grade_system = GradeSystemEnum(self.grade_system)

        if self.grade_system_version is not None and not isinstance(self.grade_system_version, str):
            self.grade_system_version = str(self.grade_system_version)

        super().__post_init__(**kwargs)


# Enumerations
class SexEnum(EnumDefinitionImpl):

    Male = PermissibleValue(text="Male",
                               description="A person who belongs to the sex that normally produces sperm. The term is used to indicate biological sex distinctions, cultural gender role distinctions, or both.",
                               meaning=NCIT.C20197)
    Female = PermissibleValue(text="Female",
                                   description="A person who belongs to the sex that normally produces ova. The term is used to indicate biological sex distinctions, or cultural gender role distinctions, or both.",
                                   meaning=NCIT.C16576)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Undifferentiated = PermissibleValue(text="Undifferentiated",
                                                       description="Sex could not be determined; not uniquely defined; undifferentiated.",
                                                       meaning=NCIT.C41438)

    _defn = EnumDefinition(
        name="SexEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class RaceEnum(EnumDefinitionImpl):

    Asian = PermissibleValue(text="Asian",
                                 description="A person having origins in any of the original peoples of the Far East, Southeast Asia, or the Indian subcontinent, including for example, Cambodia, China, India, Japan, Korea, Malaysia, Pakistan, the Philippine Islands, Thailand, and Vietnam. (OMB)",
                                 meaning=NCIT.C41260)
    Multiracial = PermissibleValue(text="Multiracial",
                                             description="Having ancestors of several or various races.",
                                             meaning=NCIT.C67109)
    White = PermissibleValue(text="White",
                                 description="A person having origins in any of the original peoples of Europe, the Middle East, or North Africa. (OMB)",
                                 meaning=NCIT.C41261)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="RaceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "American Indian or Alaska Native",
                PermissibleValue(text="American Indian or Alaska Native",
                                 description="A person having origins in any of the original peoples of North and South America (including Central America) and who maintains tribal affiliation or community attachment. (OMB)",
                                 meaning=NCIT.C41259) )
        setattr(cls, "Black or African American",
                PermissibleValue(text="Black or African American",
                                 description="A person having origins in any of the Black racial groups of Africa. Terms such as "Haitian" or "Negro" can be used in addition to "Black or African American". (OMB)",
                                 meaning=NCIT.C16352) )
        setattr(cls, "Native Hawaiian or Other Pacific Islander",
                PermissibleValue(text="Native Hawaiian or Other Pacific Islander",
                                 description="A person having origins in any of the original peoples of Hawaii, Guam, Samoa, or other Pacific Islands. (OMB)",
                                 meaning=NCIT.C41219) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class EthnicityEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="EthnicityEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Hispanic or Latino",
                PermissibleValue(text="Hispanic or Latino",
                                 description="A person of Cuban, Mexican, Puerto Rican, South or Central American, or other Spanish culture or origin, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino." (OMB)",
                                 meaning=NCIT.C17459) )
        setattr(cls, "Not Hispanic or Latino",
                PermissibleValue(text="Not Hispanic or Latino",
                                 description="A person not of Cuban, Mexican, Puerto Rican, South or Central American, or other Spanish culture or origin, regardless of race.",
                                 meaning=NCIT.C41222) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class RaceIdentificationSourceEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="RaceIdentificationSourceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Self-Identified",
                PermissibleValue(text="Self-Identified",
                                 description="The choice individuals make when confronted with racial choices, etc") )
        setattr(cls, "Institution-Identified",
                PermissibleValue(text="Institution-Identified",
                                 description="An agreement made by the institute regarding the subject rather racial choices, etc.") )

class ConsortiumEnum(EnumDefinitionImpl):

    INTERACT = PermissibleValue(text="INTERACT",
                                       description="International Pediatric Acute Myeloid Leukemia Consortium (INTERACT)")
    INSPiRE = PermissibleValue(text="INSPiRE",
                                     description="International Central Nervous System Pediatric Research Consortium (INSPiRE)")
    C3P = PermissibleValue(text="C3P",
                             description="Consortium for Childhood Cancer Predisposition")
    HIBiSCus = PermissibleValue(text="HIBiSCus",
                                       description="Harmonization International Bone Sarcoma Consortium (HIBiSCus)")
    MaGIC = PermissibleValue(text="MaGIC",
                                 description="Malignant Germ Cell International Consortium (MaGIC)")
    NODAL = PermissibleValue(text="NODAL",
                                 description="Hodgkin Lymphoma Data Collaboration (NODAL)")
    INRG = PermissibleValue(text="INRG",
                               description="International Neuroblastoma Risk Group (INRG)")
    INSTRuCT = PermissibleValue(text="INSTRuCT",
                                       description="International Soft Tissue Sarcoma Consortium (INSTRuCT)")

    _defn = EnumDefinition(
        name="ConsortiumEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Global REACH",
                PermissibleValue(text="Global REACH",
                                 description="Global Retinoblastoma Alliance for Children") )

class DataContributorIdEnum(EnumDefinitionImpl):

    COG = PermissibleValue(text="COG",
                             description="Children's Oncology Group. An NCI-supported clinical cooperative group formed by the merger of the four national pediatric cancer research organizations: the Children's Cancer Group, the Intergroup Rhabdomyosarcoma Study Group, the National Wilms Tumor Study Group, and the Pediatric Oncology Group. The primary objective of the organization is to conduct clinical trials of new therapies for childhood and adolescent cancer. COG develops and coordinates clinical trials conducted at the 238 member institutions that include cancer centers of all major universities and teaching hospitals throughout the U.S. and Canada, as well as sites in Europe and Australia. COG members include over 5000 cancer researchers.",
                             meaning=NCIT.C39353)
    AIEOP = PermissibleValue(text="AIEOP",
                                 description="Italian Association of Pediatric Hematology and Oncology is a group from Bologna, Italy, comprised mainly of pediatricians, hematologists, oncologists, surgeons, biologists, nurses and psychologists who are devoted to addressing the problems of hematology, oncology and immunology in the child and adolescent.",
                                 meaning=NCIT.C168887)
    DCOG = PermissibleValue(text="DCOG",
                               description="A collaborating partner in Innovative Therapies for Children with Cancer Consortium (ITCC), a European based consortium to promote the clinical evaluation of new anti-cancer compounds in children with cancer.",
                               meaning=NCIT.C168889)
    MRC = PermissibleValue(text="MRC",
                             description="Medical Research Council. A publicly funded organization that is part of United Kingdom Research and Innovation, and is dedicated to improving human health through world-class medical research.",
                             meaning=NCIT.C168892)
    NOPHO = PermissibleValue(text="NOPHO",
                                 description="A collaborative group formed in 1984 with members from Denmark, Finland, Iceland, Lithuania, Norway and Sweden and whose goal was to secure that all Nordic children suffering from leukemia would receive optimal therapy wherever they lived.",
                                 meaning=NCIT.C168893)
    PPLLSG = PermissibleValue(text="PPLLSG",
                                   description="A collaborative group established in 1974 that had the original goal of implementing unified protocols with standardized diagnostic criteria and therapy regimens for Hodgkin's disease and acute lymphoblastic leukemia. The prospects were widened to include non-Hodgkin's lymphomas and acute myelogenous leukemia in 1983.",
                                   meaning=NCIT.C168894)
    SJCRH = PermissibleValue(text="SJCRH",
                                 description="The Saint Jude Children's Research Hospital received its NCI designation in 1977 and was awarded status as a comprehensive cancer center by NCI in 2008. Research is focused specifically on childhood cancers, acquired and inherited immunodeficiencies and genetic disorders.",
                                 meaning=NCIT.C39510)
    JACLS = PermissibleValue(text="JACLS",
                                 description="A study group in Japan investigating childhood leukemia.",
                                 meaning=NCIT.C168890)
    JPLSG = PermissibleValue(text="JPLSG",
                                 description="A study group in Japan investigating pediatric leukemia and lymphoma.",
                                 meaning=NCIT.C168891)
    CBTN = PermissibleValue(text="CBTN",
                               description="Children's Brain Tumor Network")
    IDIPGR = PermissibleValue(text="IDIPGR",
                                   description="Questions used in the case report forms of the international diffuse intrinsic pontine glioma registry for pediatric cancers.",
                                   meaning=NCIT.C180886)
    PNOC = PermissibleValue(text="PNOC",
                               description="Pacific Pediatric Neuro-Oncology Consortium")
    RBTR = PermissibleValue(text="RBTR",
                               description="Rare Brain Tumor Registry")
    SIOPE = PermissibleValue(text="SIOPE",
                                 description="European Society for Paediatric Oncology")
    UCL = PermissibleValue(text="UCL",
                             description="A public research university located in London, England.",
                             meaning=NCIT.C174967)
    CRCTU = PermissibleValue(text="CRCTU",
                                 description="Cancer Research Clinical Trials Unit. A research organization in the United Kingdom specializing in the design and delivery of every aspect of clinical trials of all phases in adults and children, from concept to publication.",
                                 meaning=NCIT.C174966)
    EORTC = PermissibleValue(text="EORTC",
                                 description="A group with aims to conduct, develop, coordinate, and stimulate laboratory and clinical research in Europe to improve the management of cancer and related problems by increasing survival but also patients' quality of life. There are more than 60 institutions and departments that have been recognized by EORTC as affiliated. These groups conduct, on a voluntary basis, laboratory research and/or clinical trials on all types of cancers using a multidisciplinary approach. EORTC maintains close working relationship with NCI and the British Cancer Research United Kingdom in London.",
                                 meaning=NCIT.C19741)
    GPOH = PermissibleValue(text="GPOH",
                               description="German Pediatric Oncology-Hematology Society. A research organization in Germany involved in the understanding, diagnosis, treatment and prognosis of pediatric cancers.",
                               meaning=NCIT.C174960)
    ISG = PermissibleValue(text="ISG",
                             description="Italian Sarcoma Group. A independent, scientific non-profit association formed in 2002 with the purpose of improving the quality of treatment for sarcoma.",
                             meaning=NCIT.C174965)
    SSG = PermissibleValue(text="SSG",
                             description="Scandinavian Sarcoma Group. A research organization in Scandinavia involved in the understanding, diagnosis, treatment and prognosis of sarcoma in children and adolescents.",
                             meaning=NCIT.C174961)
    UK = PermissibleValue(text="UK",
                           description="United Kingdom Sarcoma Registry. An information system in the United Kingdom designed for the collection, storage, and management of data on persons with sarcoma.",
                           meaning=NCIT.C174963)
    CCLG = PermissibleValue(text="CCLG",
                               description="A children's cancer charity and United Kingdom and Ireland's professional association for those involved in the treatment and care of children with cancer.",
                               meaning=NCIT.C177327)
    SFCE = PermissibleValue(text="SFCE",
                               description="Société Française de Lutte contre les Cancers et Leucémies de l'Enfant et de l'Adolescent",
                               meaning=NCIT.C177328)
    SOPOBE = PermissibleValue(text="SOPOBE",
                                   description="Brazilian Society of Pediatric Oncology",
                                   meaning=NCIT.C177329)
    DFCI = PermissibleValue(text="DFCI",
                               description="Dana Farber Cancer Institute",
                               meaning=NCIT.C177330)
    PHC = PermissibleValue(text="PHC",
                             description="The Pediatric Hodgkin Consortium (PHC) includes St. Jude, Stanford, and Dana-Farber")
    JCCG = PermissibleValue(text="JCCG",
                               description="Neuroblastoma Committee of Japan Children’s Cancer Group")
    JINCS = PermissibleValue(text="JINCS",
                                 description="Japanese Infantile Neuroblastoma Co-operative Study Group")
    JNBSG = PermissibleValue(text="JNBSG",
                                 description="Japan Neuroblatoma Study Group")
    SIOPEN = PermissibleValue(text="SIOPEN",
                                   description="Society of Paediatric Oncology Europe Neuroblastoma Group")
    EpSSG = PermissibleValue(text="EpSSG",
                                 description="An international organization of healthcare professionals devoted to the care and treatment of children and young people with soft tissue sarcoma.",
                                 meaning=NCIT.C192774)
    CWS = PermissibleValue(text="CWS",
                             description="An international pediatric soft tissue sarcoma study group, also known as the Cooperative Soft Tissue Sarcoma Group, that creates guidance for risk-adapted treatment of soft tissue sarcoma and soft tissue tumors in children, adolescents, and young adults in Europe.",
                             meaning=NCIT.C192777)
    STSC = PermissibleValue(text="STSC",
                               description="AIEOP Soft Tissue Sarcoma Committee")
    BOCG = PermissibleValue(text="BOCG",
                               description="Brazilian Group and Scandinavian Group. A cooperative group of individuals working with pediatric osteosarcoma.",
                               meaning=NCIT.C180373)
    FSG = PermissibleValue(text="FSG",
                             description="French Sarcoma Group. A research organization in France involved in the understanding, diagnosis, treatment and prognosis of sarcoma in children and adolescents.",
                             meaning=NCIT.C174962)
    GEIS = PermissibleValue(text="GEIS",
                               description="Spanish Sarcoma Group. A scientific society formed by professionals from more than sixty medical centers across Spain. This group includes surgeons, pediatricians, oncologic radiation therapy specialists, pathologists and molecular researchers.",
                               meaning=NCIT.C180341)
    CHLA = PermissibleValue(text="CHLA",
                               description="Children's Hospital Los Angeles")
    DEPICT = PermissibleValue(text="DEPICT",
                                   description="Disease-Specific Electronic Patient Illustrated Clinical Timeline (part of IRbC - International Retinoblastoma Consortium)")
    EuRBG = PermissibleValue(text="EuRBG",
                                 description="European Retinoblastoma Group")
    GALOP = PermissibleValue(text="GALOP",
                                 description="Grupa de America Latina de Oncologia Pediatrica")
    MMT = PermissibleValue(text="MMT",
                             description="SIOP Malignant Mesenchymal Tumour Committee")

    _defn = EnumDefinition(
        name="DataContributorIdEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "BFM-SG",
                PermissibleValue(text="BFM-SG",
                                 description="A study group formed in 1975 by three individuals, Hansjorg Riehm in Berlin (B), Bernhard Kornhuber in Frankfurt (F) and Gunther Schellong in Munster (M), who initiated the first multicenter BFM trial. The BFM treatment concept was based on an intensive chemotherapeutic approach employing eight different drugs which led to a revolutionary increase in the survival of children and adolescents with acute lymphoblastic leukemia.",
                                 meaning=NCIT.C168888) )
        setattr(cls, "EURO-EWING",
                PermissibleValue(text="EURO-EWING",
                                 description="A coalition of clinical study groups bringing together active clinicians and scientists in Europe dedicated to improving survival from Ewing sarcoma.",
                                 meaning=NCIT.C174964) )
        setattr(cls, "FSG/SFCE",
                PermissibleValue(text="FSG/SFCE",
                                 description="French Sarcoma Group. A research organization in France involved in the understanding, diagnosis, treatment and prognosis of sarcoma in children and adolescents.",
                                 meaning=NCIT.C174962) )
        setattr(cls, "NRG-Oncology",
                PermissibleValue(text="NRG-Oncology",
                                 description="A leading protocol organization within the National Clinical Trials Network that seeks to improve the lives of cancer patients by conducting practice-changing, multi-institutional clinical and translational research.",
                                 meaning=NCIT.C168950) )
        setattr(cls, "SIOP MMT",
                PermissibleValue(text="SIOP MMT",
                                 description="An international pediatric oncology committee that specializes in the research of malignant mesenchymal tumors. Along with the Associazione Italiana Ematologia Oncologia Pediatrica-Soft Tissue Sarcoma Committee (AIEOP-STSC), which was formerly known as the Italian Cooperative Group (ICG), SIOP-MMT founded the European pediatric Soft tissue sarcoma Study Group (EpSSG) and the Non-rhabdomyosarcoma Soft Tissue Sarcoma (NRSTS) study in 2005 with the goal of making pediatric non-rhabdomyosarcoma soft tissue sarcoma treatment uniform across Europe.",
                                 meaning=NCIT.C192775) )
        setattr(cls, "COSS-GPOH",
                PermissibleValue(text="COSS-GPOH",
                                 description="Cooperative German-Austrian-Swiss Osteosarcoma Study Group (COSS) of the German Pediatric Oncology-Hematology Society (GPOH). The section of the German Society of Pediatric Oncology and Hematology dedicated to the study of osteosarcoma.",
                                 meaning=NCIT.C186743) )

class StudyIdEnum(EnumDefinitionImpl):

    AALL0331 = PermissibleValue(text="AALL0331",
                                       description="Standard Risk B-precursor Acute Lymphoblastic Leukemia (ALL) is a COG study from 2003-2011",
                                       meaning=NCIT.C178095)
    AALL0232 = PermissibleValue(text="AALL0232",
                                       description="High Risk B-precursor Acute Lymphoblastic Leukemia (ALL) is a COG study from 2003-2011",
                                       meaning=NCIT.C178065)
    AALL0434 = PermissibleValue(text="AALL0434",
                                       description="Intensified Methotrexate, Nelarabine (Compound 506U78; IND # 52611) and Augmented BFM Therapy for Children and Young Adults with Newly Diagnosed T-cell Acute Lymphoblastic Leukemia(ALL)or T-cell LymphoblasticLymphoma is a COG study from 2007-2014",
                                       meaning=NCIT.C178066)
    AALL08B1 = PermissibleValue(text="AALL08B1",
                                       description="Classification of Newly Diagnosed Acute Lymphoblastic Leukemia (ALL) is a COG study from 2010-2018",
                                       meaning=NCIT.C178067)
    AALL03B1 = PermissibleValue(text="AALL03B1",
                                       description="Classification of Acute Lymphoblastic Leukemia is a COG study from 2003-2011",
                                       meaning=NCIT.C178068)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    AAML03P1 = PermissibleValue(text="AAML03P1",
                                       meaning=NCIT.C168936)
    AAML0531 = PermissibleValue(text="AAML0531",
                                       meaning=NCIT.C168937)
    AAML1031 = PermissibleValue(text="AAML1031",
                                       meaning=NCIT.C168938)
    AMLBFM2004 = PermissibleValue(text="AMLBFM2004",
                                           meaning=NCIT.C168939)
    AMLBFM2012 = PermissibleValue(text="AMLBFM2012",
                                           meaning=NCIT.C173250)
    AMLBFMRegistry2017 = PermissibleValue(text="AMLBFMRegistry2017",
                                                           meaning=NCIT.C182031)
    AMLBFM1998 = PermissibleValue(text="AMLBFM1998",
                                           meaning=NCIT.C182032)
    SJCRHAML02 = PermissibleValue(text="SJCRHAML02",
                                           meaning=NCIT.C168940)
    JPLSGAML05 = PermissibleValue(text="JPLSGAML05",
                                           meaning=NCIT.C168941)
    AEIOPAML2002 = PermissibleValue(text="AEIOPAML2002",
                                               meaning=NCIT.C168942)
    JACLSAML99 = PermissibleValue(text="JACLSAML99",
                                           meaning=NCIT.C168943)
    DBAML01 = PermissibleValue(text="DBAML01",
                                     meaning=NCIT.C168944)
    MRCAML12 = PermissibleValue(text="MRCAML12",
                                       meaning=NCIT.C168945)
    MRCAML15 = PermissibleValue(text="MRCAML15",
                                       meaning=NCIT.C173252)
    NOPHOAML2004 = PermissibleValue(text="NOPHOAML2004",
                                               meaning=NCIT.C168946)
    NOPHOAML2012 = PermissibleValue(text="NOPHOAML2012",
                                               meaning=NCIT.C173253)
    PPLLSGAML98 = PermissibleValue(text="PPLLSGAML98",
                                             meaning=NCIT.C173254)
    AIEOPLAM92 = PermissibleValue(text="AIEOPLAM92",
                                           meaning=NCIT.C173255)
    SCFEELAM02 = PermissibleValue(text="SCFEELAM02",
                                           meaning=NCIT.C168947)
    ACNS0331 = PermissibleValue(text="ACNS0331",
                                       description="A Study Evaluating Limited Target Volume Boost Irradiation and Reduced Dose Craniospinal Radiotherapy (18.00 Gy) and Chemotherapy in Children With Newly Diagnosed Standard Risk Medulloblastoma: A Phase III Double Randomized Trial (Source: ClinicalTrials.gov)")
    ACNS0332 = PermissibleValue(text="ACNS0332",
                                       description="Efficacy of Carboplatin Administered Concomitantly With Radiation and Isotretinoin as a Pro-Apoptotic Agent in Other Than Average Risk Medulloblastoma/PNET Patients (Source: ClinicalTrials.gov)")
    ACNS0333 = PermissibleValue(text="ACNS0333",
                                       description="Treatment of Atypical Teratoid/Rhabdoid Tumors (AT/RT) of the Central Nervous System With Surgery, Intensive Chemotherapy, and 3-D Conformal Radiation (Source: ClinicalTrials.gov)")
    ACNS0334 = PermissibleValue(text="ACNS0334",
                                       description="A Phase III Randomized Trial for the Treatment of Newly Diagnosed Supratentorial PNET and High Risk Medulloblastoma in Children <36 Months Old With Intensive Induction Chemotherapy With Methotrexate Followed by Consolidation With Stem Cell Rescue Versus the Same Therapy Without Methotrexate (Source: ClinicalTrials.gov)")
    AEWS0031 = PermissibleValue(text="AEWS0031",
                                       description="Trial of Chemotherapy Intensification Through Compression in Ewing's Sarcoma and Related Tumors. (Source:ClinicalTrials.gov)",
                                       meaning=NCIT.C174970)
    AEWS0331 = PermissibleValue(text="AEWS0331",
                                       description="European Ewing Tumour Working Initiative of National Groups Ewing Tumour Studies 1999 (EURO-E.W.I.N.G.99). (Source: ClinicalTrials.gov)",
                                       meaning=NCIT.C174969)
    AEWS07P1 = PermissibleValue(text="AEWS07P1",
                                       description="A Pilot Study of Chemotherapy Intensification by Adding Vincristine, Topotecan and Cyclophosphamide to Standard Chemotherapy Agents With an Interval Compression Schedule in Newly Diagnosed Patients With Localized Ewing Sarcoma Family of Tumors. (Source: ClinicalTrials.gov)",
                                       meaning=NCIT.C174974)
    AEWS1031 = PermissibleValue(text="AEWS1031",
                                       description="A Phase III Randomized Trial of Adding Vincristine-Topotecan-Cyclophosphamide to Standard Chemotherapy in Initial Treatment of Non-Metastatic Ewing Sarcoma. (Source: ClincialTrials.gov)",
                                       meaning=NCIT.C174971)
    AEWS1221 = PermissibleValue(text="AEWS1221",
                                       description="Randomized Phase 3 Trial Evaluating the Addition of the IGF-1R Monoclonal Antibody Ganitumab (AMG 479, NSC# 750008) to Multiagent Chemotherapy for Patients With Newly Diagnosed Metastatic Ewing Sarcoma. (Source: ClinicalTrials.gov)",
                                       meaning=NCIT.C174968)
    EE99 = PermissibleValue(text="EE99",
                               description="European Ewing Tumour Working Initiative of National Groups Ewing Tumour Studies 1999 (EURO-E.W.I.N.G.99). (Source: ClinicalTrials.gov)",
                               meaning=NCIT.C174972)
    EICESS92 = PermissibleValue(text="EICESS92",
                                       description="European Intergroup Cooperative Ewing'S Sarcoma Study [Eicess 92].. (Source: Clinicaltrials.Gov)",
                                       meaning=NCIT.C174973)
    TGM85 = PermissibleValue(text="TGM85",
                                 description="The identifier TGM85, assigned to a study in an GCT clinical trial.",
                                 meaning=NCIT.C177332)
    TGM90 = PermissibleValue(text="TGM90",
                                 description="The identifier TGM90, assigned to a study in an GCT clinical trial.",
                                 meaning=NCIT.C177333)
    TGM95 = PermissibleValue(text="TGM95",
                                 description="The identifier TGM95, assigned to a study in an GCT clinical trial.",
                                 meaning=NCIT.C177334)
    GC1 = PermissibleValue(text="GC1",
                             description="The identifier GC1, assigned to a study in an GCT clinical trial.",
                             meaning=NCIT.C113593)
    GC2 = PermissibleValue(text="GC2",
                             description="The identifier GC2, assigned to a study in an GCT clinical trial.",
                             meaning=NCIT.C177336)
    GOG0078 = PermissibleValue(text="GOG0078",
                                     description="The identifier GOG0078, assigned to a study in an GCT clinical trial.",
                                     meaning=NCIT.C177337)
    GOG0090 = PermissibleValue(text="GOG0090",
                                     description="The identifier GOG0090, assigned to a study in an GCT clinical trial.",
                                     meaning=NCIT.C177338)
    GOG0116 = PermissibleValue(text="GOG0116",
                                     description="The identifier GOG0116, assigned to a study in an GCT clinical trial.",
                                     meaning=NCIT.C177339)
    P9749 = PermissibleValue(text="P9749",
                                 description="The identifier P9749, assigned to a study in an GCT clinical trial.",
                                 meaning=NCIT.C177340)
    POG9049 = PermissibleValue(text="POG9049",
                                     description="The identifier POG9049, assigned to a study in an GCT clinical trial.",
                                     meaning=NCIT.C177341)
    AGCT01P1 = PermissibleValue(text="AGCT01P1",
                                       description="The identifier AGCT01P1, assigned to a study in an GCT clinical trial.",
                                       meaning=NCIT.C177342)
    AGCT0132 = PermissibleValue(text="AGCT0132",
                                       description="The identifier AGCT0132, assigned to a study in an GCT clinical trial.",
                                       meaning=NCIT.C177343)
    AGCT0521 = PermissibleValue(text="AGCT0521",
                                       description="The identifier AGCT0521, assigned to a study in an GCT clinical trial.",
                                       meaning=NCIT.C177344)
    TE04 = PermissibleValue(text="TE04",
                               description="The identifier TE04, assigned to a study in an GCT clinical trial.",
                               meaning=NCIT.C20299)
    TE05 = PermissibleValue(text="TE05",
                               description="The identifier TE05, assigned to a study in an GCT clinical trial.",
                               meaning=NCIT.C177346)
    TE08 = PermissibleValue(text="TE08",
                               description="The identifier TE08, assigned to a study in an GCT clinical trial.",
                               meaning=NCIT.C177347)
    TE22 = PermissibleValue(text="TE22",
                               description="The identifier TE22, assigned to a study in an GCT clinical trial.",
                               meaning=NCIT.C177348)
    TE09 = PermissibleValue(text="TE09",
                               description="The identifier TE09, assigned to a study in an GCT clinical trial.",
                               meaning=NCIT.C177349)
    TE13 = PermissibleValue(text="TE13",
                               description="The identifier TE13, assigned to a study in an GCT clinical trial.",
                               meaning=NCIT.C177350)
    TE20 = PermissibleValue(text="TE20",
                               description="The identifier TE20, assigned to a study in an GCT clinical trial.",
                               meaning=NCIT.C177351)
    TIP = PermissibleValue(text="TIP",
                             description="The identifier TIP, assigned to a study in an GCT clinical trial.",
                             meaning=NCIT.C90069)
    TCGM2004 = PermissibleValue(text="TCGM2004",
                                       description="The identifier TCGM2004, assigned to a study in an GCT clinical trial.",
                                       meaning=NCIT.C187201)
    HOD05 = PermissibleValue(text="HOD05",
                                 description="Stanford V Chemotherapy With Low-Dose Tailored-Field Radiation Therapy for Intermediate Risk Pediatric Hodgkin Lymphoma")
    AOST0121 = PermissibleValue(text="AOST0121",
                                       description="A Groupwide Phase II Study of Trastuzumab (Herceptin) in Metastatic Osteosarcoma Patients With Tumors That Overexpress HER2. (Source: ClinicalTrials.gov)",
                                       meaning=NCIT.C180358)
    AOST01P1 = PermissibleValue(text="AOST01P1",
                                       meaning=NCIT.C180359)
    AOST0221 = PermissibleValue(text="AOST0221",
                                       description="A Phase II Study of Aerosolized GM-CSF (NSC# 613795, IND# 11042) in Patients With First Pulmonary Recurrence of Osteosarcoma. (Source: ClinicalTrials.gov)",
                                       meaning=NCIT.C180360)
    AOST1321 = PermissibleValue(text="AOST1321",
                                       description="Phase 2 Study of Denosumab (NSC# 744010), a RANK Ligand Antibody, for Recurrent or Refractory Osteosarcoma (Source: ClinicalTrials.gov)",
                                       meaning=NCIT.C180362)
    AOST1421 = PermissibleValue(text="AOST1421",
                                       description="A Phase 2 Study of Human-Mouse Chimeric Anti-disialoganglioside Monoclonal Antibody ch14.18 (Dinutuximab, NSC# 764038) in Combination With Sargramostim (GM-CSF) in Patients With Recurrent Osteosarcoma. (Source: ClinicalTrials.gov)",
                                       meaning=NCIT.C180363)
    INT133 = PermissibleValue(text="INT133",
                                   meaning=NCIT.C180366)
    OS2006 = PermissibleValue(text="OS2006",
                                   description="Protocole de Traitement Des ostéosarcomes de l'Enfant, de l'Adolescent et de l'Adulte Comportant. (Source: ClinicalTrials.gov)",
                                   meaning=NCIT.C180367)
    P9754 = PermissibleValue(text="P9754",
                                 description="Protocol for Patients With Newly-Diagnosed Non-Metastatic Osteosarcoma - A POG/CCG Pilot Intergroup Study. (Source: ClinicalTrials.gov)",
                                 meaning=NCIT.C180368)
    REGOBONE = PermissibleValue(text="REGOBONE",
                                       description="A Randomized Phase II, placebo-controlled , multicenterstudy evaluating efficacy and safety of regorafenib inpatients with metastatic bone sarcomas",
                                       meaning=NCIT.C180369)
    ARET0321 = PermissibleValue(text="ARET0321",
                                       description="A Trial of Intensive Multi-Modality Therapy for Extra-Ocular Retinoblastoma. (Source: ClinicalTrials.gov)")
    ARET0332 = PermissibleValue(text="ARET0332",
                                       description="A Study of Unilateral Retinoblastoma With and Without Histopathologic High-Risk Features and the Role of Adjuvant Chemotherapy. (Source: ClinicalTrials.gov)")
    ARET12P1 = PermissibleValue(text="ARET12P1",
                                       description="A Multi-institutional Feasibility Study of Intra-arterial Chemotherapy Given in the Ophthalmic Artery of Children With Retinoblastoma. (Source: ClinicalTrials.gov)")

    _defn = EnumDefinition(
        name="StudyIdEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "AMLBFM-Registry2012",
                PermissibleValue(text="AMLBFM-Registry2012",
                                 meaning=NCIT.C173251) )
        setattr(cls, "AOST0331/EURAMOS1",
                PermissibleValue(text="AOST0331/EURAMOS1",
                                 description="An Open-Label, Multicenter, Phase I/II Clinical Trial to Identify the Modufolin® Dose With Most Favorable Safety Prospect and Confirmed Ability to Mitigate High-Dose Methotrexate Induced Toxicity During Treatment of Osteosarcoma Patients. (Source: ClinicalTrials.gov)",
                                 meaning=NCIT.C180361) )
        setattr(cls, "CCG-782",
                PermissibleValue(text="CCG-782",
                                 meaning=NCIT.C180364) )
        setattr(cls, "CCG-7942",
                PermissibleValue(text="CCG-7942",
                                 meaning=NCIT.C180365) )
        setattr(cls, "Sarcome13/OS2016",
                PermissibleValue(text="Sarcome13/OS2016",
                                 description="A Multicentre, Randomised, Open-label, Phase II trial of MEPACT combined with post-operative chemotherapy for newly diagnosed high risk osteosarcoma patients (metastatic osteosarcoma at diagnosis or localized disease with poor histological response) ",
                                 meaning=NCIT.C180370) )

class TreatmentArmEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    CHEMO = PermissibleValue(text="CHEMO",
                                 description="The use of synthetic or naturally-occurring chemicals for the treatment of diseases.",
                                 meaning=NCIT.C15632)
    DOX = PermissibleValue(text="DOX",
                             description="The hydrochloride salt of doxorubicin, an anthracycline antibiotic with antineoplastic activity. Doxorubicin, isolated from the bacterium Streptomyces peucetius var. caesius, is the hydroxylated congener of daunorubicin. Doxorubicin intercalates between base pairs in the DNA helix, thereby preventing DNA replication and ultimately inhibiting protein synthesis. Additionally, doxorubicin inhibits topoisomerase II which results in an increased and stabilized cleavable enzyme-DNA linked complex during DNA replication and subsequently prevents the ligation of the nucleotide strand after double-strand breakage. Doxorubicin also forms oxygen free radicals resulting in cytotoxicity secondary to lipid peroxidation of cell membrane lipids; the formation of oxygen free radicals also contributes to the toxicity of the anthracycline antibiotics, namely the cardiac and cutaneous vascular effects.",
                             meaning=NCIT.C1326)
    MAP = PermissibleValue(text="MAP",
                             description="A regimen consisting of cisplatin, doxorubicin, and methotrexate that can be used in the treatment of osteosarcoma.",
                             meaning=NCIT.C67339)

    _defn = EnumDefinition(
        name="TreatmentArmEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "SJCRH AML02:HDAC-ADE+GO-C1-C2-C3",
                PermissibleValue(text="SJCRH AML02:HDAC-ADE+GO-C1-C2-C3",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "SJCRH AML02:HDAC-ADE-C1-C2-C3",
                PermissibleValue(text="SJCRH AML02:HDAC-ADE-C1-C2-C3",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "SJCRH AML02:HDAC-ADE+GO-SCT",
                PermissibleValue(text="SJCRH AML02:HDAC-ADE+GO-SCT",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "SJCRH AML02:HDAC-ADE-SCT",
                PermissibleValue(text="SJCRH AML02:HDAC-ADE-SCT",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "SJCRH AML02:LDAC-ADE+GO-C1-C2-C3",
                PermissibleValue(text="SJCRH AML02:LDAC-ADE+GO-C1-C2-C3",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "SJCRH AML02:LDAC-ADE-C1-C2-C3",
                PermissibleValue(text="SJCRH AML02:LDAC-ADE-C1-C2-C3",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "SJCRH AML02:LDAC-ADE+GO-SCT",
                PermissibleValue(text="SJCRH AML02:LDAC-ADE+GO-SCT",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "SJCRH AML02:LDAC-ADE-SCT",
                PermissibleValue(text="SJCRH AML02:LDAC-ADE-SCT",
                                 description="Rubnitz et al, 2010") )
        setattr(cls, "PPLLSG AML-98:SR",
                PermissibleValue(text="PPLLSG AML-98:SR",
                                 description="Dluzniewska et al, 2005") )
        setattr(cls, "PPLLSG AML-98:HR",
                PermissibleValue(text="PPLLSG AML-98:HR",
                                 description="Dluzniewska et al, 2005") )
        setattr(cls, "JPLSG AML99:JACLS",
                PermissibleValue(text="JPLSG AML99:JACLS",
                                 description="Tsukimoto et al, 2009") )
        setattr(cls, "JPLSG AML05:JACLS",
                PermissibleValue(text="JPLSG AML05:JACLS",
                                 description="Tomizawa et al, 2013") )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "ACNS0331:Arm I (3-7 years of age, LDCSI, IFRT) ",
                PermissibleValue(text="ACNS0331:Arm I (3-7 years of age, LDCSI, IFRT) ",
                                 description="Patients 3-7 years of age undergo lowered dose craniospinal irradiation (LDCSI) with involved-field radiation therapy (IFRT) boost. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0331:Arm II (3-7 years of age, LDCSI, PFRT) ",
                PermissibleValue(text="ACNS0331:Arm II (3-7 years of age, LDCSI, PFRT) ",
                                 description="Patients 3-7 years of age undergo LDCSI with whole posterior fossa radiation therapy (PFRT) boost. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0331:Arm III (3-7 years of age, SDCSI, IFRT) ",
                PermissibleValue(text="ACNS0331:Arm III (3-7 years of age, SDCSI, IFRT) ",
                                 description="Patients 3-7 years of age undergo standard dose craniospinal irradiation (SDCSI) with IFRT boost. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0331:Arm IV (3-7 years of age, SDCSI, PFRT)",
                PermissibleValue(text="ACNS0331:Arm IV (3-7 years of age, SDCSI, PFRT)",
                                 description="Patients 3-7 years of age undergo SDCSI with PFRT boost. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0331:Arm V (8-21 years of age, SDCSI, IFRT)",
                PermissibleValue(text="ACNS0331:Arm V (8-21 years of age, SDCSI, IFRT)",
                                 description="Patients 8-21 years of age undergo SDCSI with IFRT boost. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0331:Arm VI (8-21 years of age, SDCSI, PFRT",
                PermissibleValue(text="ACNS0331:Arm VI (8-21 years of age, SDCSI, PFRT",
                                 description="Patients 8-21 years of age undergo SDCSI with PFRT boost. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0332:Arm A (Chemotherapy)",
                PermissibleValue(text="ACNS0332:Arm A (Chemotherapy)",
                                 description="Chemoradiotherapy: Patients undergo radiation therapy QD five days a week for 6 weeks. Patients also receive vincristine sulfate IV over 1 minute once weekly for 6 weeks. Six weeks after completion of chemoradiotherapy, patients proceed to maintenance therapy. Maintenance Therapy: Patients receive cisplatin IV over 6 hours on day 1, vincristine sulfate IV over 1 minute on days 1 and 8, and cyclophosphamide IV over 1 hour on days 2 and 3. Patients also receive filgrastim SC or IV beginning on day 4 and continuing until blood counts recover (at least 10 days). Treatment repeats every 28 days for a total of 6 courses in the absence of disease progression or unacceptable toxicity. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0332:Arm B (Chemoradiotherapy)",
                PermissibleValue(text="ACNS0332:Arm B (Chemoradiotherapy)",
                                 description="Chemoradiotherapy: Patients receive vincristine sulfate and undergo radiation therapy as in Arm A. Patients also receive carboplatin IV over 15 minutes on each day of radiation therapy. Six weeks after completion of chemoradiotherapy, patients proceed to maintenance therapy. Maintenance Therapy: Patients receive maintenance therapy as in Arm A. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0332:Arm C (Chemoradiotherapy, Isotretinoin-CLOSED TO ACCURAL)",
                PermissibleValue(text="ACNS0332:Arm C (Chemoradiotherapy, Isotretinoin-CLOSED TO ACCURAL)",
                                 description="Chemoradiotherapy: Patients undergo chemoradiotherapy as in Arm A. Six weeks after completion of chemoradiotherapy, patients proceed to maintenance therapy. Maintenance Therapy: Patients receive isotretinoin PO BID on day 1 and days 16-28 and cisplatin, vincristine sulfate, cyclophosphamide, and filgrastim as in Arm A maintenance therapy. Treatment repeats every 28 days for a total of 6 courses in the absence of disease progression or unacceptable toxicity. Patients then proceed to continuation therapy. Continuation Therapy: Patients receive isotretinoin PO BID on days 15-28 every 28 days for up to 6 courses in the absence of disease progression or unacceptable toxicity. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0332:Arm D (Chemoradiotherapy, Isotretinoin-CLOSED TO ACCURAL)",
                PermissibleValue(text="ACNS0332:Arm D (Chemoradiotherapy, Isotretinoin-CLOSED TO ACCURAL)",
                                 description="Chemoradiotherapy: Patients undergo radiation therapy QD five days a week for 6 weeks. Patients also receive vincristine sulfate IV over 1 minute once weekly for 6 weeks. Six weeks after completion of chemoradiotherapy, patients proceed to maintenance therapy. Maintenance Therapy: Patients receive cisplatin IV over 6 hours on day 1, vincristine sulfate IV over 1 minute on days 1 and 8, and cyclophosphamide IV over 1 hour on days 2 and 3. Patients also receive filgrastim SC or IV beginning on day 4 and continuing until blood counts recover (at least 10 days). Treatment repeats every 28 days for a total of 6 courses in the absence of disease progression or unacceptable toxicity. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0333:Arm I (Chemotherapy, Autologous PBSC, 3D-CRT)",
                PermissibleValue(text="ACNS0333:Arm I (Chemotherapy, Autologous PBSC, 3D-CRT)",
                                 description="Patients receive vincristine IV on days 1, 8, and 15; high-dose methotrexate IV on day 1; leucovorin calcium orally or IV; etoposide IV on days 4, 5, and 6; cyclophosphamide IV on days 4 and 5; cisplatin IV on day 6, and G-CSF IV or SC on day 7 until ANC recovers. Within 2-6 weeks after induction therapy or radiation therapy, patients receive high-dose carboplatin IV and high-dose thiotepa IV on days 1 and 2 and undergo autologous PBSC rescue on approximately day 4. Patients also receive G-CSF IV or SC once daily until ANC recovers. Treatment with consolidation therapy followed by stem cell rescue repeats every 28 days for 3 courses in the absence of disease progression or unacceptable toxicity. After consolidation therapy, patients undergo 3D-CRT to the brain (and the spine if needed) 5 days a week for 5-6 weeks. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0333:Arm II (Chemotherapy, 3D-CRT, Autologous PBSC)",
                PermissibleValue(text="ACNS0333:Arm II (Chemotherapy, 3D-CRT, Autologous PBSC)",
                                 description="Patients receive vincristine IV on days 1, 8, and 15; high-dose methotrexate IV on day 1; leucovorin calcium orally or IV; etoposide IV on days 4, 5, and 6; cyclophosphamide IV on days 4 and 5; cisplatin IV on day 6, and G-CSF IV or SC on day 7 until ANC recovers. Patients undergo 3D-CRT to the brain (and the spine if needed) 5 days a week for 5-6 weeks. Within 2-6 weeks after completion of radiation therapy, patients receive high-dose carboplatin IV and high-dose thiotepa IV on days 1 and 2 and undergo autologous PBSC rescue on approximately day 4. Patients also receive G-CSF IV or SC once daily until ANC recovers. Treatment repeats every 28 days for 3 courses in the absence of disease progression or unacceptable toxicity. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0334:Arm I (Induction+Consolidation Chemotherapy, Autologous PBSC)",
                PermissibleValue(text="ACNS0334:Arm I (Induction+Consolidation Chemotherapy, Autologous PBSC)",
                                 description="Patients receive vincristine sulfate IV on days 1, 8, and 15; etoposide IV over 1 hour on days 1-3; cyclophosphamide IV over 1 hour on days 1 and 2; cisplatin IV over 6 hours on day 3. Treatment repeats every 3 weeks for 3 courses. Within 6 weeks after completion of induction therapy, patients receive consolidation therapy comprising carboplatin IV over 2 hours and thiotepa IV over 2 hours on days 1 and 2 and filgrastim (G-CSF) IV or SC beginning on day 5 and continuing until blood counts recover. Patients also receive autologous PBSC IV on day 4. Treatment repeats every 4 weeks for 3 courses in the absence of disease progression or unacceptable toxicity. (Source: ClinicalTrials.gov)") )
        setattr(cls, "ACNS0334:Arm II (Induction+Consolidation Chemotherapy, Autologous PBSC)",
                PermissibleValue(text="ACNS0334:Arm II (Induction+Consolidation Chemotherapy, Autologous PBSC)",
                                 description="Patients receive vincristine sulfate IV on days 1, 8, and 15; high-dose methotrexate IV over 4 hours on day 1; and leucovorin calcium IV or orally every 6 hours beginning on day 2 and continuing until methotrexate levels are in a safe range. Patients then receive etoposide IV over 1 hour on approximately days 4, 5, and 6, cyclophosphamide IV over 1 hour on approximately days 4 and 5, and cisplatin IV over 6 hours on approximately day 6. Treatment repeats every 3 weeks for 3 courses. Within 6 weeks after completion of induction therapy, patients receive consolidation therapy comprising carboplatin IV over 2 hours and thiotepa IV over 2 hours on days 1 and 2 and filgrastim (G-CSF) IV or SC beginning on day 5 and continuing until blood counts recover. Patients also receive autologous PBSC IV on day 4. Treatment repeats every 4 weeks for 3 courses in the absence of disease progression or unacceptable toxicity. (Source: ClinicalTrials.gov)") )
        setattr(cls, "AEWS0031:2W-VDC-MESNA+IFO-GCSF",
                PermissibleValue(text="AEWS0031:2W-VDC-MESNA+IFO-GCSF",
                                 description="Regimen B",
                                 meaning=NCIT.C174976) )
        setattr(cls, "AEWS0031:3W-VDC-MESNA+IFO-GCSF",
                PermissibleValue(text="AEWS0031:3W-VDC-MESNA+IFO-GCSF",
                                 description="Regimen A",
                                 meaning=NCIT.C174975) )
        setattr(cls, "AEWS0331:VIDE-Surgery-R1-VAI-VAC/VAI",
                PermissibleValue(text="AEWS0331:VIDE-Surgery-R1-VAI-VAC/VAI",
                                 description="Group 1",
                                 meaning=NCIT.C174979) )
        setattr(cls, "AEWS0331:VIDE-Surgery-R2-VAI-VAI/BuMel",
                PermissibleValue(text="AEWS0331:VIDE-Surgery-R2-VAI-VAI/BuMel",
                                 description="Group 2, Arm I",
                                 meaning=NCIT.C174980) )
        setattr(cls, "AEWS0331:VIDE-Surgery-R3-VAI-MEME/TreoMel/BuMel/P2",
                PermissibleValue(text="AEWS0331:VIDE-Surgery-R3-VAI-MEME/TreoMel/BuMel/P2",
                                 description="Group 2, Arm II",
                                 meaning=NCIT.C174981) )
        setattr(cls, "AEWS07P1:EVAIA-EVAIA",
                PermissibleValue(text="AEWS07P1:EVAIA-EVAIA",
                                 description="Arm C",
                                 meaning=NCIT.C174990) )
        setattr(cls, "AEWS07P1:VAIA-VACA",
                PermissibleValue(text="AEWS07P1:VAIA-VACA",
                                 description="Arm A",
                                 meaning=NCIT.C174988) )
        setattr(cls, "AEWS07P1:VAIA-VAIA",
                PermissibleValue(text="AEWS07P1:VAIA-VAIA",
                                 description="Arm B",
                                 meaning=NCIT.C174989) )
        setattr(cls, "AEWS1031:VIDEC",
                PermissibleValue(text="AEWS1031:VIDEC",
                                 description="Regimen A",
                                 meaning=NCIT.C174982) )
        setattr(cls, "AEWS1031:VIDEC+Topotecan",
                PermissibleValue(text="AEWS1031:VIDEC+Topotecan",
                                 description="Regimen B",
                                 meaning=NCIT.C174983) )
        setattr(cls, "AEWS1221:VDC/IE",
                PermissibleValue(text="AEWS1221:VDC/IE",
                                 description="Regimen A",
                                 meaning=NCIT.C174977) )
        setattr(cls, "AEWS1221:VDC/IE+Ganitumab",
                PermissibleValue(text="AEWS1221:VDC/IE+Ganitumab",
                                 description="Regimen B",
                                 meaning=NCIT.C174978) )
        setattr(cls, "EICESS92:HR/EVAIA",
                PermissibleValue(text="EICESS92:HR/EVAIA",
                                 description="Regimen B, Arm II",
                                 meaning=NCIT.C174987) )
        setattr(cls, "EICESS92:HR/VAIA",
                PermissibleValue(text="EICESS92:HR/VAIA",
                                 description="Regimen B, Arm I",
                                 meaning=NCIT.C174986) )
        setattr(cls, "EICESS92:SR/VACA",
                PermissibleValue(text="EICESS92:SR/VACA",
                                 description="Regimen A, Arm II",
                                 meaning=NCIT.C174985) )
        setattr(cls, "EICESS92:SR/VAIA",
                PermissibleValue(text="EICESS92:SR/VAIA",
                                 description="Regimen A, Arm I",
                                 meaning=NCIT.C174984) )
        setattr(cls, "HOD05, Experimental",
                PermissibleValue(text="HOD05, Experimental",
                                 description="Participants receive 12 weeks of Stanford V chemotherapy which includes Adriamycin®, Vinblastine, Nitrogen Mustard (or Cyclophosphamide), Vincristine, Bleomycin, Etoposide, Prednisone, and G-CSF. After completion of 12 weeks of Stanford V chemotherapy, participants receive radiotherapy.") )
        setattr(cls, "CHEMO-ZOL",
                PermissibleValue(text="CHEMO-ZOL",
                                 description="A treatment arm for patients receiving chemotherapy in combination with zoledronic acid.",
                                 meaning=NCIT.C186777) )
        setattr(cls, "DOX-IFOS",
                PermissibleValue(text="DOX-IFOS",
                                 description="A regimen consisting of doxorubicin and ifosfamide used for the treatment of unresectable soft tissue sarcoma.",
                                 meaning=NCIT.C63686) )
        setattr(cls, "MAP-GR",
                PermissibleValue(text="MAP-GR",
                                 description="A control arm for patients receiving a regimen of methotrexate, doxorubicin and cisplatin (MAP) after good response to the MAP regimen pre-operatively.",
                                 meaning=NCIT.C186769) )
        setattr(cls, "MAP-IE-PR",
                PermissibleValue(text="MAP-IE-PR",
                                 description="An experimental treatment arm for patients receiving a regimen of methotrexate, doxorubicin and cisplatin (MAP) plus a regimen of ifosfamide and etoposide (IE) post-operatively after poor response to the MAP regimen pre-operatively.",
                                 meaning=NCIT.C186772) )
        setattr(cls, "MAP-IFN-GR",
                PermissibleValue(text="MAP-IFN-GR",
                                 description="An experimental treatment arm for patients receiving a regimen of methotrexate, doxorubicin and cisplatin (MAP) plus interferon (IFN) post-operatively after good response to the MAP regimen pre-operatively.",
                                 meaning=NCIT.C186770) )
        setattr(cls, "MAP-NR",
                PermissibleValue(text="MAP-NR",
                                 description="A control arm for patients receiving a regimen of methotrexate, doxorubicin and cisplatin (MAP) with no response.",
                                 meaning=NCIT.C186773) )
        setattr(cls, "MAP-PR",
                PermissibleValue(text="MAP-PR",
                                 description="A control arm for patients receiving a regimen of methotrexate, doxorubicin and cisplatin (MAP) after poor response to the MAP regimen pre-operatively.",
                                 meaning=NCIT.C186771) )
        setattr(cls, "POSTOP-CHEMO",
                PermissibleValue(text="POSTOP-CHEMO",
                                 description="A treatment arm for patients receiving postoperative chemotherapy.",
                                 meaning=NCIT.C186775) )
        setattr(cls, "POSTOP-CHEMO-MIF",
                PermissibleValue(text="POSTOP-CHEMO-MIF",
                                 description="A treatment arm for patients receiving mifepristone as part of the postoperative chemotherapy.",
                                 meaning=NCIT.C186776) )
        setattr(cls, "REG-ACTIVE",
                PermissibleValue(text="REG-ACTIVE",
                                 description="An experimental treatment arm for patients receiving regorafenib as the active drug.",
                                 meaning=NCIT.C186778) )
        setattr(cls, "REG-PLACEBO",
                PermissibleValue(text="REG-PLACEBO",
                                 description="A control arm for patients receiving placebo instead of the experimental drug regorafenib.",
                                 meaning=NCIT.C186779) )

class EnrolledStatusEnum(EnumDefinitionImpl):

    Enrolled = PermissibleValue(text="Enrolled",
                                       description="The study subject is enrolled.",
                                       meaning=NCIT.C142715)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="EnrolledStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Enrolled",
                PermissibleValue(text="Not Enrolled",
                                 description="The study subject is not enrolled.",
                                 meaning=NCIT.C168929) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class DataSourceEnum(EnumDefinitionImpl):

    Registry = PermissibleValue(text="Registry",
                                       description="Cancer registries gather a wide variety of specific information on cancer patients that can be analyzed to identify health disparity trends in cancer incidence, mortality and patient survival.",
                                       meaning=NCIT.C15753)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="DataSourceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Therapeutic Trial",
                PermissibleValue(text="Therapeutic Trial",
                                 description="A clinical study that involves administering of exposure to the agent/agents to subjects with particular disease to elucidate the most appropriate treatment for a specific medical condition, or to prolong or improve the patient's life.",
                                 meaning=NCIT.C39536) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class StudyPhaseEnum(EnumDefinitionImpl):

    Pilot = PermissibleValue(text="Pilot",
                                 description="The initial study examining a new method or treatment.",
                                 meaning=NCIT.C15303)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="StudyPhaseEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Phase 1",
                PermissibleValue(text="Phase 1",
                                 description="A clinical research protocol designed to test a new biomedical intervention in a small group of people for the first time. A Phase I trial can be to establish the toxicity of a new treatment with escalating intensity of the treatment administered and/or to determine the side effects of a new treatment for a particular indication in subjects.",
                                 meaning=NCIT.C15600) )
        setattr(cls, "Phase 2",
                PermissibleValue(text="Phase 2",
                                 description="A clinical research protocol designed to study a biomedical or behavioral intervention in a larger group of people (several hundred), to evaluate the drug's effectiveness for a particular indication in patients with the disease or condition under study, and to determine the common short-term side effects and risks associated with the intervention.",
                                 meaning=NCIT.C15601) )
        setattr(cls, "Phase 3",
                PermissibleValue(text="Phase 3",
                                 description="A clinical research protocol designed to investigate the efficacy of the biomedical or behavioral intervention in large groups of human subjects (from several hundred to several thousand), to confirm efficacy, to monitor adverse reactions to the new medication or treatment regimen with respect to long-term use and by comparing the intervention to other standard or experimental interventions as well as to a placebo.",
                                 meaning=NCIT.C15602) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class StudyTypeEnum(EnumDefinitionImpl):

    Frontline = PermissibleValue(text="Frontline",
                                         description="A clinical trial for previously untreated patients that studies the use of a first line of treatment.",
                                         meaning=NCIT.C185306)
    Retrieval = PermissibleValue(text="Retrieval",
                                         description="A trial to assess the efficacy of reinduction therapy.",
                                         meaning=NCIT.C185307)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="StudyTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class EfsCensorStatusEnum(EnumDefinitionImpl):

    Censored = PermissibleValue(text="Censored",
                                       description="Subject is censored (i.e. has had no events(s))")
    Event = PermissibleValue(text="Event",
                                 description="Subject has had one or more events")
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="EfsCensorStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Not Censored",
                PermissibleValue(text="Not Censored",
                                 description="Subject has had one or more events") )

class RandomizedStatusEnum(EnumDefinitionImpl):

    Randomized = PermissibleValue(text="Randomized",
                                           description="The allocation of individuals to groups by chance, especially in order to control the variables in an experiment.",
                                           meaning=NCIT.C25196)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="RandomizedStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Non-Randomized",
                PermissibleValue(text="Non-Randomized",
                                 description="A clinical trial in which participants may choose or be assigned into groups by researchers. Their assignment is not random.",
                                 meaning=NCIT.C93043) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TimePeriodTypeEnum(EnumDefinitionImpl):

    Course = PermissibleValue(text="Course",
                                   description="The type of protocol treatment course administered.",
                                   meaning=NCIT.C168807)

    _defn = EnumDefinition(
        name="TimePeriodTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Disease Phase",
                PermissibleValue(text="Disease Phase",
                                 description="The stage or period of an individual's disease.",
                                 meaning=NCIT.C168878) )

class DiseasePhaseEnum(EnumDefinitionImpl):

    Relapse = PermissibleValue(text="Relapse",
                                     description="The return of a disease after a period of remission.",
                                     meaning=NCIT.C38155)
    Refractory = PermissibleValue(text="Refractory",
                                           description="Not responding to treatment.",
                                           meaning=NCIT.C38014)
    Progression = PermissibleValue(text="Progression",
                                             description="The worsening of a disease over time.",
                                             meaning=NCIT.C17747)

    _defn = EnumDefinition(
        name="DiseasePhaseEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Initial Diagnosis",
                PermissibleValue(text="Initial Diagnosis",
                                 description="The first diagnosis of the individual's condition.",
                                 meaning=NCIT.C156813) )
        setattr(cls, "Post-Mortem",
                PermissibleValue(text="Post-Mortem",
                                 description="Occuring or performed after the death of the patient.") )
        setattr(cls, "Tumor Surveillance",
                PermissibleValue(text="Tumor Surveillance",
                                 description="Period of time from diagnosis of cancer predisposition syndrome to development of first cancer") )
        setattr(cls, "Relapse/Progression",
                PermissibleValue(text="Relapse/Progression",
                                 description="Either the return of the disease or the progression of the disease.",
                                 meaning=NCIT.C174991) )

class CourseEnum(EnumDefinitionImpl):

    Prephase = PermissibleValue(text="Prephase",
                                       description="A chemotherapy treatment administered prior to the definitive chemotherapy treatment.",
                                       meaning=NCIT.C168826)
    Induction = PermissibleValue(text="Induction",
                                         description="The first choice of treatment for a particular type of cancer.",
                                         meaning=NCIT.C158876)
    Intensification = PermissibleValue(text="Intensification",
                                                     description="A second round of intense chemotherapy as part of consolidation therapy.",
                                                     meaning=NCIT.C173105)
    Consolidation = PermissibleValue(text="Consolidation",
                                                 description="Treatment that is given after initial therapy to kill any remaining cancer cells.",
                                                 meaning=NCIT.C15679)
    Maintenance = PermissibleValue(text="Maintenance",
                                             description="Continuation of treatment for an extended period of time to prevent relapse.",
                                             meaning=NCIT.C15688)
    Continuation = PermissibleValue(text="Continuation",
                                               description="A period in a clinical study during which subjects receive continuation therapy. This therapy is usually different from the therapy given during the induction phase and administered over a longer period of time.",
                                               meaning=NCIT.C123452)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Chemoradiotherapy = PermissibleValue(text="Chemoradiotherapy",
                                                         description="Treatment that combines chemotherapy with radiation therapy. Chemoradiation can be concurrent or sequential.",
                                                         meaning=NCIT.C94626)
    Chemotherapy = PermissibleValue(text="Chemotherapy",
                                               description="The use of synthetic or naturally-occurring chemicals for the treatment of diseases.",
                                               meaning=NCIT.C15632)
    Chemoimmunotherapy = PermissibleValue(text="Chemoimmunotherapy",
                                                           description="Chemotherapy combined with immunotherapy. Chemotherapy uses different drugs to kill or slow the growth of cancer cells; immunotherapy uses treatments to stimulate or restore the ability of the immune system to fight cancer.",
                                                           meaning=NCIT.C94251)
    Immunotherapy = PermissibleValue(text="Immunotherapy",
                                                 description="Therapy designed to induce changes in a patient's immune status in order to treat disease.",
                                                 meaning=NCIT.C15262)
    Adjuvant = PermissibleValue(text="Adjuvant",
                                       description="Chemotherapy that is administered subsequent to the main treatment plan to minimize or prevent disease recurrence.",
                                       meaning=NCIT.C15360)

    _defn = EnumDefinition(
        name="CourseEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Stem Cell Transplant Conditioning",
                PermissibleValue(text="Stem Cell Transplant Conditioning",
                                 description="A regimen that can be used as a conditioning regimen for hematopoietic stem cell transplantation (HSCT).",
                                 meaning=NCIT.C168794) )
        setattr(cls, "Interim Maintenance",
                PermissibleValue(text="Interim Maintenance",
                                 description="A less intense phase of chemotherapy in between each course of delayed intensification.",
                                 meaning=NCIT.C178069) )
        setattr(cls, "Delayed Intensification",
                PermissibleValue(text="Delayed Intensification",
                                 description="A repeat of the first two months of induction and consolidation chemotherapy in high-risk and very-high-risk ALL protocols with the goal of eliminating residual drug-resistant cells",
                                 meaning=NCIT.C178270) )
        setattr(cls, "Investigational Agent",
                PermissibleValue(text="Investigational Agent",
                                 description="A new drug or biological drug that is used in a clinical investigation. The term also includes a biological product that is used in vitro for diagnostic purposes.",
                                 meaning=NCIT.C49135) )
        setattr(cls, "Palliative Treatment",
                PermissibleValue(text="Palliative Treatment",
                                 description="The patient- and family-centered active holistic care of patients with advanced, progressive disease. Essential components of Palliative Care are: pain and symptom control, communication regarding treatment and alternatives, prognosis, and available services, rehabilitation services, care that addresses treatment and palliative concerns, intellectual, emotional, social, and spiritual needs, terminal care, support in bereavement. The goal of Palliative Care is an achievement of the best quality of life for patients and their families.",
                                 meaning=NCIT.C15292) )
        setattr(cls, "Chemotherapy Window",
                PermissibleValue(text="Chemotherapy Window",
                                 description="Chemotherapy that is administered prior to radiation therapy.") )
        setattr(cls, "Radiation Therapy",
                PermissibleValue(text="Radiation Therapy",
                                 description="Treatment of a disease by means of exposure of the target or the whole body to radiation. Radiation therapy is often used as part of curative therapy and occasionally as a component of palliative treatment for cancer. Other uses include total body irradiation prior to transplantation.",
                                 meaning=NCIT.C15313) )
        setattr(cls, "Bridge/Preconsolidation",
                PermissibleValue(text="Bridge/Preconsolidation",
                                 description="Between induction and consolidation treatments.") )
        setattr(cls, "Post-consolidation",
                PermissibleValue(text="Post-consolidation",
                                 description="After treatment or cancer immunotherapy.") )
        setattr(cls, "Chemotherapy Alone",
                PermissibleValue(text="Chemotherapy Alone",
                                 description="The use of synthetic or naturally-occurring chemicals for the treatment of diseases.",
                                 meaning=NCIT.C15632) )
        setattr(cls, "Neo-Adjuvant",
                PermissibleValue(text="Neo-Adjuvant",
                                 description="Therapy administered prior to the initial therapy.",
                                 meaning=NCIT.C158708) )

class AgePrecisionEnum(EnumDefinitionImpl):

    Approximate = PermissibleValue(text="Approximate",
                                             description="Not quite exact or correct; almost exact or correct.",
                                             meaning=NCIT.C45828)
    Exact = PermissibleValue(text="Exact",
                                 description="Marked by strict and particular and complete accordance with fact.",
                                 meaning=NCIT.C86021)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AgePrecisionEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ExamTypeEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="ExamTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Diagnostic Evaluation, Clinic and/or EUA",
                PermissibleValue(text="Diagnostic Evaluation, Clinic and/or EUA",
                                 description="A diagnostic assessment is a clinical or under anesthesia evaluation provided by a licensed professional in order to gather information to determine appropriate treatment based on the initial problem, current mental status and the diagnostic impression.",
                                 meaning=NCIT.C156813) )
        setattr(cls, "Subsequent, Clinic",
                PermissibleValue(text="Subsequent, Clinic",
                                 description="A clinical evaluation after the patient has received active treatment of the injury and is receiving routine care for the injury during the healing or recovery phase. ") )
        setattr(cls, "Subsequent, EUA",
                PermissibleValue(text="Subsequent, EUA",
                                 description="A evaluation under anesthesia after the patient has received active treatment of the injury and is receiving routine care for the injury during the healing or recovery phase",
                                 meaning=NCIT.C17747) )

class OffTypeEnum(EnumDefinitionImpl):

    Study = PermissibleValue(text="Study",
                                 description="No longer participating in a study; not being followed and will not be retreated.",
                                 meaning=NCIT.C29851)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="OffTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Protocol Therapy",
                PermissibleValue(text="Protocol Therapy",
                                 description="No longer receiving protocol therapy.",
                                 meaning=NCIT.C173257) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ReasonOffEnum(EnumDefinitionImpl):

    Death = PermissibleValue(text="Death",
                                 description="Specifies whether the life of an entity has ceased.",
                                 meaning=NCIT.C93546)
    Relapse = PermissibleValue(text="Relapse",
                                     description="The return of a disease after a period of remission.",
                                     meaning=NCIT.C38155)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Ineligible = PermissibleValue(text="Ineligible",
                                           description="The state or quality of being disqualified by law, rule, or provision.",
                                           meaning=NCIT.C40412)
    Toxicity = PermissibleValue(text="Toxicity",
                                       description="The finding of bodily harm due to the poisonous effects of something.",
                                       meaning=NCIT.C27990)

    _defn = EnumDefinition(
        name="ReasonOffEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Lost to Follow-Up",
                PermissibleValue(text="Lost to Follow-Up",
                                 description="The subject was not available for follow-up procedures.",
                                 meaning=NCIT.C70740) )
        setattr(cls, "Completion of Follow-Up",
                PermissibleValue(text="Completion of Follow-Up",
                                 description="The follow-up protocols were completed.",
                                 meaning=NCIT.C178071) )
        setattr(cls, "Completion of Planned Therapy",
                PermissibleValue(text="Completion of Planned Therapy",
                                 description="The end of the planned treatment.",
                                 meaning=NCIT.C168935) )
        setattr(cls, "Physician Decision",
                PermissibleValue(text="Physician Decision",
                                 description="A position, opinion or judgment reached after consideration by a physician with reference to subject.",
                                 meaning=NCIT.C48250) )
        setattr(cls, "Withdrawal of Consent",
                PermissibleValue(text="Withdrawal of Consent",
                                 description="When the permission to do something is rescinded or withdrawn.",
                                 meaning=NCIT.C48271) )
        setattr(cls, "Subject/Guardian Refused Further Treatment",
                PermissibleValue(text="Subject/Guardian Refused Further Treatment",
                                 description="The subject or their guardian has refused further treatment.",
                                 meaning=NCIT.C91752) )
        setattr(cls, "Subject Non-Compliance",
                PermissibleValue(text="Subject Non-Compliance",
                                 description="The subject or their guardian has refused further treatment.",
                                 meaning=NCIT.C91752) )
        setattr(cls, "Failure to Attain Remission",
                PermissibleValue(text="Failure to Attain Remission",
                                 description="Remission status was not attained.",
                                 meaning=NCIT.C178072) )
        setattr(cls, "Adverse Event",
                PermissibleValue(text="Adverse Event",
                                 description="Any unfavorable or unintended disease, sign, or symptom (including an abnormal laboratory finding) that is temporally associated with the use of a medical treatment or procedure, and that may or may not be considered related to the medical treatment or procedure. Such events can be related to the intervention, dose, route of administration, patient, or caused by an interaction with another drug(s) or procedure(s).",
                                 meaning=NCIT.C41331) )
        setattr(cls, "Secondary Malignancy",
                PermissibleValue(text="Secondary Malignancy",
                                 description="A malignant neoplasm that arises from a pre-existing lower grade lesion, or as a result of a primary lesion that has spread to secondary sites, or due to a complication of a cancer treatment.",
                                 meaning=NCIT.C4968) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Disease Progression",
                PermissibleValue(text="Disease Progression",
                                 description="The worsening of a disease over time.",
                                 meaning=NCIT.C17747) )
        setattr(cls, "Study Discontinuation",
                PermissibleValue(text="Study Discontinuation",
                                 description="The act of concluding participation by an enrolled subject prior to completion of all protocol-required elements in a trial. NOTE: Four categories of discontinuation are distinguished: a) dropout: Active discontinuation by a subject (also a noun referring to such a discontinued subject); b) investigator initiated discontinuation (e.g., for cause); c) loss to follow-up: cessation of participation without notice or action by the subject; d) sponsor initiated discontinuation. Note that subject discontinuation does not necessarily imply exclusion of subject data from analysis. "Termination of subject" has a history of synonymous use, but is now considered nonstandard. [After ICH E3, section 10.1 and FDA Guidance for Industry: Submission of Abbreviated Reports & Synopses in Support of Marketing Applications, IV A]",
                                 meaning=NCIT.C142444) )

class ConditionEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Schwannomatosis = PermissibleValue(text="Schwannomatosis",
                                                     description="Rare genetic disorder caused by mutations in the SMARCB1 and LZTR1 genes. It is characterized by the presence of multiple Schwannomas.",
                                                     meaning=NCIT.C6557)
    Clubfoot = PermissibleValue(text="Clubfoot",
                                       description="The most common congenital deformation of the foot, occurring in 1 of 1,000 live births. The most common form is talipes equinovarus, where the deformed foot is turned downward and inward sharply.",
                                       meaning=NCIT.C84641)
    Gastroschisis = PermissibleValue(text="Gastroschisis",
                                                 description="A congenital birth defect characterized by the exposure of the fetal intestines outside the abdominal wall through an abdominal wall opening.",
                                                 meaning=NCIT.C84725)
    Hemihypertrophy = PermissibleValue(text="Hemihypertrophy",
                                                     description="A finding indicating the presence of greater than normal asymmetry between the right and left sides of the body. The asymmetry may be manifested in the entire side or part of it.",
                                                     meaning=NCIT.C88541)
    Psoriasis = PermissibleValue(text="Psoriasis",
                                         description="An autoimmune condition characterized by red, well-delineated plaques with silvery scales that are usually on the extensor surfaces and scalp. They can occasionally present with these manifestations: pustules; erythema and scaling in intertriginous areas, and erythroderma, that are often distributed on extensor surfaces and scalp.",
                                         meaning=NCIT.C3346)
    Scleroderma = PermissibleValue(text="Scleroderma",
                                             description="A localized or systemic chronic and progressive autoimmune disorder characterized by thickening of the skin and the connective tissues. Localized scleroderma affects only the skin. Systemic scleroderma affects internal organs, including the heart, lungs, gastrointestinal tract, and kidneys.",
                                             meaning=NCIT.C26746)
    Vitiligo = PermissibleValue(text="Vitiligo",
                                       description="Generalized well circumscribed patches of leukoderma that are generally distributed over symmetric body locations and is due to autoimmune destruction of melanocytes.",
                                       meaning=NCIT.C26915)
    Cherubism = PermissibleValue(text="Cherubism",
                                         description="A rare autosomal dominant inherited disorder usually caused by mutations in the SH3BP2 gene. It is characterized by a prominent lower part of the face due to bilateral replacement of the mandibular or maxillary bones by tumors. The tumors contain osteoclast-like cells admixed with spindle-shaped mononuclear stromal cells. With time, the tumors become more fibrotic and less osteoclast-rich.",
                                         meaning=NCIT.C84630)
    Retinoblastoma = PermissibleValue(text="Retinoblastoma",
                                                   description="A malignant tumor that originates in the nuclear layer of the retina. As the most common primary tumor of the eye in children, retinoblastoma is still relatively uncommon, accounting for only 1% of all malignant tumors in pediatric patients. Approximately 95% of cases are diagnosed before age 5. These tumors may be multifocal, bilateral, congenital, inherited, or acquired. Seventy-five percent of retinoblastomas are unilateral; 60% occur sporadically. A predisposition to retinoblastoma has been associated with 13q14 cytogenetic abnormalities. Patients with the inherited form also appear to be at increased risk for secondary nonocular malignancies such as osteosarcoma, malignant fibrous histiocytoma, and fibrosarcoma.",
                                                   meaning=NCIT.C7541)
    Melanoma = PermissibleValue(text="Melanoma",
                                       description="A malignant, usually aggressive tumor composed of atypical, neoplastic melanocytes. Most often, melanomas arise in the skin (cutaneous melanomas) and include the following histologic subtypes: superficial spreading melanoma, nodular melanoma, acral lentiginous melanoma, and lentigo maligna melanoma. Cutaneous melanomas may arise from acquired or congenital melanocytic or dysplastic nevi. Melanomas may also arise in other anatomic sites including the gastrointestinal system, eye, urinary tract, and reproductive system. Melanomas frequently metastasize to lymph nodes, liver, lungs, and brain.",
                                       meaning=NCIT.C3224)
    Osteosarcoma = PermissibleValue(text="Osteosarcoma",
                                               description="A usually aggressive malignant bone-forming mesenchymal neoplasm, predominantly affecting adolescents and young adults. It usually involves bones and less frequently extraosseous sites. It often involves the long bones (particularly distal femur, proximal tibia, and proximal humerus). Pain with or without a palpable mass is the most frequent clinical symptom. It may spread to other anatomic sites, particularly the lungs.",
                                               meaning=NCIT.C9145)
    Liposarcoma = PermissibleValue(text="Liposarcoma",
                                             description="A usually painless malignant tumor that arises from adipose tissue. Microscopically, it may contain a spectrum of neoplastic adipocytes ranging from lipoblasts to pleomorphic malignant adipocytes. Morphologic variants include: well differentiated, dedifferentiated, pleomorphic, and myxoid liposarcoma. The metastatic potential is higher in less differentiated tumors.",
                                             meaning=NCIT.C3194)
    Rhabdomyosarcoma = PermissibleValue(text="Rhabdomyosarcoma",
                                                       description="A rare aggressive malignant mesenchymal neoplasm arising from skeletal muscle. It usually occurs in children and young adults. Only a small percentage of tumors arise in the skeletal muscle of the extremities. The majority arise in other anatomic sites.",
                                                       meaning=NCIT.C3359)

    _defn = EnumDefinition(
        name="ConditionEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Trisomy 21",
                PermissibleValue(text="Trisomy 21",
                                 description="A chromosomal abnormality consisting of the presence of a third copy of chromosome 21 in somatic cells.",
                                 meaning=NCIT.C43224) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Trisomy 21 Mosaicism",
                PermissibleValue(text="Trisomy 21 Mosaicism",
                                 description="The presence of cells with and without three copies of chromosome 21 in either somatic or germinal tissue.",
                                 meaning=NCIT.C142099) )
        setattr(cls, "Acute Lymphoblastic Leukemia Susceptibility - PAX5",
                PermissibleValue(text="Acute Lymphoblastic Leukemia Susceptibility - PAX5",
                                 description="An inherited condition caused by mutation(s) in the PAX5 gene, encoding paired box protein Pax-5. The condition is characterized by an increased risk of developing B-cell acute lymphoblastic leukemia.",
                                 meaning=NCIT.C176907) )
        setattr(cls, "ANKRD26-Related Thrombocytopenia and Leukemia Predisposition",
                PermissibleValue(text="ANKRD26-Related Thrombocytopenia and Leukemia Predisposition",
                                 description="An autosomal dominant condition caused by mutation(s) in the ANKRD26 gene, encoding ankyrin repeat domain-containing protein 26. It is characterized by moderate thrombocytopenia and an increased risk of developing myelodysplastic syndrome/acute myeloid leukemia.",
                                 meaning=NCIT.C178387) )
        setattr(cls, "Ataxia Telangiectasia Syndrome",
                PermissibleValue(text="Ataxia Telangiectasia Syndrome",
                                 description="Rare hereditary disease characterized by extreme sensitivity to ionizing radiation or radiomimetic drugs because of a defect in DNA repair. AT heterozygosity is estimated to occur in more than 2% of the U.S. population; heterozygotes exhibit increased radiation sensitivity and are at increased risk for several types of cancer. The normal version of the gene that is defective in AT appears to activate the p53-dependent response to DNA damage.",
                                 meaning=NCIT.C2887) )
        setattr(cls, "Ataxia-Pancytopenia Syndrome",
                PermissibleValue(text="Ataxia-Pancytopenia Syndrome",
                                 description="An inherited condition caused by autosomal dominant mutation(s) in the SAMD9L gene, encoding sterile alpha motif domain-containing protein 9-like. The condition is characterized by cerebellar ataxia, variable hematologic cytopenias, and predisposition to bone marrow failure and myeloid leukemia.",
                                 meaning=NCIT.C176909) )
        setattr(cls, "Attenuated Familial Adenomatous Polyposis",
                PermissibleValue(text="Attenuated Familial Adenomatous Polyposis",
                                 description="A rare genetic syndrome with an autosomal dominant pattern of inheritance. It was formerly called hereditary flat adenoma syndrome (HFAS) but is now recognized as an attenuated variant of familial adenomatous polyposis (FAP). It is most commonly associated with mutations in the APC gene specifically: exons 1-5, exon 9 and in the distal 3' terminus. Clinical presentation occurs in the middle decades and is characterized by the proximal development of multiple (but less than 100), non-polypoid colonic adenomas. Clinical progression to colorectal cancer may occur later in life but the risk is less than with classic FAP.",
                                 meaning=NCIT.C6729) )
        setattr(cls, "BAP1 Tumor Predisposition Syndrome",
                PermissibleValue(text="BAP1 Tumor Predisposition Syndrome",
                                 description="A syndrome caused by germline mutations in the BAP1 gene. It is inherited in an autosomal dominant pattern. Individuals carrying heterozygous BAP1 mutations have an increased risk of developing various tumor types, most commonly BAP1-inactivated nevi /melanocytomas of the skin, uveal and cutaneous melanomas, peritoneal and pleural mesotheliomas, clear cell renal cell carcinoma, and basal cell carcinoma. (WHO 2018)",
                                 meaning=NCIT.C172639) )
        setattr(cls, "Beckwith-Wiedemann Syndrome/Isolated Hemihyperplasia",
                PermissibleValue(text="Beckwith-Wiedemann Syndrome/Isolated Hemihyperplasia",
                                 description=" A genetic syndrome caused by abnormalities in chromosome 11. It is characterized by large birth weight, macroglossia, umbilical hernia, ear abnormalities, and hypoglycemia. Patients with this syndrome have an increased risk of developing embryonal tumors (gonadoblastoma, hepatoblastoma, Wilms tumor, rhabdomyosarcoma) and adrenal cortex carcinomas.",
                                 meaning=NCIT.C34415) )
        setattr(cls, "Birt-Hogg-Dube Syndrome",
                PermissibleValue(text="Birt-Hogg-Dube Syndrome",
                                 description="A rare genetic syndrome with an autosomal dominant pattern of inheritance. It is caused by a mutation in the FLCN gene which encodes the protein folliculin. Clinical signs include multiple benign growths of the skin and lungs that begin to manifest in the second or third decade of life. The clinical course is characterized by the progressive growth of new and existing neoplasms. In those with mutations in both copies of FLCN, the kidneys may also be affected by the growth of benign or malignant neoplasms.",
                                 meaning=NCIT.C28244) )
        setattr(cls, "Bloom Syndrome",
                PermissibleValue(text="Bloom Syndrome",
                                 description="An autosomal dominant inherited syndrome caused by mutations in the BRCA1 or BRCA2 genes. Patients are at high risk of developing breast cancer, particularly before the age of fifty, high risk of developing a second primary breast cancer, and high risk of developing both breast and ovarian cancer.",
                                 meaning=NCIT.C2903) )
        setattr(cls, "Bohring-Opitz Syndrome",
                PermissibleValue(text="Bohring-Opitz Syndrome",
                                 description="An autosomal dominant condition caused by mutation(s) in the ASXL1 gene, encoding putative polycomb group protein ASXL1. It is characterized by severe intrauterine growth retardation, profound mental retardation, craniofacial dysmorphisms, and flexion deformities of the upper limbs.",
                                 meaning=NCIT.C131533) )
        setattr(cls, "Carney Complex",
                PermissibleValue(text="Carney Complex",
                                 description="An autosomal dominant disorder most often caused by mutations in the PRKAR1A gene. It is characterized by the presence of myxomas in the heart and skin, skin hyperpigmentation, increased endocrine activity and melanotic schwannomas.",
                                 meaning=NCIT.C4705) )
        setattr(cls, "CBL Syndrome",
                PermissibleValue(text="CBL Syndrome",
                                 description="An inherited condition caused by autosomal dominant mutation(s) in the CBL gene, encoding E3 ubiquitin-protein ligase CBL. The condition resembles Noonan syndrome 1 and is characterized by facial dysmorphism, a wide spectrum of cardiac disease, reduced growth, variable cognitive deficits, and ectodermal and musculoskeletal anomalies. Affected individuals may have an increased risk for certain malignancies, particularly juvenile myelomonocytic leukemia.",
                                 meaning=NCIT.C176942) )
        setattr(cls, "CDC73-Related Neoplastic Syndrome",
                PermissibleValue(text="CDC73-Related Neoplastic Syndrome",
                                 description="A group of autosomal dominant-inherited disorders caused by mutation(s) in the CDC73 gene, encoding parafibromin. These disorders are associated with hyperparathyroidism secondary to parathyroid neoplasms.",
                                 meaning=NCIT.C178382) )
        setattr(cls, "CDH1-Associated Breast Carcinoma Syndrome",
                PermissibleValue(text="CDH1-Associated Breast Carcinoma Syndrome",
                                 description="A cancer susceptibility syndrome caused by inactivating germline mutations of the CDH1 gene. It is associated with the development of lobular carcinoma of the breast. Females with mutation of the CDH1 gene have a 40% risk of developing lobular breast carcinoma.",
                                 meaning=NCIT.C176628) )
        setattr(cls, "CEBPA-Related Leukemia Predisposition",
                PermissibleValue(text="CEBPA-Related Leukemia Predisposition",
                                 description="An autosomal dominant condition caused by mutation(s) in the CEBPA gene, encoding CCAAT/enhancer-binding protein alpha. It is characterized by an increased risk of developing hematologic malignancies, primarily myeloid.",
                                 meaning=NCIT.C178379) )
        setattr(cls, "CHEK2-Associated Cancer Predisposition",
                PermissibleValue(text="CHEK2-Associated Cancer Predisposition",
                                 description="An autosomal dominant cancer predisposition syndrome caused by germline mutations of the CHEK2 gene. It is associated with breast carcinoma, gastric carcinoma, colorectal carcinoma, thyroid gland carcinoma, kidney carcinoma, prostate carcinoma, and non-Hodgkin lymphoma.",
                                 meaning=NCIT.C176588) )
        setattr(cls, "Congenital Amegakaryocytic Thrombocytopenia",
                PermissibleValue(text="Congenital Amegakaryocytic Thrombocytopenia",
                                 description="A rare, autosomal recessive inherited disorder caused by mutation in the c-Mpl gene. It is characterized by thrombocytopenia and absence of megakaryocytes. It presents with bleeding in the first month of life.",
                                 meaning=NCIT.C115207) )
        setattr(cls, "Constitutional Mismatch Repair Deficiency",
                PermissibleValue(text="Constitutional Mismatch Repair Deficiency",
                                 description="A rare childhood cancer predisposition syndrome caused by biallelic inheritance of mutations in MLH1, MSH2, MSH6, or PMS2 genes. It is characterized by the development of childhood cancers, usually hematological malignancies and/or brain tumors, and colorectal cancers with multiple intestinal polyps. The majority of patients show signs of neurofibromatosis type 1.",
                                 meaning=NCIT.C130202) )
        setattr(cls, "Costello Syndrome",
                PermissibleValue(text="Costello Syndrome",
                                 description="A genetic syndrome caused by mutations in the HRAS gene. It is characterized by developmental delay, mental retardation, loose skin folds, cardiomyopathy, tachycardia, and structural heart defects. Patients are at an increased risk of developing benign or malignant neoplasms.",
                                 meaning=NCIT.C84652) )
        setattr(cls, "Cowden Syndrome",
                PermissibleValue(text="Cowden Syndrome",
                                 description="An autosomal dominant hereditary syndrome characterized by a variety of hamartomas and neoplasms including verrucous skin lesions, fibromas of the oral cavity, facial trichilemmomas, hamartomatous colonic polyps, thyroid neoplasms, breast cancer, and dysplastic gangliocytomas of the cerebellum.",
                                 meaning=NCIT.C3076) )
        setattr(cls, "DDX41-Related Leukemia Predisposition",
                PermissibleValue(text="DDX41-Related Leukemia Predisposition",
                                 description="An autosomal dominant condition caused by mutation(s) in the DDX41 gene, encoding probable ATP-dependent RNA helicase DDX41. It is characterized by an increased risk of developing hematologic malignancies, including myeloid and lymphoid leukemias and lymphoma.",
                                 meaning=NCIT.C178380) )
        setattr(cls, "Diamond-Blackfan Anemia",
                PermissibleValue(text="Diamond-Blackfan Anemia",
                                 description="An inherited condition characterized by aplasia of the erythroid series only. The white cells and platelets are not affected. Patients develop anemia usually in infancy.",
                                 meaning=NCIT.C61236) )
        setattr(cls, "DICER1 Syndrome",
                PermissibleValue(text="DICER1 Syndrome",
                                 description="A rare, autosomal dominant inherited syndrome caused by mutations in the DICER1 gene. People with this syndrome are at an increased risk of developing pleuropulmonary blastoma, cystic nephroma, Sertoli-Leydig cell tumor of the ovary, and multinodular goiter.",
                                 meaning=NCIT.C123317) )
        setattr(cls, "Dyskeratosis Congenita",
                PermissibleValue(text="Dyskeratosis Congenita",
                                 description="A rare genetic disorder characterized by nail dystrophy, reticulated skin pigmentation especially on the neck and chest, and oral leukoplakia. In about half the cases mutations in the TERT, TERC, DKC1, or TINF2 genes are identified. Patients are at an increased risk of developing bone marrow failure, myelodysplastic syndrome, leukemia, or cancer, especially in the head and neck region.",
                                 meaning=NCIT.C111802) )
        setattr(cls, "ETV6-Related Thrombocytopenia and Leukemia Predisposition",
                PermissibleValue(text="ETV6-Related Thrombocytopenia and Leukemia Predisposition",
                                 description="An autosomal dominant condition caused by mutation(s) in the ETV6 gene, encoding transcription factor ETV6. It is characterized by an increased risk of developing thrombocytopenia and diverse hematologic malignancies, including myelodysplastic syndrome, acute myeloid leukemia, chronic myelomonocytic leukemia, B lymphoblastic leukemia, and plasma cell myeloma.",
                                 meaning=NCIT.C178386) )
        setattr(cls, "Familial Adenomatous Polyposis",
                PermissibleValue(text="Familial Adenomatous Polyposis",
                                 description="An autosomal dominant disorder, characterized by the presence of multiple adenomas in the colon and rectum. It is caused by a germline mutation in the adenomatous polyposis coli (APC) gene which is located on the long arm of chromosome 5. The adenomas are most often tubular, and they have the tendency to progress to adenocarcinoma. They can occur throughout the colon, but they tend to concentrate in the rectum and sigmoid colon. The colorectal adenomas are detected during endoscopic examination between the age of 10 and 20 years. The adenomas increase in size and numbers with age, and there is usually progression of one or more adenomas to adenocarcinoma. The mean age of development of adenocarcinoma is about 40 years. Signs include rectal bleeding and mucousy diarrhea.",
                                 meaning=NCIT.C3339) )
        setattr(cls, "Familial Gastrointestinal Stromal Tumor",
                PermissibleValue(text="Familial Gastrointestinal Stromal Tumor",
                                 description="An inherited condition caused by autosomal dominant mutation(s) in the KIT or PDGFRA genes, encoding mast/stem cell growth factor receptor Kit and platelet derived growth factor receptor alpha respectively. The condition is characterized by the occurrence of multiple gastrointestinal stromal tumors (GIST).",
                                 meaning=NCIT.C176906) )
        setattr(cls, "Familial Paraganglioma-Pheochromocytoma Syndrome",
                PermissibleValue(text="Familial Paraganglioma-Pheochromocytoma Syndrome",
                                 description="A hereditary cancer syndrome characterized by the development of multiple paragangliomas including pheochromocytomas. It is caused by mutations in SDHA, SDHB, SDHC, SDHD, and SDHAF2 genes.",
                                 meaning=NCIT.C190373) )
        setattr(cls, "Familial Platelet Disorder and AML Syndrome",
                PermissibleValue(text="Familial Platelet Disorder and AML Syndrome",
                                 description="An autosomal dominant condition caused by mutation(s) in the RUNX1 gene, encoding runt-related transcription factor 1. It is characterized by thrombocytopenia, abnormal platelet function, and a propensity to develop acute myeloid leukemia.",
                                 meaning=NCIT.C162696) )
        setattr(cls, "Fanconi Anemia",
                PermissibleValue(text="Fanconi Anemia",
                                 description="An autosomal recessive genetic disorder characterized by bone marrow failure, skeletal abnormalities, and an increased incidence of the development of neoplasias.",
                                 meaning=NCIT.C62505) )
        setattr(cls, "GATA2 Deficiency",
                PermissibleValue(text="GATA2 Deficiency",
                                 description="A condition of decreased or absent presence or activity of endothelial transcription factor GATA-2 protein. Deficiency of this protein is associated with immunodeficiency 21 and autosomal dominant and sporadic monocytopenia and mycobacterial infection syndrome (MonoMAC).",
                                 meaning=NCIT.C126349) )
        setattr(cls, "Genetic Predisposition to Melanoma",
                PermissibleValue(text="Genetic Predisposition to Melanoma",
                                 description="An inherited condition caused by mutation(s) in the CDKN2A or CDK4 genes, encoding cyclin-dependent kinase inhibitor 2A and cyclin-dependent kinase 4, respectively. The condition is characterized by an increased risk of developing melanoma.",
                                 meaning=NCIT.C179472) )
        setattr(cls, "Genetic Predisposition to Meningioma",
                PermissibleValue(text="Genetic Predisposition to Meningioma",
                                 description="An inherited condition caused by mutation(s) in the SMARCE1 gene, encoding SWI/SNF-related matrix-associated actin-dependent regulator of chromatin subfamily E member 1. The condition is characterized by an increased risk of developing meningioma.",
                                 meaning=NCIT.C179471) )
        setattr(cls, "Genetic Predisposition to Myofibromatosis",
                PermissibleValue(text="Genetic Predisposition to Myofibromatosis",
                                 description="An inherited condition caused by mutation(s) in the NOTCH3 or PDGFRB genes, encoding neurogenic locus notch homolog protein 3 and platelet-derived growth factor receptor beta, respectively. The condition is characterized by an increased risk of developing myofibroma.",
                                 meaning=NCIT.C179470) )
        setattr(cls, "Genetic Predisposition to Neuroblastoma",
                PermissibleValue(text="Genetic Predisposition to Neuroblastoma",
                                 description="An inherited condition caused by mutation(s) in the ALK or PHOX2B genes, encoding ALK tyrosine kinase receptor and paired mesoderm homeobox protein 2B, respectively. The condition is characterized by an increased risk of developing neuroblastoma.",
                                 meaning=NCIT.C179469) )
        setattr(cls, "Genetic Predisposition to Non-Syndromic Wilms Tumor",
                PermissibleValue(text="Genetic Predisposition to Non-Syndromic Wilms Tumor",
                                 description="A genetic predisposition to Wilms tumor due to germline mutation(s) in the REST, TRIM28, or CTR9 genes, encoding RE1-silencing transcription factor, transcription intermediary factor 1-beta, and RNA polymerase-associated protein CTR9 homolog, respectively.",
                                 meaning=NCIT.C178392) )
        setattr(cls, "Genetic Predisposition to Papillary Renal Cell Carcinoma",
                PermissibleValue(text="Genetic Predisposition to Papillary Renal Cell Carcinoma",
                                 description="An inherited condition caused by mutation(s) in the MET gene, encoding hepatocyte growth factor receptor. The condition is characterized by an increased risk of developing papillary renal cell carcinoma.",
                                 meaning=NCIT.C179473) )
        setattr(cls, "Hepatolenticular Degeneration",
                PermissibleValue(text="Hepatolenticular Degeneration",
                                 description="A rare autosomal recessive inherited disorder caused by mutations in the ATP7B gene. It is characterized by copper accumulation in the tissues, particularly brain and liver. It results in liver failure, neurologic, and psychotic manifestations.",
                                 meaning=NCIT.C84756) )
        setattr(cls, "Hereditary Breast and Ovarian Cancer Syndrome",
                PermissibleValue(text="Hereditary Breast and Ovarian Cancer Syndrome",
                                 description="A genetic condition that makes it more likely that a person will get breast, ovarian, and other cancers. HBOC is hereditary, meaning that it is caused by a mutation (genetic change) that can be passed down in families.") )
        setattr(cls, "Hereditary Leiomyomatosis and Renal Cell Carcinoma Syndrome",
                PermissibleValue(text="Hereditary Leiomyomatosis and Renal Cell Carcinoma Syndrome",
                                 description="An autosomal dominant inherited syndrome caused by germline mutations in the FH gene. It is characterized by predisposition to renal cell carcinoma, leiomyomas of the skin and uterus, and leiomyosarcoma of the uterus.",
                                 meaning=NCIT.C51302) )
        setattr(cls, "Hereditary Retinoblastoma",
                PermissibleValue(text="Hereditary Retinoblastoma",
                                 description="An inherited malignant tumor that originates in the nuclear layer of the retina affecting the RB1. A predisposition to retinoblastoma has been associated with 13q14 cytogenetic abnormalities affecting the RB1 gene. Patients with the inherited form appear to be at increased risk for secondary non-ocular malignancies such as osteosarcoma, malignant fibrous histiocytoma, and fibrosarcoma.",
                                 meaning=NCIT.C8495) )
        setattr(cls, "Juvenile Polyposis Syndrome",
                PermissibleValue(text="Juvenile Polyposis Syndrome",
                                 description="An autosomal dominant hereditary neoplastic syndrome. Mutations in the SMAD4 or BMPR1A genes have been identified in some patients. It is characterized by the presence of multiple juvenile polyps in the gastrointestinal tract.",
                                 meaning=NCIT.C7754) )
        setattr(cls, "Legius Syndrome",
                PermissibleValue(text="Legius Syndrome",
                                 description="An inherited condition caused by autosomal dominant mutation(s) in the SPRED1 gene, encoding sprouty-related, EVH1 domain-containing protein 1. The condition resembles neurofibromatosis type I but is less severe. Affected individuals may present with multiple cafe-au-lait spots, variable dysmorphic features, including hypertelorism or macrocephaly, lipomas, and mild learning disabilities or attention problems.",
                                 meaning=NCIT.C176941) )
        setattr(cls, "LEOPARD Syndrome",
                PermissibleValue(text="LEOPARD Syndrome",
                                 description="A genetic syndrome caused by mutations in the PTPN11 and RAF1 genes. It is characterized by the following abnormalities: multiple lentigines, electrocardiographic conduction abnormalities, ocular hypertelorism, pulmonary stenosis, abnormalities in genitalia, growth retardation, and deafness.",
                                 meaning=NCIT.C84820) )
        setattr(cls, "Li-Fraumeni Syndrome",
                PermissibleValue(text="Li-Fraumeni Syndrome",
                                 description="An autosomal dominant cancer predisposition syndrome caused by germline mutations of the TP53 gene. It is associated with breast carcinoma, choroid plexus carcinoma, adrenal cortex carcinoma, astrocytic tumors, medulloblastoma, soft tissue sarcoma, osteosarcoma, and leukemia.",
                                 meaning=NCIT.C3476) )
        setattr(cls, "Lymphoproliferative Syndrome 1/ITK Deficiency",
                PermissibleValue(text="Lymphoproliferative Syndrome 1/ITK Deficiency",
                                 description="An autosomal recessive immunodeficiency caused but mutation(s) in the ITK gene, encoding tyrosine-protein kinase ITK/TSK. It is characterized by the early childhood onset of Epstein-Barr virus (EBV)-associated immune dysregulation leading to lymphoma, lymphomatoid granulomatosis, hemophagocytic lymphohistiocytosis, and/or hypogammaglobulinemia.",
                                 meaning=NCIT.C126344) )
        setattr(cls, "Lynch Syndrome",
                PermissibleValue(text="Lynch Syndrome",
                                 description="An autosomal dominant hereditary neoplastic syndrome characterized by the development of colorectal carcinoma and a high risk of developing endometrial carcinoma, gastric carcinoma, ovarian carcinoma, renal pelvis carcinoma, and small intestinal carcinoma. Patients often develop colorectal carcinomas at an early age (mean, 45 years). In the majority of the cases the tumors arise from the proximal colon. At the molecular level, high-frequency microsatellite instability is present.",
                                 meaning=NCIT.C8494) )
        setattr(cls, "MIRAGE Syndrome",
                PermissibleValue(text="MIRAGE Syndrome",
                                 description="An autosomal dominant condition caused by mutation(s) in the SAMD9 gene, encoding sterile alpha motif domain-containing protein 9A. It is a syndromic condition comprising myelodysplasia, infection, restriction of growth, adrenal hypoplasia, genital abnormalities, and enteropathy.",
                                 meaning=NCIT.C147530) )
        setattr(cls, "Mosaic Variegated Aneuploidy Syndrome 1",
                PermissibleValue(text="Mosaic Variegated Aneuploidy Syndrome 1",
                                 description="An autosomal recessive genetic disorder caused by mutation(s) in the BUB1B gene, encoding mitotic checkpoint serine/threonine-protein kinase B. The condition is characterized by a predisposition to mitotic non-disjunction, resulting in a high percentage of aneuploid cells. The phenotype is variable and there is a predisposition to cancer.",
                                 meaning=NCIT.C128192) )
        setattr(cls, "Mulibrey Nanism",
                PermissibleValue(text="Mulibrey Nanism",
                                 description="An autosomal recessive inherited disorder caused by mutations in the TRIM37 gene. It is characterized by marked growth retardation and abnormalities in multiple organs including heart, liver, muscle, eyes, and brain.",
                                 meaning=NCIT.C84906) )
        setattr(cls, "Multiple Endocrine Neoplasia Type 1",
                PermissibleValue(text="Multiple Endocrine Neoplasia Type 1",
                                 description="Multiple endocrine neoplasia caused by inactivation of the tumor suppressor gene MEN-1. Patients may develop hyperparathyroidism and parathyroid gland adenomas, pituitary gland adenomas, pancreatic islet cell neoplasms, and carcinoid tumors.",
                                 meaning=NCIT.C3225) )
        setattr(cls, "Multiple Endocrine Neoplasia Type 2",
                PermissibleValue(text="Multiple Endocrine Neoplasia Type 2",
                                 description="Multiple endocrine neoplasia caused by mutation of the RET gene. It includes the following neoplastic processes: multiple endocrine neoplasia type 2A, multiple endocrine neoplasia type 2B, and hereditary thyroid gland medullary carcinoma.",
                                 meaning=NCIT.C123329) )
        setattr(cls, "Multiple Endocrine Neoplasia Type 4",
                PermissibleValue(text="Multiple Endocrine Neoplasia Type 4",
                                 description="An autosomal dominant tumor syndrome caused by germline CDKN1B mutations that result in a phenotype similar to that of multiple endocrine neoplasia type 1, characterized by endocrine neoplasms, particularly in the parathyroid glands, pituitary, and pancreas. (WHO 2017)",
                                 meaning=NCIT.C157449) )
        setattr(cls, "MUTYH-Associated Polyposis",
                PermissibleValue(text="MUTYH-Associated Polyposis",
                                 description="An autosomal recessive hereditary neoplastic syndrome caused by mutations in the MUTYH gene on chromosome 1p34.1. It is characterized by the presence of multiple colorectal polyps that may progress to carcinoma. Development of gastric and small intestinal polyps may also occur.",
                                 meaning=NCIT.C96520) )
        setattr(cls, "Neurofibromatosis Type 1",
                PermissibleValue(text="Neurofibromatosis Type 1",
                                 description="The most common type of neurofibromatosis. It is characterized clinically by cutaneous and subcutaneous tumors with patches of hyperpigmentation. The hyperpigmented skin areas, are present from birth and found anywhere on the body surface. They can vary markedly in size and color. The dark brown areas are called cafe-au-lait spots. The multiple cutaneous and subcutaneous tumors are nerve sheath tumors, called neurofibromas. They can develop anywhere along the peripheral nerve fibers. Neurofibromas can become quite large, causing a major disfigurement, eroding bone, and compressing various peripheral nerve structures. Type 1 neurofibromatosis has dominant inheritance, with a gene locus on the proximal long arm of chromosome 17.",
                                 meaning=NCIT.C3273) )
        setattr(cls, "Neurofibromatosis Type 2",
                PermissibleValue(text="Neurofibromatosis Type 2",
                                 description="An autosomal dominant disorder caused by mutations in the NF2 tumor suppressor gene. It is characterized by the development of peripheral and central nervous system tumors including acoustic schwannomas, neurofibromas, gliomas, and meningiomas.",
                                 meaning=NCIT.C3274) )
        setattr(cls, "Nevoid Basal Cell Carcinoma Syndrome",
                PermissibleValue(text="Nevoid Basal Cell Carcinoma Syndrome",
                                 description="An autosomal dominant genetic syndrome caused by abnormalities in the PTCH and SUFU gene. It is characterized by multiple basal cell carcinomas at a young age, odontogenic keratocysts, and skeletal defects (bifurcated and splayed ribs, fusion of vertebrae, spinal bifida). Patients with this syndrome may also develop medulloblastomas and ovarian fibromas.",
                                 meaning=NCIT.C2892) )
        setattr(cls, "Nijmegen Breakage Syndrome",
                PermissibleValue(text="Nijmegen Breakage Syndrome",
                                 description="A disorder, wherein unstable chromosomes have a tendency to break and become rearranged, characterized by microcephaly, stunted growth, subnormal mental development, cafe-au-lait spots, and immunodeficiency. The syndrome is named after the University of Nijmegen in the Netherlands. (JABL99)",
                                 meaning=NCIT.C4692) )
        setattr(cls, "Noonan Syndrome",
                PermissibleValue(text="Noonan Syndrome",
                                 description="A genetic syndrome caused by mutations in the PTPN11 gene (over 50% of the cases) or less frequently mutations in the SOS1, RAF1, or KRAS genes. It is characterized by short stature, webbed neck, hypertelorism, low-set ears, deafness, and thrombocytopenia or abnormal platelet function.",
                                 meaning=NCIT.C34854) )
        setattr(cls, "Noonan Syndrome-Like Disorder with Loose Anagen Hair",
                PermissibleValue(text="Noonan Syndrome-Like Disorder with Loose Anagen Hair",
                                 description="An inherited condition caused by autosomal dominant mutation(s) in the SHOC2 or PPP1CB genes, encoding leucine-rich repeat protein SHOC-2 and serine/threonine-protein phosphatase PP1-beta catalytic subunit, respectively. The condition is characterized by facial features similar to those seen in Noonan syndrome but may also include short stature, cognitive deficits, relative macrocephaly, small posterior fossa resulting in Chiari I malformation, hypernasal voice, cardiac defects, and ectodermal abnormalities, which typically presents as slow-growing, sparse, and/or unruly hair.",
                                 meaning=NCIT.C178129) )
        setattr(cls, "Oculocutaneous Albinism",
                PermissibleValue(text="Oculocutaneous Albinism",
                                 description="An autosomal recessive inherited disorder caused by mutations of the OCA2, SLC45A2, TYR and TYRP1 genes. It is characterized by hypopigmentation of the skin, hair, and eyes, resulting in very fair skin, white colored hair, and reduced pigmentation in the iris and retina. Individuals may have vision disturbances and photophobia.",
                                 meaning=NCIT.C84941) )
        setattr(cls, "Perlman Syndrome",
                PermissibleValue(text="Perlman Syndrome",
                                 description="A rare, autosomal recessive syndrome characterized by the presence of polyhydramnios, neonatal macrosomia, craniofacial abnormalities, nephroblastomatosis, and predisposition to Wilms tumor. The prognosis is poor.",
                                 meaning=NCIT.C103144) )
        setattr(cls, "Peutz-Jeghers Syndrome",
                PermissibleValue(text="Peutz-Jeghers Syndrome",
                                 description="An inherited condition characterized by generalized hamartomatous multiple polyposis of the intestinal tract. Transmitted in an autosomal dominant fashion, Peutz-Jeghers syndrome consistently involves the jejunum and is associated with melanin spots of the lips, buccal mucosa, and fingers. This syndrome is associated with abnormalities of chromosome 19. Also known as Jeghers-Peutz syndrome and Peutz's syndrome.",
                                 meaning=NCIT.C43324) )
        setattr(cls, "PIK3CA-Related Overgrowth Spectrum",
                PermissibleValue(text="PIK3CA-Related Overgrowth Spectrum",
                                 description="A group of rare disorders that are usually caused by somatic mutations in the PIK3CA gene, but may rarely be caused by de novo germline mutations. These disorders are typically characterized by sporadic overgrowth of parts of the body, intellectual disability, low muscle tone, and vascular malformations with congenital or early childhood onset. Representative examples include: fibroadipose hyperplasia, CLOVES syndrome, megalencephaly-capillary malformation syndrome, hemihyperplasia-multiple lipomatosis syndrome, hemimegalencephaly, and facial infiltrating lipomatosis.",
                                 meaning=NCIT.C178285) )
        setattr(cls, "Radial Aplasia-Thrombocytopenia Syndrome",
                PermissibleValue(text="Radial Aplasia-Thrombocytopenia Syndrome",
                                 description="A rare syndrome characterized by the presence of thrombocytopenia associated with bilateral absence of the radius bone.",
                                 meaning=NCIT.C99038) )
        setattr(cls, "Rhabdoid Tumor Predisposition Syndrome 1",
                PermissibleValue(text="Rhabdoid Tumor Predisposition Syndrome 1",
                                 description="Rhabdoid tumor predisposition syndrome caused by mutation(s) in the SMARCB1 gene, encoding SWI/SNF-related matrix-associated actin-dependent regulator of chromatin subfamily B member 1.",
                                 meaning=NCIT.C178393) )
        setattr(cls, "Rhabdoid Tumor Predisposition Syndrome 2",
                PermissibleValue(text="Rhabdoid Tumor Predisposition Syndrome 2",
                                 description="Rhabdoid tumor predisposition syndrome caused by mutation(s) in the SMARCA4 gene, encoding transcription activator BRG1.",
                                 meaning=NCIT.C178394) )
        setattr(cls, "Rothmund-Thompson Syndrome",
                PermissibleValue(text="Rothmund-Thompson Syndrome",
                                 description="Rhabdoid tumor predisposition syndrome caused by mutation(s) in the SMARCA4 gene, encoding transcription activator BRG1.",
                                 meaning=NCIT.C178394) )
        setattr(cls, "Rubinstein-Taybi Syndrome",
                PermissibleValue(text="Rubinstein-Taybi Syndrome",
                                 description="A rare genetic syndrome mapped to chromosome 16p13.3 and associated with mutations in the CREBBP gene. It is characterized by mental and growth retardation, distinctive facial features (prominent nose, low-set ears, microcephaly, and small mouth), and broad thumbs and great toes. Patients are at an increased risk of developing benign and malignant neoplasms, including nervous system neoplasms and malignant lymphoproliferative disorders.",
                                 meaning=NCIT.C75466) )
        setattr(cls, "SAMD9L-Related Myelodysplastic Syndrome Predisposition",
                PermissibleValue(text="SAMD9L-Related Myelodysplastic Syndrome Predisposition",
                                 description="An autosomal dominant condition caused by mutation(s) in the SAMD9L gene, encoding sterile alpha motif domain-containing protein 9-like. It is characterized by an increased risk of developing myelodysplastic syndrome.",
                                 meaning=NCIT.C178390) )
        setattr(cls, "Schinzel-Giedion Syndrome",
                PermissibleValue(text="Schinzel-Giedion Syndrome",
                                 description="An autosomal dominant disorder associated with mutation(s) in the SETBP1 gene, encoding SET-binding protein. It is characterized by unique facial features, including midface hypoplasia, skeletal abnormalities, and mental retardation.",
                                 meaning=NCIT.C129308) )
        setattr(cls, "Shwachman-Diamond Syndrome",
                PermissibleValue(text="Shwachman-Diamond Syndrome",
                                 description="A rare, autosomal recessive disorder characterized by exocrine pancreas insufficiency, skeletal abnormalities, bone marrow dysfunction, and an increased incidence of leukemia.",
                                 meaning=NCIT.C61235) )
        setattr(cls, "Simpson-Golabi-Behmel Syndrome",
                PermissibleValue(text="Simpson-Golabi-Behmel Syndrome",
                                 description="An X-linked recessive syndrome caused by mutation(s) in the GPC3, OFD1, or rarely the GPC4 gene, encoding glypican 3, oral-facial-digital syndrome 1 protein, and glypican 4, respectively. The condition is characterized by macrosomia, coarse facies, cryptorchidism, congenital heart, kidney, liver, spleen, and musculoskeletal abnormalities.",
                                 meaning=NCIT.C131002) )
        setattr(cls, "Sotos Syndrome",
                PermissibleValue(text="Sotos Syndrome",
                                 description="An autosomal dominant overgrowth syndrome caused by mutation(s) of the NSD1 or the NFIX gene, encoding H3 lysine-36 and H4 lysine-20 specific histone-lysine N-methyltransferase, and nuclear factor 1 X-type, respectively. The condition is characterized by a disproportionately large and long head with a slightly prominent forehead and pointed chin, hypertelorism, down-slanting eyes, large hands and feet, overgrowth in childhood, and developmental delay.",
                                 meaning=NCIT.C75019) )
        setattr(cls, "Tuberous Sclerosis",
                PermissibleValue(text="Tuberous Sclerosis",
                                 description="Hereditary disease characterized by seizures, mental retardation, developmental delay, and skin and ocular lesions. First signs usually occur during infancy or childhood but in rare cases may not occur until 2nd or 3rd decade.",
                                 meaning=NCIT.C3424) )
        setattr(cls, "Tyrosinemia Type I",
                PermissibleValue(text="Tyrosinemia Type I",
                                 description="Tyrosinemia caused by mutations in the FAH gene. It is characterized by deficiency of the enzyme fumarylacetoacetate hydrolase. It is the most severe form of tyrosinemia. Signs and symptoms appear early in life and include failure to thrive, vomiting, diarrhea, jaundice, and bleeding tendency. It may result in liver and kidney failure. Patients with this type of tyrosinemia may also have a predisposition for hepatocellular carcinoma.",
                                 meaning=NCIT.C98641) )
        setattr(cls, "Von Hippel-Lindau Syndrome",
                PermissibleValue(text="Von Hippel-Lindau Syndrome",
                                 description="An inherited familial cancer syndrome which is characterized by development of capillary hemangioblastomas of the central nervous system and retina; clear cell renal carcinoma; pheochromocytoma; pancreatic tumors; and inner ear tumors. The syndrome is associated with germline mutations of the VHL tumor suppressor gene, located on chromosome 3p25-26. Symptoms of VHL syndrome may not be apparent until the third decade of life. CNS hemangioblastoma is the most common cause of death, followed by clear cell renal cell carcinoma. --2004",
                                 meaning=NCIT.C3105) )
        setattr(cls, "Weaver Syndrome",
                PermissibleValue(text="Weaver Syndrome",
                                 description="A rare syndrome caused by mutations in the EZH2 gene, and rarely mutations in the NSD1 gene. It is characterized by advanced bone age, foot deformities, permanently bent joints, macrocephaly, flattened back of the head, a broad forehead, hypertelorism, large, low-set ears, micrognathia, delayed development of motor skills, and mild intellectual disability.",
                                 meaning=NCIT.C125599) )
        setattr(cls, "WT1 Syndromes",
                PermissibleValue(text="WT1 Syndromes",
                                 description="A group of syndromes caused by autosomal dominant mutation(s) in the WT1 gene, encoding Wilms tumor protein. Patients with this mutation may have a predisposition to developing Wilms tumors.",
                                 meaning=NCIT.C131006) )
        setattr(cls, "Xeroderma Pigmentosum",
                PermissibleValue(text="Xeroderma Pigmentosum",
                                 description="An inherited skin disorder characterized by photosensitivity with severe sunburn in infancy, the development of numerous pigmented spots resembling freckles, larger atrophic lesions associated with telangiectasis, and multiple solar keratoses. Transmitted in an autosomal recessive manner, xeroderma pigmentosa involves a defect in nucleotide excision repair (NER), leading to deficient repair of DNA damaged by UV radiation and chromosome breakage. Individuals with this disease develop multiple malignant cutaneous neoplasms at an early age and may suffer from severe ophthalmic and neurologic abnormalities.",
                                 meaning=NCIT.C3452) )
        setattr(cls, "X-linked Lymphoproliferative Syndrome",
                PermissibleValue(text="X-linked Lymphoproliferative Syndrome",
                                 description="An X-linked immunodeficiency syndrome that exclusively affects males, although females can be carriers. It is caused by mutation(s) in SH2D1A and/or XIAP genes and is characterized by life-threatening episodes of infectious mononucleosis, hypogammaglobulinemia, and subsequent development of lymphomas (usually B-cell lymphomas) and other lymphoproliferative disorders.",
                                 meaning=NCIT.C61246) )
        setattr(cls, "Turner Syndrome",
                PermissibleValue(text="Turner Syndrome",
                                 description="A gonadal dysgenesis syndrome occurring in phenotypic females, characterized by the absence of a part or all of one of the sex chromosomes. Signs and symptoms include short stature, webbing of neck, low-set ears, hypogonadism, and sterility.",
                                 meaning=NCIT.C26900) )
        setattr(cls, "Klinerfelter Syndrome",
                PermissibleValue(text="Klinerfelter Syndrome",
                                 description="A sex chromosome disorder caused by the presence of an extra X chromosome in the male karyotype. Affected individuals are infertile and have a small penis and testes. They tend to have tall stature and long legs and may have difficulties with speech and language development. Gynecomastia may be present.",
                                 meaning=NCIT.C34752) )
        setattr(cls, "Swyer Syndrome",
                PermissibleValue(text="Swyer Syndrome",
                                 description="A rare syndrome characterized by the presence of a small lung as a result of unilateral post-infectious bronchiolitis obliterans.",
                                 meaning=NCIT.C85178) )
        setattr(cls, "Frasier Syndrome",
                PermissibleValue(text="Frasier Syndrome",
                                 description="A condition, which typically presents during adolescence, that is caused by WT-1 mutation, and is characterized by a developmental sex disorder, FSGS, and may be associated with gonadoblastoma.",
                                 meaning=NCIT.C122805) )
        setattr(cls, "Gonadal Dysgenesis",
                PermissibleValue(text="Gonadal Dysgenesis",
                                 description="A congenital disorder characterized by the presence of extremely hypoplastic gonads preventing the development of secondary sex characteristics",
                                 meaning=NCIT.C61420) )
        setattr(cls, "Beckwith-Wiedemann Syndrome",
                PermissibleValue(text="Beckwith-Wiedemann Syndrome",
                                 description="A genetic syndrome caused by abnormalities in chromosome 11. It is characterized by large birth weight, macroglossia, umbilical hernia, ear abnormalities, and hypoglycemia. Patients with this syndrome have an increased risk of developing embryonal tumors (gonadoblastoma, hepatoblastoma, Wilms tumor, Rhabdomyosarcoma) and adrenal cortex carcinomas.",
                                 meaning=NCIT.C34415) )
        setattr(cls, "Celiac Disease",
                PermissibleValue(text="Celiac Disease",
                                 description="An autoimmune genetic disorder with an unknown pattern of inheritance that primarily affects the digestive tract. It is caused by intolerance to dietary gluten. Consumption of gluten protein triggers an immune response which damages small intestinal villi and prevents adequate absorption of nutrients. Clinical signs include abdominal cramping, diarrhea or constipation and weight loss. If untreated, the clinical course may progress to malnutrition, anemia, osteoporosis and an increased risk of intestinal malignancies. However, the prognosis is favorable with successful avoidance of gluten in the diet.",
                                 meaning=NCIT.C26714) )
        setattr(cls, "Central Hypoventilation Syndrome",
                PermissibleValue(text="Central Hypoventilation Syndrome",
                                 description="A disorder characterized by hypoventilation and hypoxemia. It appears early in life and is not associated with cardiopulmonary or neuromuscular abnormalities.",
                                 meaning=NCIT.C98889) )
        setattr(cls, "Cleft Lip",
                PermissibleValue(text="Cleft Lip",
                                 description="A congenital abnormality consisting of one or more clefts (splits) in the upper lip, which may be accompanied by a cleft palate; it is the result of the failure of the embryonic parts of the lip to fuse.",
                                 meaning=NCIT.C87175) )
        setattr(cls, "Cleft Palate",
                PermissibleValue(text="Cleft Palate",
                                 description="A congenital abnormality consisting of a fissure in the midline of the hard and/or soft palate; it is the result of the failure of the two sides of the palate to fuse during embryonic development.",
                                 meaning=NCIT.C87069) )
        setattr(cls, "Cushing Syndrome",
                PermissibleValue(text="Cushing Syndrome",
                                 description="A syndrome caused by high levels of cortisol in the blood either due to excessive production and secretion of corticosteroids secondary to pituitary or adrenocortical neoplasms, or intake of glucocorticoid drugs. Signs and symptoms include a round face, upper body obesity, fragile and thin skin, purple stretch marks in the skin, fatigue, muscle weakness, hypertension, diabetes mellitus, hypertrichosis and amenorrhea in women, impotence in men, and osteoporosis.",
                                 meaning=NCIT.C2969) )
        setattr(cls, "Denys-Drash Syndrome",
                PermissibleValue(text="Denys-Drash Syndrome",
                                 description="A rare congenital syndrome caused by mutations in the WT1 gene. It is characterized by the presence of congenital nephropathy (diffuse mesangial sclerosis), Wilms tumor, and intersex disorders.",
                                 meaning=NCIT.C84668) )
        setattr(cls, "Diabetes Mellitus (Type I)",
                PermissibleValue(text="Diabetes Mellitus (Type I)",
                                 description="A chronic condition characterized by minimal or absent production of insulin by the pancreas.",
                                 meaning=NCIT.C2986) )
        setattr(cls, "Down Syndrome",
                PermissibleValue(text="Down Syndrome",
                                 description="A chromosomal dysgenesis syndrome resulting from a triplication or translocation of chromosome 21. Down syndrome occurs in approximately 1:700 live births. Abnormalities are variable from individual to individual and may include mental retardation, retarded growth, flat hypoplastic face with short nose, prominent epicanthic skin folds, small low-set ears with prominent antihelix, fissured and thickened tongue, laxness of joint ligaments, pelvic dysplasia, broad hands and feet, stubby fingers, transverse palmar crease, lenticular opacities and heart disease. Patients with Down syndrome have an estimated 10 to 30-fold increased risk for leukemia; most have symptoms of Alzheimer's disease by age 40. Also known as trisomy 21 syndrome.",
                                 meaning=NCIT.C2993) )
        setattr(cls, "Goodpasture's Syndrome",
                PermissibleValue(text="Goodpasture's Syndrome",
                                 description="An autoimmune disorder characterized by pulmonary hemorrhage and glomerulonephritis. It is a hypersensitivity reaction resulting in the formation of antibodies against the pulmonary alveoli and the basement membrane of the glomeruli.",
                                 meaning=NCIT.C34649) )
        setattr(cls, "Gorlin Syndrome",
                PermissibleValue(text="Gorlin Syndrome",
                                 description="An autosomal dominant genetic syndrome caused by abnormalities in the PTCH gene. It is characterized by multiple basal cell carcinomas at a young age, odontogenic keratocysts, and skeletal defects (bifurcated and splayed ribs, fusion of vertebrae, spinal bifida). Patients with this syndrome may also develop medulloblastomas and ovarian fibromas.",
                                 meaning=NCIT.C2892) )
        setattr(cls, "Graves' Disease",
                PermissibleValue(text="Graves' Disease",
                                 description="Hyperthyroidism associated with diffuse hyperplasia of the thyroid gland (goiter), resulting from production of antibodies that are directed against the thyrotropin receptor complex of the follicular epithelial cells. As a result, the thyroid gland enlarges and secrets increased amounts of thyroid hormones.",
                                 meaning=NCIT.C3071) )
        setattr(cls, "Hashimoto's Thyroiditis",
                PermissibleValue(text="Hashimoto's Thyroiditis",
                                 description="An autoimmune disorder caused by the production of autoantibodies against thyroid tissue. There is progressive destruction of the thyroid follicles leading to hypothyroidism.",
                                 meaning=NCIT.C27191) )
        setattr(cls, "Heart Defect",
                PermissibleValue(text="Heart Defect",
                                 description="Genetic anomalies and collections of malformations that are known to cluster together that can be associated with congenital heart defects.",
                                 meaning=NCIT.C168217) )
        setattr(cls, "Hirschsprung Disease",
                PermissibleValue(text="Hirschsprung Disease",
                                 description="A congenital disorder characterized by the absence of myenteric ganglion cells in the distal colon. It results in a functional stenosis of the distal colon and a massive distention of the proximal colon.",
                                 meaning=NCIT.C34700) )
        setattr(cls, "Inflammatory Bowel Disease",
                PermissibleValue(text="Inflammatory Bowel Disease",
                                 description="A spectrum of small and large bowel inflammatory diseases of unknown etiology. It includes Crohn's disease, ulcerative colitis, and colitis of indeterminate type.",
                                 meaning=NCIT.C3138) )
        setattr(cls, "Juvenile Idiopathic Arthritis",
                PermissibleValue(text="Juvenile Idiopathic Arthritis",
                                 description="A group of chronic, inflammatory childhood disorders of unknown etiology that primarily involve joints.",
                                 meaning=NCIT.C114357) )
        setattr(cls, "Mixed Connective Tissue Disease",
                PermissibleValue(text="Mixed Connective Tissue Disease",
                                 description="An autoimmune overlap syndrome characterized by the presence of symptoms of systemic lupus erythematosus, systemic scleroderma, and polymyositis.",
                                 meaning=NCIT.C84892) )
        setattr(cls, "Multiple Sclerosis",
                PermissibleValue(text="Multiple Sclerosis",
                                 description="A progressive autoimmune disorder affecting the central nervous system resulting in demyelination. Patients develop physical and cognitive impairments that correspond with the affected nerve fibers.",
                                 meaning=NCIT.C3243) )
        setattr(cls, "Neurofibromatosis Type I",
                PermissibleValue(text="Neurofibromatosis Type I",
                                 description="Progressive, symptomatic neurofibromatosis type 1 associated with plexiform neurofibromas that cannot be removed surgically without risk of substantial morbidity.",
                                 meaning=NCIT.C143014) )
        setattr(cls, "Systemic Lupus Erythematosus",
                PermissibleValue(text="Systemic Lupus Erythematosus",
                                 description="An autoimmune multi-organ disease typically associated with vasculopathy and autoantibody production. Most patients have antinuclear antibodies (ANA). The presence of anti-dsDNA or anti-Smith antibodies are highly-specific.",
                                 meaning=NCIT.C3201) )
        setattr(cls, "WAGR Syndrome",
                PermissibleValue(text="WAGR Syndrome",
                                 description="A very rare congenital condition involving the complex of Wilms tumor, aniridia, genitourinary abnormalities, and mental retardation. Wilms Tumor-Aniridia-Genitourinary Anomalies-Mental Retardation (WAGR) syndrome involves deletions of several adjacent genes in chromosome region 11p13. Two or more of the four conditions must be present for an individual to be diagnosed with WAGR Syndrome. The clinical picture varies, depending upon the combination of abnormalities.",
                                 meaning=NCIT.C3718) )
        setattr(cls, "Werner Syndrome",
                PermissibleValue(text="Werner Syndrome",
                                 description="A rare, autosomal recessive syndrome caused by mutations in the WRN gene. It is characterized by the appearance of accelerated aging following puberty. It is associated with the development of diabetes mellitus, atherosclerosis, cataracts, and cancer.",
                                 meaning=NCIT.C3447) )
        setattr(cls, "Adenomatous Polyposis Coli",
                PermissibleValue(text="Adenomatous Polyposis Coli",
                                 description="Adenomatous polyposis coli protein (2843 aa, ~312 kDa) is encoded by the human APC gene. This protein is involved in both tumor suppression and the inhibition of the Wnt signaling pathway.",
                                 meaning=NCIT.C17687) )
        setattr(cls, "RB Transcriptional Corepressor 1",
                PermissibleValue(text="RB Transcriptional Corepressor 1",
                                 description="The protein encoded by this gene is a negative regulator of the cell cycle and was the first tumor suppressor gene found. The encoded protein also stabilizes constitutive heterochromatin to maintain the overall chromatin structure. The active, hypophosphorylated form of the protein binds transcription factor E2F1. Defects in this gene are a cause of childhood cancer retinoblastoma (RB), bladder cancer, and osteogenic sarcoma.",
                                 meaning=HGNC["9884"]) )
        setattr(cls, "Secondary Malignancy, NOS",
                PermissibleValue(text="Secondary Malignancy, NOS",
                                 description="A malignant neoplasm that arises from a pre-existing lower grade lesion, or as a result of a primary lesion that has spread to secondary sites, or due to a complication of a cancer treatment.",
                                 meaning=NCIT.C4968) )
        setattr(cls, "Gardner Syndrome",
                PermissibleValue(text="Gardner Syndrome",
                                 description="A variant of familial adenomatous polyposis. It is an autosomal dominant syndrome characterized by multiple colonic polyps predisposing to carcinoma of the colon, osteomas of the skull, epidermoid cysts, and fibromas. It is associated with mutation of the APC gene.",
                                 meaning=NCIT.C6728) )
        setattr(cls, "Maffucci Syndrome",
                PermissibleValue(text="Maffucci Syndrome",
                                 description="A rare non-inherited disorder primarily affecting the skin and skeletal system. It is classified as a mesodermal dysplasia. Clinical signs appear within the first decade and are characterized by multiple soft tissue hemiangiomas and enchondromas leading to skeletal deformities. Clinical course is progressive with variable development of associated malignancies.",
                                 meaning=NCIT.C3213) )
        setattr(cls, "McCune-Albright Syndrome",
                PermissibleValue(text="McCune-Albright Syndrome",
                                 description="A syndrome characterized by the presence of polyostotic fibrous dysplasia, cafe-au-lait skin tumors, and sexual precocity. It is caused by mutations within the GNAS genetic locus.",
                                 meaning=NCIT.C48627) )
        setattr(cls, "Multiple Osteochondromas",
                PermissibleValue(text="Multiple Osteochondromas",
                                 description="An autosomal dominant neoplastic chondrogenic process affecting multiple sites. It is caused by mutations in the EXT1 or EXT2 genes. Grossly and microscopically, the tumors resemble an osteochondroma.",
                                 meaning=NCIT.C53457) )
        setattr(cls, "Ollier Disease",
                PermissibleValue(text="Ollier Disease",
                                 description="A rare benign disorder characterized by lack of normal endochondral ossification, and the growth of multiple enchondromas. It primarily affects the bones of the hand, in children and young adults. Extent of the disease varies; in some cases, neoplastic involvement may be widespread causing considerable deformity.",
                                 meaning=NCIT.C3008) )
        setattr(cls, "Paget Disease",
                PermissibleValue(text="Paget Disease",
                                 description="A malignant neoplasm composed of large cells with large nuclei, prominent nucleoli, and abundant pale cytoplasm (Paget cells). Paget cell neoplasms include Paget disease of the nipple and extramammary Paget disease which may affect the vulva, penis, anus, skin and scrotum.",
                                 meaning=NCIT.C7073) )
        setattr(cls, "Rothmund-Thomson Syndrome",
                PermissibleValue(text="Rothmund-Thomson Syndrome",
                                 description="An autosomal recessive inherited syndrome usually caused by mutations in the RECQL4 gene. It is characterized by poikilodermatous skin changes, sparse hair, cataracts, small stature, skeletal abnormalities, and an increased predisposition to cancer, particularly osteosarcoma.",
                                 meaning=NCIT.C3335) )
        setattr(cls, "13q Syndrome",
                PermissibleValue(text="13q Syndrome",
                                 description="A rare syndrome that is characterized by the partial deletion of the long arm of chromosome 13. Signs and symptoms include low birth weight, craniofacial malformations, hands and feet malformations, and mental and psychomotor retardation.",
                                 meaning=NCIT.C98993) )
        setattr(cls, "Breast Cancer",
                PermissibleValue(text="Breast Cancer",
                                 description="A carcinoma arising from the breast, most commonly the terminal ductal-lobular unit. It is the most common malignant tumor in females. Risk factors include country of birth, family history, menstrual and reproductive history, fibrocystic disease and epithelial hyperplasia, exogenous estrogens, contraceptive agents, and ionizing radiation. The vast majority of breast carcinomas are adenocarcinomas (ductal or lobular). Breast carcinoma spreads by direct invasion, by the lymphatic route, and by the blood vessel route. The most common site of lymph node involvement is the axilla.",
                                 meaning=NCIT.C4572) )
        setattr(cls, "Lung Cancer",
                PermissibleValue(text="Lung Cancer",
                                 description="A carcinoma originating in the lung. Lung carcinomas usually arise from the epithelium that lines the bronchial tree (bronchogenic carcinomas), and are classified as small cell or non-small cell carcinomas. Non-small cell lung carcinomas are usually adenocarcinomas, squamous cell carcinomas, or large cell carcinomas. Metastatic carcinomas to the lung are also common, and can be difficult to distinguish from primary tumors.",
                                 meaning=NCIT.C4878) )
        setattr(cls, "Bladder Cancer",
                PermissibleValue(text="Bladder Cancer",
                                 description="A carcinoma arising from the bladder epithelium. Approximately 90% of the bladder carcinomas are transitional cell carcinomas. The remainder are squamous cell carcinomas, adenocarcinomas and small cell neuroendocrine carcinomas.",
                                 meaning=NCIT.C4912) )
        setattr(cls, "Thyroid Cancer",
                PermissibleValue(text="Thyroid Cancer",
                                 description="A carcinoma arising from the thyroid gland. It includes the following main subtypes: follicular, papillary, medullary, poorly differentiated, and anaplastic carcinoma.",
                                 meaning=NCIT.C4815) )
        setattr(cls, "Soft Tissue Sarcoma",
                PermissibleValue(text="Soft Tissue Sarcoma",
                                 description="A malignant neoplasm arising from muscle tissue, adipose tissue, blood vessels, fibrous tissue, or other supportive tissues excluding the bones.",
                                 meaning=NCIT.C7715) )

class ConditionTypeEnum(EnumDefinitionImpl):

    Cancer = PermissibleValue(text="Cancer",
                                   description="Diseases involving abnormal cell growth with the potential to invade or spread to other parts of the body.",
                                   meaning=NCIT.C9305)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ConditionTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Genetic Syndrome",
                PermissibleValue(text="Genetic Syndrome",
                                 description="Genetic diseases are diseases in which inherited genes predispose to increased risk. The genetic disorders associated with cancer often result from an alteration or mutation in a single gene. The diseases range from rare dominant cancer family syndrome to familial tendencies in which low-penetrance genes may interact with other genes or environmental factors to induce cancer. Research may involve clinical, epidemiologic, and laboratory studies of persons, families, and populations at high risk of these disorders.",
                                 meaning=NCIT.C3101) )
        setattr(cls, "Autoimmune Disease",
                PermissibleValue(text="Autoimmune Disease",
                                 description="A disorder resulting from loss of function or tissue destruction of an organ or multiple organs, arising from humoral or cellular immune responses of the individual to his own tissue constituents. It may be systemic (e.g., systemic lupus erythematosus), or organ specific, (e.g., thyroiditis).",
                                 meaning=NCIT.C2889) )
        setattr(cls, "Congenital Anomaly",
                PermissibleValue(text="Congenital Anomaly",
                                 description="Any abnormality, anatomical or biochemical, evident at birth or during the neonatal period.",
                                 meaning=NCIT.C2849) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class DiagnosisBasisEnum(EnumDefinitionImpl):

    Molecular = PermissibleValue(text="Molecular",
                                         description="The use of molecular tools and techniques, especially gene and protein expression profiles, to diagnose disease.",
                                         meaning=NCIT.C20826)
    Clinical = PermissibleValue(text="Clinical",
                                       description="A diagnosis made from a study of the signs and symptoms of a disease.",
                                       meaning=NCIT.C15607)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Different than the one(s) previously specified or mentioned.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="DiagnosisBasisEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AssistedConceptionEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Not known, observed, recorded; or reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AssistedConceptionEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "In Vitro Fertilization",
                PermissibleValue(text="In Vitro Fertilization",
                                 description="Fertilization of an ovum outside of the body.",
                                 meaning=NCIT.C16580) )
        setattr(cls, "Intracytoplasmic Sperm Injection",
                PermissibleValue(text="Intracytoplasmic Sperm Injection",
                                 description="Injecting a single sperm into the center of an egg.",
                                 meaning=NCIT.C185482) )
        setattr(cls, "Not reported",
                PermissibleValue(text="Not reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CauseOfDeathEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CauseOfDeathEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Disease Progression",
                PermissibleValue(text="Disease Progression",
                                 description="An indication that the subject has died due to the progression of their disease.",
                                 meaning=NCIT.C168970) )
        setattr(cls, "Treatment-Related Mortality",
                PermissibleValue(text="Treatment-Related Mortality",
                                 description="A death that is considered to be causally linked to a treatment.",
                                 meaning=NCIT.C166165) )
        setattr(cls, "Secondary Malignancy",
                PermissibleValue(text="Secondary Malignancy",
                                 description="A malignant neoplasm that arises from a pre-existing lower grade tumor, or as a result of a primary tumor that has spread to secondary sites, or due to a complication of a cancer treatment.",
                                 meaning=NCIT.C4968) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Pre-Treatment Disease Complications",
                PermissibleValue(text="Pre-Treatment Disease Complications",
                                 description="A complication of the disease that existed prior to treatment.",
                                 meaning=NCIT.C168876) )
        setattr(cls, "Post-Treatment Disease Complications",
                PermissibleValue(text="Post-Treatment Disease Complications",
                                 description="A complication of the disease that occurred after treatment.",
                                 meaning=NCIT.C168877) )

class TrmTypeEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Immunotherapy = PermissibleValue(text="Immunotherapy",
                                                 description="Therapy designed to induce changes in a patient's immune status in order to treat disease.",
                                                 meaning=NCIT.C15262)
    Chemotherapy = PermissibleValue(text="Chemotherapy",
                                               description="The use of synthetic or naturally-occurring chemicals for the treatment of diseases.",
                                               meaning=NCIT.C15632)

    _defn = EnumDefinition(
        name="TrmTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Stem Cell Transplant",
                PermissibleValue(text="Stem Cell Transplant",
                                 description="A therapeutic procedure that involves the transplantation of hematopoietic stem cells, either with the patient as their own donor or from a donor to a patient. This can be used for treatment of malignant and non-malignant diseases.",
                                 meaning=NCIT.C15431) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CauseOfDeathDetailEnum(EnumDefinitionImpl):

    Hemorrhage = PermissibleValue(text="Hemorrhage",
                                           description="In medicine, loss of blood from damaged blood vessels. A hemorrhage may be internal or external, and usually involves a lot of bleeding in a short time.",
                                           meaning=NCIT.C26791)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CauseOfDeathDetailEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Bacterial Infection",
                PermissibleValue(text="Bacterial Infection",
                                 description="An acute infectious disorder that is caused by gram positive or gram negative bacteria; representative examples include pneumococcal, streptococcal, salmonella, and meningeal infections.",
                                 meaning=NCIT.C2890) )
        setattr(cls, "Viral Infection",
                PermissibleValue(text="Viral Infection",
                                 description="Any disease caused by a virus.",
                                 meaning=NCIT.C3439) )
        setattr(cls, "Fungal Infection",
                PermissibleValue(text="Fungal Infection",
                                 description="An infection caused by a fungus.",
                                 meaning=NCIT.C3245) )
        setattr(cls, "Infection, Not Otherwise Specified",
                PermissibleValue(text="Infection, Not Otherwise Specified",
                                 description="The invasion of an organism's body tissues by disease-causing agents and their multiplication, as well as the reaction by the host to these organisms and/or toxins that the organisms produce.",
                                 meaning=NCIT.C128320) )
        setattr(cls, "Immunotherapy-Related",
                PermissibleValue(text="Immunotherapy-Related",
                                 description="An observation that a situation is related to immunotherapy received.",
                                 meaning=NCIT.C168874) )
        setattr(cls, "Sinusoidal Obstruction Syndrome",
                PermissibleValue(text="Sinusoidal Obstruction Syndrome",
                                 description="A disorder characterized by inflammation and damage of the hepatic sinusoidal endothelial cells of the hepatic venules that leads to venular occlusion and hepatocellular necrosis. It is most often a conditioning-related toxicity that results as a complication of hematopoietic stem cell transplantation (HSCT). It has also been described in populations of individuals who have ingested pyrrolizidine plant alkaloids. The clinical signs and symptoms include hyperbilirubinemia, hepatomegaly, and fluid retention.",
                                 meaning=NCIT.C26793) )
        setattr(cls, "Multi-Organ Failure",
                PermissibleValue(text="Multi-Organ Failure",
                                 description="Complete impairment of two or more organs or organ systems.",
                                 meaning=NCIT.C75568) )
        setattr(cls, "Acute Respiratory Distress Syndrome",
                PermissibleValue(text="Acute Respiratory Distress Syndrome",
                                 description="Progressive and life-threatening pulmonary distress in the absence of an underlying pulmonary condition, usually following major trauma or surgery. Cases of neonatal respiratory distress syndrome are not included in this definition.",
                                 meaning=NCIT.C3353) )
        setattr(cls, "Graft Versus Host Disease",
                PermissibleValue(text="Graft Versus Host Disease",
                                 description="A reaction, which may be fatal, in an immunocompromised subject (host) who has received an antigenically incompatible tissue transplant (graft) from an immunocompetent donor. The reaction is secondary to the activation of the transplanted cells against those host tissues that express an antigen not expressed by the donor, and is seen most commonly following bone marrow transplantation; acute disease is seen after 5-40 days, and chronic disease occurs weeks to months after transplantation.",
                                 meaning=NCIT.C3063) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Cardiac Failure",
                PermissibleValue(text="Cardiac Failure",
                                 description="Inability of the heart to pump blood at an adequate rate to meet tissue metabolic requirements. Clinical symptoms of heart failure include: unusual dyspnea on light exertion, recurrent dyspnea occurring in the supine position, fluid retention or rales, jugular venous distension, pulmonary edema on physical exam, or pulmonary edema on chest x-ray presumed to be cardiac dysfunction.",
                                 meaning=NCIT.C50577) )
        setattr(cls, "Infection, NOS",
                PermissibleValue(text="Infection, NOS",
                                 description="The invasion of an organism's body tissues by disease-causing agents and their multiplication, as well as the reaction by the host to these organisms and/or toxins that the organisms produce.",
                                 meaning=NCIT.C128320) )
        setattr(cls, "Organ Failure, NOS",
                PermissibleValue(text="Organ Failure, NOS",
                                 description="The failure of an essential system in the body.",
                                 meaning=NCIT.C185320) )
        setattr(cls, "Cardiac Disease",
                PermissibleValue(text="Cardiac Disease",
                                 description="A non-neoplastic or neoplastic disorder that affects the heart and/or the pericardium. Representative examples include endocarditis, pericarditis, atrial myxoma, cardiac myeloid sarcoma, and pericardial malignant mesothelioma.",
                                 meaning=NCIT.C3079) )
        setattr(cls, "Pulmonary Disease",
                PermissibleValue(text="Pulmonary Disease",
                                 description="A non-neoplastic or neoplastic disorder affecting the lung. Representative examples of non-neoplastic disorders include chronic obstructive pulmonary disease and pneumonia. Representative examples of neoplastic disorders include benign processes (e.g., respiratory papilloma) and malignant processes (e.g., lung carcinoma and metastatic cancer to the lung).",
                                 meaning=NCIT.C3198) )
        setattr(cls, "Surgical Complication",
                PermissibleValue(text="Surgical Complication",
                                 description="A disease or disorder that occurs during, soon after or as a result of a surgical procedure.",
                                 meaning=NCIT.C164157) )

class CauseOfDeathRankingEnum(EnumDefinitionImpl):

    Primary = PermissibleValue(text="Primary",
                                     description="The first significant event which ultimately led to death.",
                                     meaning=NCIT.C99531)
    Contributory = PermissibleValue(text="Contributory",
                                               description="Any adverse event contributing to the cause of death.",
                                               meaning=NCIT.C168948)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CauseOfDeathRankingEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CourseTimepointEnum(EnumDefinitionImpl):

    Start = PermissibleValue(text="Start",
                                 description="The beginning of the protocol treatment course.")
    During = PermissibleValue(text="During",
                                   description="At some time between the beginning and the end of the protocol treatment course.")
    End = PermissibleValue(text="End",
                             description="The end of the protocol treatment course.")
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CourseTimepointEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C28554) )

class RelationEnum(EnumDefinitionImpl):

    Father = PermissibleValue(text="Father",
                                   description="A male who contributes to the genetic makeup of his offspring through the fertilization of an ovum by his sperm.",
                                   meaning=NCIT.C96572)
    Mother = PermissibleValue(text="Mother",
                                   description="A female who contributes to the genetic makeup of her offspring from the fertilization of her ovum.",
                                   meaning=NCIT.C96580)
    Brother = PermissibleValue(text="Brother",
                                     description="A male who shares with his sibling the genetic makeup inherited from one or both of their shared biological parents.",
                                     meaning=NCIT.C96570)
    Sister = PermissibleValue(text="Sister",
                                   description="A female who shares with her sibling the genetic makeup inherited from one or both of their shared biological parents.",
                                   meaning=NCIT.C96586)
    Son = PermissibleValue(text="Son",
                             description="A male progeny with genetic makeup inherited from the parent.",
                             meaning=NCIT.C150888)
    Daughter = PermissibleValue(text="Daughter",
                                       description="A female progeny with genetic makeup inherited from the parent.",
                                       meaning=NCIT.C150887)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="RelationEnum",
    )

class PriorCancerLateralityEnum(EnumDefinitionImpl):

    Unilateral = PermissibleValue(text="Unilateral",
                                           description="A retinoblastoma that only involves a single eye.",
                                           meaning=NCIT.C8714)
    Bilateral = PermissibleValue(text="Bilateral",
                                         description="Retinoblastoma involving both eyes. This occurs in the majority of patients with the inherited variant. A minority of patient with bilateral retinoblastoma were found to have involvement of the pineal gland as well.",
                                         meaning=NCIT.C8713)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="PriorCancerLateralityEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AliveDeadNotreportedUnknownEnum(EnumDefinitionImpl):

    Alive = PermissibleValue(text="Alive",
                                 description="Showing characteristics of life; displaying signs of life.",
                                 meaning=NCIT.C37987)
    Dead = PermissibleValue(text="Dead",
                               description="The cessation of life.",
                               meaning=NCIT.C28554)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AliveDeadNotreportedUnknownEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C28554) )

class MeasurementTypeEnum(EnumDefinitionImpl):

    Weight = PermissibleValue(text="Weight",
                                   description="The weight of a subject.",
                                   meaning=NCIT.C81328)
    Height = PermissibleValue(text="Height",
                                   description="The vertical measurement or distance from the base to the top of a subject or participant.",
                                   meaning=NCIT.C164634)
    BMI = PermissibleValue(text="BMI",
                             description="The result of a body mass index measurement.",
                             meaning=NCIT.C138901)
    BSA = PermissibleValue(text="BSA",
                             description="A measure of the 2-dimensional extent of the body surface (i.e., the skin). Body surface area (BSA) can be calculated by mathematical formula or from a chart that relates height to weight. BSA is often an important factor in dosing.",
                             meaning=NCIT.C25157)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Pulse = PermissibleValue(text="Pulse",
                                 description="The rhythmic wave within the arteries occurring with each contraction of the left ventricle.",
                                 meaning=NCIT.C25749)
    Temperature = PermissibleValue(text="Temperature",
                                             description="A measure of the average kinetic energy of a system of particles. Temperature may be quantified, in the context of thermodynamics, as the potential of one system to transfer thermal energy to another system until both systems reach a state of thermal equilibrium.",
                                             meaning=NCIT.C25206)

    _defn = EnumDefinition(
        name="MeasurementTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Head Circumference",
                PermissibleValue(text="Head Circumference",
                                 description="A circumferential measurement of the head at the widest point, which is traditionally above the eyebrows.",
                                 meaning=NCIT.C81255) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Systolic Blood Pressure",
                PermissibleValue(text="Systolic Blood Pressure",
                                 description="The maximum pressure exerted into the systemic arterial circulation during the contraction of the left ventricle of the heart.",
                                 meaning=NCIT.C25298) )
        setattr(cls, "Diastolic Blood Pressure",
                PermissibleValue(text="Diastolic Blood Pressure",
                                 description="The minimum pressure exerted into the systemic arterial circulation during cardiac ventricular relaxation and filling.",
                                 meaning=NCIT.C25299) )
        setattr(cls, "Respiratory Rate",
                PermissibleValue(text="Respiratory Rate",
                                 description="The rate of breathing (inhalation and exhalation) measured within in a unit time, usually expressed as breaths per minute.",
                                 meaning=NCIT.C49678) )

class MeasurementUnitEnum(EnumDefinitionImpl):

    kg = PermissibleValue(text="kg",
                           description="A basic SI unit of mass. It is defined as the mass of an international prototype in the form of a platinum-iridium cylinder kept at Sevres in France. A kilogram is equal to 1,000 grams and 2.204 622 6 pounds.",
                           meaning=NCIT.C28252)
    cm = PermissibleValue(text="cm",
                           description="A basic unit of length in the former CGS version of metric system, equal to one hundredth of a meter or approximately 0.393 700 787 inch",
                           meaning=NCIT.C49668)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    m2 = PermissibleValue(text="m2",
                           description="A SI unit of area measurement equal to a square whose sides are one meter long. Square meter is equal to 10,000 square centimeters; 0.01 are; 1.196 square yards; 10.76 square feet; 1550 square inches.",
                           meaning=NCIT.C42569)
    mmHg = PermissibleValue(text="mmHg",
                               description="A non-SI unit of pressure equal to 133,332 Pa or 1.316E10-3 standard atmosphere. Use of this unit is generally deprecated by ISO and IUPAC.",
                               meaning=NCIT.C49670)
    C = PermissibleValue(text="C",
                         description="A unit of temperature of the temperature scale designed so that the freezing point of water is 0 degrees and the boiling point is 100 degrees at standard atmospheric pressure. The current official definition of the Celsius sets 0.01 C to be at the triple point of water and a degree to be 1/273.16 of the difference in temperature between the triple point of water and absolute zero. One degree Celsius represents the same temperature difference as one Kelvin.",
                         meaning=NCIT.C42559)

    _defn = EnumDefinition(
        name="MeasurementUnitEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "kg/m2",
                PermissibleValue(text="kg/m2",
                                 description="The SI derived unit of spread rate of a substance by mass, used also as a measure of area density and as a dose calculation unit.",
                                 meaning=NCIT.C49671) )
        setattr(cls, "beat/min",
                PermissibleValue(text="beat/min",
                                 description="The number of heartbeats measured per minute time.",
                                 meaning=NCIT.C49673) )

class CategoryEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CategoryEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Peripheral Blood Analysis",
                PermissibleValue(text="Peripheral Blood Analysis",
                                 description="A laboratory analysis of a sample of peripheral blood.",
                                 meaning=NCIT.C173271) )
        setattr(cls, "Cerebrospinal Fluid Analysis",
                PermissibleValue(text="Cerebrospinal Fluid Analysis",
                                 description="A laboratory analysis of a sample of cerebrospinal fluid.",
                                 meaning=NCIT.C173272) )
        setattr(cls, "Bone Marrow Analysis",
                PermissibleValue(text="Bone Marrow Analysis",
                                 description="A laboratory analysis of a sample of bone marrow.",
                                 meaning=NCIT.C173273) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TestEnum(EnumDefinitionImpl):

    Platelets = PermissibleValue(text="Platelets",
                                         description="The determination of the number of platelets in a biospecimen.",
                                         meaning=NCIT.C51951)
    RBC = PermissibleValue(text="RBC",
                             description="The determination of the number of erythrocytes in a biospecimen.",
                             meaning=NCIT.C51946)
    WBC = PermissibleValue(text="WBC",
                             description="A test to determine the number of leukocytes in a biospecimen.",
                             meaning=NCIT.C51948)
    Blasts = PermissibleValue(text="Blasts",
                                   description="The determination of the number of blast cells present in a blood sample.",
                                   meaning=NCIT.C74605)
    Hemoglobin = PermissibleValue(text="Hemoglobin",
                                           description="A quantitative measurement of the amount of hemoglobin present in a biospecimen.",
                                           meaning=NCIT.C64848)
    LDH = PermissibleValue(text="LDH",
                             description="A quantitative measurement of the amount of lactate dehydrogenase present in a sample.",
                             meaning=NCIT.C64855)
    ESR = PermissibleValue(text="ESR",
                             description="A quantitative measurement of the distance that red blood cells travel in one hour in a sample of unclotted blood.",
                             meaning=NCIT.C74611)
    AFP = PermissibleValue(text="AFP",
                             description="This gene plays a role in fetal progression.",
                             meaning=NCIT.C21577)
    cfDNA = PermissibleValue(text="cfDNA",
                                 description="DNA that is found in blood plasma and is not associated with cells in the circulation.",
                                 meaning=NCIT.C128274)
    Albumin = PermissibleValue(text="Albumin",
                                     description="A quantitative measurement of albumin present in a sample.",
                                     meaning=NCIT.C64431)
    CD34 = PermissibleValue(text="CD34",
                               description="The determination of the amount of CD34 expressing cells present in a sample.",
                               meaning=NCIT.C102260)
    CRP = PermissibleValue(text="CRP",
                             description="A quantitative measurement of the amount of C-reactive protein present in a sample.",
                             meaning=NCIT.C64548)
    Eosinophils = PermissibleValue(text="Eosinophils",
                                             description="The determination of the number of eosinophils in a blood sample.",
                                             meaning=NCIT.C64550)
    Lymphocytes = PermissibleValue(text="Lymphocytes",
                                             description="The determination of the number of lymphocytes in a blood sample.",
                                             meaning=NCIT.C12535)
    Monocytes = PermissibleValue(text="Monocytes",
                                         description="The determination of the number of monocytes in a blood sample.",
                                         meaning=NCIT.C64823)
    Neutrophils = PermissibleValue(text="Neutrophils",
                                             description="The real number of white blood cells (WBC) that are neutrophils. It is derived by multiplying the WBC count by the percent of neutrophils in the differential WBC count. The normal range for ANC is 1.5 to 8.0 (1,500 to 8,000/mm3).",
                                             meaning=NCIT.C51949)
    TSH = PermissibleValue(text="TSH",
                             description="A quantitative measurement of the amount of thyrotropin present in a sample.",
                             meaning=NCIT.C64813)
    Ferritin = PermissibleValue(text="Ferritin",
                                       description="The determination of the amount of ferritin present in a sample.",
                                       meaning=NCIT.C74737)
    ANC = PermissibleValue(text="ANC",
                             description="The real number of white blood cells (WBC) that are neutrophils. It is derived by multiplying the WBC count by the percent of neutrophils in the differential WBC count. The normal range for ANC is 1.5 to 8.0 (1,500 to 8,000/mm3).",
                             meaning=NCIT.C63321)
    HGB = PermissibleValue(text="HGB",
                             description="A quantitative measurement of the amount of hemoglobin present in a biospecimen.",
                             meaning=NCIT.C64848)
    HCT = PermissibleValue(text="HCT",
                             description="A measure of the volume of red blood cells expressed as a percentage of the total blood volume. Normal in males is 43-49%, in females 37-43%.",
                             meaning=NCIT.C64796)
    Leukocytes = PermissibleValue(text="Leukocytes",
                                           description="A test to determine the number of leukocytes in a biospecimen.",
                                           meaning=NCIT.C51948)
    Calcium = PermissibleValue(text="Calcium",
                                     description="A quantitative measurement of the amount of calcium present in a sample.",
                                     meaning=NCIT.C64488)
    Potassium = PermissibleValue(text="Potassium",
                                         description="A quantitative measurement of the amount of potassium present in a sample.",
                                         meaning=NCIT.C64853)
    Sodium = PermissibleValue(text="Sodium",
                                   description="A quantitative measurement of the amount of sodium present in a sample.",
                                   meaning=NCIT.C64809)
    Chloride = PermissibleValue(text="Chloride",
                                       description="A quantitative measurement of the amount of chloride present in a sample.",
                                       meaning=NCIT.C64495)
    Protein = PermissibleValue(text="Protein",
                                     description="A group of complex organic macromolecules composed of one or more chains (linear polymers) of alpha-L-amino acids linked by peptide bonds and ranging in size from a few thousand to over 1 million Daltons. Proteins are fundamental genetically encoded components of living cells with specific structures and functions dictated by amino acid sequence.",
                                     meaning=NCIT.C17021)
    Glucose = PermissibleValue(text="Glucose",
                                     description="The determination of the amount of glucose present in a sample.",
                                     meaning=NCIT.C105585)
    Lipase = PermissibleValue(text="Lipase",
                                   description="The determination of the amount of lipase present in a sample.",
                                   meaning=NCIT.C117748)
    ALP = PermissibleValue(text="ALP",
                             description="A quantitative measurement of alkaline phosphatase present in a sample.",
                             meaning=NCIT.C64432)
    AST = PermissibleValue(text="AST",
                             description="A quantitative measurement of aspartate aminotransferase present in a sample.",
                             meaning=NCIT.C64467)
    ALT = PermissibleValue(text="ALT",
                             description="A quantitative measurement of alanine aminotransferase present in a sample.",
                             meaning=NCIT.C64433)
    GGT = PermissibleValue(text="GGT",
                             description="A quantitative measurement of the amount of gamma glutamyl transpeptidase present in a sample.",
                             meaning=NCIT.C64847)
    PT = PermissibleValue(text="PT",
                           description="A measurement of the clotting time of plasma recalcified in the presence of excess tissue thromboplastin; it is a measure of the extrinsic pathway of coagulation. It is used to determine the clotting tendency of blood, in the measure of warfarin dosage, liver damage and vitamin K status. Factors measured are fibrinogen, prothrombin, and factors V, VII, and X.",
                           meaning=NCIT.C62656)
    PTT = PermissibleValue(text="PTT",
                             description="A measurement of the length of time that it takes for clotting to occur when no activating reagents are added to a biological specimen. The test is partial due to the absence of tissue factor (Factor III) from the reaction mixture.",
                             meaning=NCIT.C178140)
    INR = PermissibleValue(text="INR",
                             description="A measure of the extrinsic pathway of coagulation. The International Normalized Ratio of Prothrombin Time (INR) is the ratio of a patient prothrombin time to a normal (control) sample raised to the power of the International Sensitivity Index (ISI) with a range of 0.8 to 1.2 seconds.",
                             meaning=NCIT.C64805)
    Creatinine = PermissibleValue(text="Creatinine",
                                           description="A quantitative measurement of the amount of creatinine present in a sample.",
                                           meaning=NCIT.C64547)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TestEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Absolute Neutrophil Count",
                PermissibleValue(text="Absolute Neutrophil Count",
                                 description="The real number of white blood cells (WBC) that are neutrophils. It is derived by multiplying the WBC count by the percent of neutrophils in the differential WBC count. The normal range for ANC is 1.5 to 8.0 (1,500 to 8,000/mm3).",
                                 meaning=NCIT.C63321) )
        setattr(cls, "Auer Rods",
                PermissibleValue(text="Auer Rods",
                                 description="The determination of the number of Auer rods present in a biospecimen.",
                                 meaning=NCIT.C74657) )
        setattr(cls, "Alkaline Phophatase",
                PermissibleValue(text="Alkaline Phophatase",
                                 description="A quantitative measurement of alkaline phosphatase present in a sample.",
                                 meaning=NCIT.C64432) )
        setattr(cls, "β-hCG",
                PermissibleValue(text="β-hCG",
                                 description="A determination of the presence of Choriogonadotropin Beta protein.",
                                 meaning=NCIT.C64851) )
        setattr(cls, "miR-371a-3p",
                PermissibleValue(text="miR-371a-3p",
                                 description="The human MIR371A wild-type allele is located in the vicinity of 19q13.42 and is approximately 67 bases in length. This allele, which encodes MIR371A pre-miRNA, may be involved in the regulation of target gene expression. Alteration in the expression of this gene is associated with malignant germ cell tumors.",
                                 meaning=NCIT.C158711) )
        setattr(cls, "miR-372-3p",
                PermissibleValue(text="miR-372-3p",
                                 description="The human MIR372 wild-type allele is located in the vicinity of 19q13.41 and is approximately 66 bases in length. This allele, which encodes MIR372 pre-miRNA, plays a role in the regulation of gene expression. Alteration in the expression of this gene is associated with development of testicular germ cell tumor and non-small cell lung cancer.",
                                 meaning=NCIT.C82190) )
        setattr(cls, "miR-373-3p",
                PermissibleValue(text="miR-373-3p",
                                 description="The human MIR373 wild-type allele is located in the vicinity of 19q13.41 and is approximately 68 bases in length. This allele, which encodes MIR373 pre-miRNA, plays a role in the regulation of gene expression. Alteration in the expression of this gene is associated with development of testicular germ cell tumor and breast cancer.",
                                 meaning=NCIT.C82191) )
        setattr(cls, "miR-367-3p",
                PermissibleValue(text="miR-367-3p",
                                 description="The determination of the amount of human microRNA 367-3p present in a sample.",
                                 meaning=NCIT.C177302) )
        setattr(cls, "miR-375-3p",
                PermissibleValue(text="miR-375-3p",
                                 description="Human MIR375 wild-type allele is located in the vicinity of 2q35 and is approximately 70 bases in length. This allele, which encodes MIR375 pre-miRNA, is involved in the modulation of gene expression.",
                                 meaning=NCIT.C101665) )
        setattr(cls, "EBV DNA",
                PermissibleValue(text="EBV DNA",
                                 description="The determination of the amount of Epstein-Barr virus DNA present in a sample.",
                                 meaning=NCIT.C166035) )
        setattr(cls, "EBV IgG",
                PermissibleValue(text="EBV IgG",
                                 description="The determination of the amount of Epstein-Barr virus in a biological sample.",
                                 meaning=NCIT.C184675) )
        setattr(cls, "Free T4",
                PermissibleValue(text="Free T4",
                                 description="The determination of the amount of free thyroxine present in a sample.",
                                 meaning=NCIT.C74786) )
        setattr(cls, "Uric Acid",
                PermissibleValue(text="Uric Acid",
                                 description="A white tasteless odorless crystalline product of protein metabolism, found in the blood and urine, as well as trace amounts found in the various organs of the body. It can build up and form stones or crystals in various disease states.",
                                 meaning=NCIT.C62652) )
        setattr(cls, "5 Prime Nucleotidase",
                PermissibleValue(text="5 Prime Nucleotidase",
                                 description="The determination of the amount of 5 prime nucleotidase present in a sample.",
                                 meaning=NCIT.C79437) )
        setattr(cls, "Total Bilirubin",
                PermissibleValue(text="Total Bilirubin",
                                 description="The measurement of the total amount of bilirubin present in a particular substrate. The substrate most often tested is blood, but other fluids extracted from the body may be used periodically depending on the purpose of the test.",
                                 meaning=NCIT.C38037) )
        setattr(cls, "Direct Bilirubin",
                PermissibleValue(text="Direct Bilirubin",
                                 description="The bilirubin is bound to glucuronide to form conjugated bilirubin (direct bilirubin). Direct Bilirubin measurement is accomplished by a colorimetric method. Direct Bilirubin in biological fluids reacts with sulfanilic acid at acidic pH to produce a red colored complex. The optical density of produced color has a direct relationship with Direct Bilirubin concentration in the solution.",
                                 meaning=NCIT.C64481) )
        setattr(cls, "Free T3",
                PermissibleValue(text="Free T3",
                                 description="The determination of the amount of free triiodothyronine present in a sample.",
                                 meaning=NCIT.C74787) )
        setattr(cls, "Creatinine Clearance",
                PermissibleValue(text="Creatinine Clearance",
                                 description="The determination of the clearance of endogenous creatinine, used for evaluating the glomerular filtration rate.",
                                 meaning=NCIT.C25747) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SpecimenEnum(EnumDefinitionImpl):

    Blood = PermissibleValue(text="Blood",
                                 description="A small volume of blood removed for testing or storage.",
                                 meaning=NCIT.C17610)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Serum = PermissibleValue(text="Serum",
                                 description="A sample of serum collected for analysis.",
                                 meaning=NCIT.C178987)
    Plasma = PermissibleValue(text="Plasma",
                                   description="A specimen of plasma.",
                                   meaning=NCIT.C185204)
    Urine = PermissibleValue(text="Urine",
                                 description="The fluid that is excreted by the kidneys. It is stored in the bladder and discharged through the urethra.",
                                 meaning=NCIT.C13283)

    _defn = EnumDefinition(
        name="SpecimenEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Cerebrospinal Fluid",
                PermissibleValue(text="Cerebrospinal Fluid",
                                 description="A specimen of cerebrospinal fluid.",
                                 meaning=NCIT.C185194) )
        setattr(cls, "Bone Marrow",
                PermissibleValue(text="Bone Marrow",
                                 description="A biological sample containing components collected from bone marrow of an experimental subject.",
                                 meaning=NCIT.C164009) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Peritoneal Fluid",
                PermissibleValue(text="Peritoneal Fluid",
                                 description="A specimen of fluid from the peritoneum.",
                                 meaning=NCIT.C185197) )

class MethodEnum(EnumDefinitionImpl):

    Morphology = PermissibleValue(text="Morphology",
                                           description="The science of the form and structure of organisms (plants, animals, and other forms of life), or of their parts, and the study or science of the same. In pathology, the specific appearance of cells and tissues (normal and abnormal) under the light or electron microscope.",
                                           meaning=NCIT.C17943)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    qPCR = PermissibleValue(text="qPCR",
                               description="An application of PCR that measures the products generated during each cycle of the polymerase chain reaction process in order to determine the starting amount of template in the reaction.",
                               meaning=NCIT.C51962)
    ddPCR = PermissibleValue(text="ddPCR",
                                 description="A type of digital polymerase chain reaction technique in which the sample is fractionated into thousands of tiny droplets using a water-oil emulsion droplet technology, within which individual PCR reactions occur in each droplet",
                                 meaning=NCIT.C166064)
    Cytology = PermissibleValue(text="Cytology",
                                       description="The light microscopic study of normal and abnormal cells in fine needle aspirates (FNAs), body cavity fluids, and smears.",
                                       meaning=NCIT.C16491)
    PCR = PermissibleValue(text="PCR",
                             description="A method for amplifying a DNA base sequence using multiple rounds of heat denaturation of the DNA and annealing of oligonucleotide primers complementary to flanking regions in the presence of a heat-stable polymerase. This results in duplication of the targeted DNA region. Newly synthesized DNA strands can subsequently serve as additional templates for the same primer sequences, so that successive rounds of primer annealing, strand elongation, and dissociation produce rapid and highly specific amplification of the desired sequence. PCR also can be used to detect the existence of the defined sequence in a DNA sample.",
                             meaning=NCIT.C17003)

    _defn = EnumDefinition(
        name="MethodEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Flow Cytometry",
                PermissibleValue(text="Flow Cytometry",
                                 description="A technique for counting, examining and sorting microscopic particles suspended in a stream of fluid.",
                                 meaning=NCIT.C16585) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "MicroRNA Sequencing",
                PermissibleValue(text="MicroRNA Sequencing",
                                 description="A next-generation or massively parallel high-throughput DNA sequencing-based procedure that can identify and quantify the microRNA sequences present in a biological sample.",
                                 meaning=NCIT.C156057) )

class ResultUnitEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    seconds = PermissibleValue(text="seconds",
                                     description="A unit of time, one of the seven base units of the International System of Units (Systeme International d'Unites, SI). The second is the duration of 919 263 177 0 periods of the specified light radiation corresponding to the transition between the two hyperfine levels of the caesium 133 atom in its ground state at 0 K. According to the convention, 60 seconds constitute one minute; 3,600 seconds constitute one hour.",
                                     meaning=NCIT.C42535)

    _defn = EnumDefinition(
        name="ResultUnitEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "%",
                PermissibleValue(text="%",
                                 description="A unit for expressing a number as a fraction of hundred (on the basis of a rate or proportion per hundred).",
                                 meaning=NCIT.C48570) )
        setattr(cls, "count/mm3",
                PermissibleValue(text="count/mm3",
                                 description="A count of items per cubic millimeter of sample.",
                                 meaning=NCIT.C173275) )
        setattr(cls, "g/dL",
                PermissibleValue(text="g/dL",
                                 description="A unit of mass concentration defined as the concentration of one gram of a substance per unit volume of the mixture equal to one deciliter (100 milliliters). The concept also refers to the metric unit of mass density (volumic mass) defined as the density of substance which mass equal to one gram occupies the volume one deciliter.",
                                 meaning=NCIT.C64783) )
        setattr(cls, "U/L",
                PermissibleValue(text="U/L",
                                 description="An arbitrary unit of substance concentration equal to the concentration at which one liter of mixture contains one unit of a substance.",
                                 meaning=NCIT.C67456) )
        setattr(cls, "mm/h",
                PermissibleValue(text="mm/h",
                                 description="A unit of both speed (scalar) and velocity (vector), defined as the distance of one millimeter travelled per unit time equal to one hour.",
                                 meaning=NCIT.C67419) )
        setattr(cls, "mg/L",
                PermissibleValue(text="mg/L",
                                 description="A metric unit of mass concentration defined as the concentration of one gram of a substance per unit volume of the mixture equal to one cubic meter. The concept also refers to the metric unit of mass density (volumic mass) defined as the density of a substance which mass equal to one gram occupies the volume of one cubic meter.",
                                 meaning=NCIT.C64572) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "ng/mL",
                PermissibleValue(text="ng/mL",
                                 description="A unit of mass concentration defined as the concentration of one microgram of a substance per unit volume of the mixture equal to one liter. The concept also refers to the unit of mass density (volumetric mass) defined as the density of a substance which mass equal to one microgram occupies the volume of one liter.",
                                 meaning=NCIT.C67306) )
        setattr(cls, "IU/L",
                PermissibleValue(text="IU/L",
                                 description="Unit of arbitrary substance concentration (biologic activity concentration) defined as the concentration of one international unit per one liter of the system volume.",
                                 meaning=NCIT.C67376) )
        setattr(cls, "uIU/mL",
                PermissibleValue(text="uIU/mL",
                                 description="Unit of arbitrary substance concentration (biologic activity concentration) defined as the concentration of one millionth of international unit per one milliliter of system volume.",
                                 meaning=NCIT.C67405) )
        setattr(cls, "mcg/mL",
                PermissibleValue(text="mcg/mL",
                                 description="A metric unit of mass concentration defined as the concentration of one gram of a substance per unit volume of the mixture equal to one cubic meter. The concept also refers to the metric unit of mass density (volumic mass) defined as the density of a substance which mass equal to one gram occupies the volume of one cubic meter.",
                                 meaning=NCIT.C64572) )
        setattr(cls, "g/L",
                PermissibleValue(text="g/L",
                                 description="A SI derived unit of mass concentration defined as the concentration of one kilogram of a substance per unit volume of the mixture equal to one cubic meter, or the concentration of one milligram of a substance per unit volume of the mixture equal to one milliliter, or one gram of a substance per one liter of the mixture. It is also a unit of mass density (volumic mass) defined as the density of substance which mass equal to one milligram occupies the volume one milliliter.",
                                 meaning=NCIT.C42576) )
        setattr(cls, "umol/L",
                PermissibleValue(text="umol/L",
                                 description="A unit of concentration (molarity unit) equal to one one-millionth of a mole (10E-6 mole) of solute per one liter of solution.",
                                 meaning=NCIT.C48508) )
        setattr(cls, "mmol/L",
                PermissibleValue(text="mmol/L",
                                 description="A unit of concentration (molarity unit) equal to one thousandth of a mole (10E-3 mole) of solute per one liter of solution.",
                                 meaning=NCIT.C64387) )
        setattr(cls, "mL/min",
                PermissibleValue(text="mL/min",
                                 description="A metric unit of volumetric flow rate defined as the rate at which one milliliter of matter crosses a given surface during the period of time equal to one minute.",
                                 meaning=NCIT.C64777) )
        setattr(cls, "mIU/L",
                PermissibleValue(text="mIU/L",
                                 description="Unit of arbitrary substance concentration (biologic activity concentration) defined as the concentration of one millionth of international unit per one milliliter of system volume.",
                                 meaning=NCIT.C67405) )

class BmMorphologyEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="BmMorphologyEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "M1 (Less Than 5 % Blasts)",
                PermissibleValue(text="M1 (Less Than 5 % Blasts)",
                                 description="A semi-quantitative microscopic finding indicating that 5 percent or less of the nucleated cells in a bone marrow sample are immature mononuclear cells.",
                                 meaning=NCIT.C137698) )
        setattr(cls, "M2 (5-25 % Blasts)",
                PermissibleValue(text="M2 (5-25 % Blasts)",
                                 description="A semi-quantitative microscopic finding indicating that between 5 and 25 percent of the nucleated cells in a bone marrow sample are immature mononuclear cells.",
                                 meaning=NCIT.C146709) )
        setattr(cls, "M3 (Greater Than 25 % Blasts)",
                PermissibleValue(text="M3 (Greater Than 25 % Blasts)",
                                 description="A semi-quantitative microscopic finding indicating that 25 percent or more of the nucleated cells in a bone marrow sample are immature mononuclear cells.",
                                 meaning=NCIT.C140330) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ThresholdLevelEnum(EnumDefinitionImpl):

    High = PermissibleValue(text="High",
                               description="The maximum level that must be exceeded for a certain reaction to occur or be manifested.",
                               meaning=NCIT.C177365)
    Low = PermissibleValue(text="Low",
                             description="The minimum level that must be attained for a certain reaction to occur or be manifested.",
                             meaning=NCIT.C177366)

    _defn = EnumDefinition(
        name="ThresholdLevelEnum",
    )

class SeqMethodEnum(EnumDefinitionImpl):

    Relative = PermissibleValue(text="Relative",
                                       description="Considered in comparison with something else; dependent on or interconnected with something else; not absolute.",
                                       meaning=NCIT.C45830)
    Absolute = PermissibleValue(text="Absolute",
                                       description="Complete and without restriction or qualification; something that does not depend on anything else; not relative.",
                                       meaning=NCIT.C45829)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SeqMethodEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CommonNameEnum(EnumDefinitionImpl):

    iAMP21 = PermissibleValue(text="iAMP21",
                                   description="A cytogenetic abnormality that refers to the allelic gain of an internal part of chromosome 21. It is a rare high-risk chromosomal abnormality that occurs in approximately 2-5% of pediatric patients with B-cell precursor Acute Lymphoblastic Leukemia. This abnormality has been associated with a poor outcome in patients treated by standard protocols.",
                                   meaning=NCIT.C124874)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    CDKN2A = PermissibleValue(text="CDKN2A",
                                   description="A change in the nucleotide sequence of the CDKN2A gene.",
                                   meaning=NCIT.C128817)
    STAG2 = PermissibleValue(text="STAG2",
                                 description="A change in the nucleotide sequence of the STAG2 gene.",
                                 meaning=NCIT.C153513)
    TP53 = PermissibleValue(text="TP53",
                               description="A change in the nucleotide sequence of the TP53 gene.",
                               meaning=NCIT.C118396)

    _defn = EnumDefinition(
        name="CommonNameEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "E2A/PBX1 t(1;19)",
                PermissibleValue(text="E2A/PBX1 t(1;19)",
                                 description="A cytogenetic abnormality that involves a translocation between chromosomes 1 and 19.",
                                 meaning=NCIT.C128654) )
        setattr(cls, "ETV6-RUNX1 t(12;21)(p13;q22)(formerly TEL-AML1)",
                PermissibleValue(text="ETV6-RUNX1 t(12;21)(p13;q22)(formerly TEL-AML1)",
                                 description="A translocation between chromosomes 12 and 21 involved in TEL-AML1 oncogene formation. The translocation produces a chimeric gene encoding a protein consisting of the N-terminal HLH domain of the TEL ETS-like transcription factor fused with a nearly complete AML1 protein. t(12;21) is the most frequent translocation causing ALL, accounting for 20% of ALL cases.",
                                 meaning=NCIT.C13727) )
        setattr(cls, "MLL Rearrangement (Translocation)",
                PermissibleValue(text="MLL Rearrangement (Translocation)",
                                 description="A cytogenetic abnormality that refers to any translocation involving the MLL (KMT2A) gene.",
                                 meaning=NCIT.C167144) )
        setattr(cls, "t(4;11)(q21;q23) / MLL-MLLT2(AF4)",
                PermissibleValue(text="t(4;11)(q21;q23) / MLL-MLLT2(AF4)",
                                 description="A chromosomal abnormality consisting of the translocation of 4q21 with 11q23.",
                                 meaning=NCIT.C36365) )
        setattr(cls, "t(8;14)(q24;q32) or other variant of B-ALL",
                PermissibleValue(text="t(8;14)(q24;q32) or other variant of B-ALL",
                                 description="A chromosomal translocation that fuses 8q24 with 14q32. This juxtaposes the MYC gene with the promoter regions of the immunoglobulin heavy chain gene locus, which results in overexpression of Myc proto-oncogene protein in B-cells bearing the translocation.",
                                 meaning=NCIT.C36319) )
        setattr(cls, "t(9;22)(q34;q11.2) ABL/BCR",
                PermissibleValue(text="t(9;22)(q34;q11.2) ABL/BCR",
                                 description="A translocation between chromosome 9 and chromosome 22 that may be associated with Philadelphia chromosome and increased susceptibility to several types of leukemia.",
                                 meaning=NCIT.C13271) )
        setattr(cls, "Trisomy 10",
                PermissibleValue(text="Trisomy 10",
                                 description="A chromosomal abnormality consisting of the presence of a third copy of chromosome 10 in somatic cells.",
                                 meaning=NCIT.C81729) )
        setattr(cls, "Trisomy 17",
                PermissibleValue(text="Trisomy 17",
                                 description="A chromosomal abnormality consisting of the presence of a third copy of chromosome 17 in somatic cells.",
                                 meaning=NCIT.C37865) )
        setattr(cls, "Trisomy 4",
                PermissibleValue(text="Trisomy 4",
                                 description="A chromosomal abnormality consisting of the presence of a third copy of chromosome 4 in somatic cells.",
                                 meaning=NCIT.C36530) )
        setattr(cls, "CEBPA Mutation - Biallelic",
                PermissibleValue(text="CEBPA Mutation - Biallelic",
                                 description="The presence of mutations in both alleles of the CEBPA gene.",
                                 meaning=NCIT.C157569) )
        setattr(cls, "CEBPA Mutation - Monoallelic",
                PermissibleValue(text="CEBPA Mutation - Monoallelic",
                                 description="The presence of mutations in only one allele of the CEBPA gene.",
                                 meaning=NCIT.C168774) )
        setattr(cls, "CEBPA Mutation - Mutation Unspecified",
                PermissibleValue(text="CEBPA Mutation - Mutation Unspecified",
                                 description="Mutation of the CEBPA gene encoding CCAAT/enhancer binding protein alpha. It is seen in acute myeloid leukemias usually associated with a normal karyotype.",
                                 meaning=NCIT.C38372) )
        setattr(cls, "CKIT Mutation - Ex17",
                PermissibleValue(text="CKIT Mutation - Ex17",
                                 description="A molecular genetic abnormality indicating the presence of a mutation in exon 17 of the KIT gene located within 4q11-q12.",
                                 meaning=NCIT.C116396) )
        setattr(cls, "CKIT Mutation - Ex8",
                PermissibleValue(text="CKIT Mutation - Ex8",
                                 description="A molecular genetic abnormality indicating the presence of a mutation in exon 8 of the KIT gene located within 4q11-q12.",
                                 meaning=NCIT.C128660) )
        setattr(cls, "CKIT Mutation - Unspecified",
                PermissibleValue(text="CKIT Mutation - Unspecified",
                                 description="A molecular genetic abnormality that refers to mutation of the c-kit (CD117) proto-oncogene. It is associated with the development of gastrointestinal stromal tumor and gastrointestinal autonomic nerve tumor. It has also been described in acute myeloid leukemias, dysgerminomas, and seminomas.",
                                 meaning=NCIT.C39712) )
        setattr(cls, "del(13q)(13q14-21)",
                PermissibleValue(text="del(13q)(13q14-21)",
                                 description="A cytogenetic abnormality that refers to deletion of chromosome bands 14-21 on the long arm of chromosome 13.",
                                 meaning=NCIT.C168770) )
        setattr(cls, "del(17p)",
                PermissibleValue(text="del(17p)",
                                 description="A cytogenetic abnormality that refers to the loss of all or part of the short arm of chromosome 17 (17p).",
                                 meaning=NCIT.C36499) )
        setattr(cls, "del(5q)(5q31-q32)",
                PermissibleValue(text="del(5q)(5q31-q32)",
                                 description="A cytogenetic abnormality that refers to deletion of chromosome bands 31-32 on the long arm of chromosome 5.",
                                 meaning=NCIT.C168769) )
        setattr(cls, "der.12p",
                PermissibleValue(text="der.12p",
                                 description="A cytogenetic abnormality involving the rearrangement of two or more other chromosomes with the short arm of chromosome 12 (12p).",
                                 meaning=NCIT.C173542) )
        setattr(cls, "FLT3 Internal Tandem Duplication (ITD)",
                PermissibleValue(text="FLT3 Internal Tandem Duplication (ITD)",
                                 description="A genetic abnormality that arises from duplications of the juxtamembrane portion of the gene and results in constitutive activation of the FLT3 receptor tyrosine kinase protein in early hematopoietic progenitor cells. It is associated with acute myelogenous leukemia where it appears to correlate with a poor prognosis.",
                                 meaning=NCIT.C67494) )
        setattr(cls, "FLT3 Tyrosine Kinase Domain (TKD)",
                PermissibleValue(text="FLT3 Tyrosine Kinase Domain (TKD)",
                                 description="Single nucleotide mutations in the tyrosine kinase domain encoded by the human FLT3 gene that are associated with acute myeloid leukemia and poor prognosis.",
                                 meaning=NCIT.C67495) )
        setattr(cls, "GATA1 Mutation",
                PermissibleValue(text="GATA1 Mutation",
                                 description="A change in the nucleotide sequence of the GATA1 gene.",
                                 meaning=NCIT.C82340) )
        setattr(cls, "inv(16)(p13.3q24.3) / CBFA2T3-GLIS2",
                PermissibleValue(text="inv(16)(p13.3q24.3) / CBFA2T3-GLIS2",
                                 description="A pericentric chromosomal inversion that involves chromosome 16. It is associated with CBFA2T3/GLIS2 fusions and pediatric acute megakaryoblastic leukemia.",
                                 meaning=NCIT.C167195) )
        setattr(cls, "inv(16)(p13q22)",
                PermissibleValue(text="inv(16)(p13q22)",
                                 description="A chromosomal inversion that involves chromosome 16. It is associated with the development of acute myeloid leukemia CBFB-MYH11, acute myelomonocytic leukemia with abnormal eosinophils, and granulocytic sarcoma.",
                                 meaning=NCIT.C36373) )
        setattr(cls, "inv(3)(q21.3;q26.2)",
                PermissibleValue(text="inv(3)(q21.3;q26.2)",
                                 description="A cytogenetic abnormality that refers to a paracentric inversion involving breakpoints on the long (q23.1 and q26.2) of chromosome 3. It is associated with acute myeloid leukemia.",
                                 meaning=NCIT.C36407) )
        setattr(cls, "K-RAS Mutation",
                PermissibleValue(text="K-RAS Mutation",
                                 description="A change in the nucleotide sequence of the KRAS gene.",
                                 meaning=NCIT.C41361) )
        setattr(cls, "MLL Other Partner",
                PermissibleValue(text="MLL Other Partner",
                                 description="A chromosomal abnormality consisting of the translocation of genetic material from any one of several chromosomes to the 11q23.3 region, resulting in an MLL gene rearrangement.",
                                 meaning=NCIT.C36517) )
        setattr(cls, "Monosomy 5",
                PermissibleValue(text="Monosomy 5",
                                 description="A cytogenetic aneuploidy abnormality that refers to the presence of one chromosome 5 only. It is associated with the development of refractory anemia with excess blasts, refractory anemia with multilineage dysplasia, and refractory anemia with multilineage dysplasia and ringed sideroblasts.",
                                 meaning=NCIT.C36523) )
        setattr(cls, "Monosomy 7",
                PermissibleValue(text="Monosomy 7",
                                 description="A chromosomal abnormality consisting of the absence of one of the copies of chromosome 7 in somatic cells.",
                                 meaning=NCIT.C36411) )
        setattr(cls, "N-RAS Mutation",
                PermissibleValue(text="N-RAS Mutation",
                                 description="A change in the structure of the NRAS gene.",
                                 meaning=NCIT.C41381) )
        setattr(cls, "Non-KMT2A MLLT10",
                PermissibleValue(text="Non-KMT2A MLLT10",
                                 description="An indication that a cytogenetic rearrangement involving MLLT10 but not involving KMT2A was detected in a sample.",
                                 meaning=NCIT.C168771) )
        setattr(cls, "NPM1 Mutation",
                PermissibleValue(text="NPM1 Mutation",
                                 description="Mutation of the nucleophosmin gene. It is seen in acute myeloid leukemias usually associated with a normal karyotype.",
                                 meaning=NCIT.C168774) )
        setattr(cls, "PTPN11 Mutation",
                PermissibleValue(text="PTPN11 Mutation",
                                 description="Mutation of the protein tyrosine phosphatase, non-receptor type 11 gene. It is seen in cases of juvenile myelomonocytic leukemia.",
                                 meaning=NCIT.C82612) )
        setattr(cls, "RUNX1 Mutation",
                PermissibleValue(text="RUNX1 Mutation",
                                 description="A change in the nucleotide sequence of the RUNX1 gene.",
                                 meaning=NCIT.C38362) )
        setattr(cls, "t(1;11)(q21;q23) / MLL-MLLT11(AF1Q)",
                PermissibleValue(text="t(1;11)(q21;q23) / MLL-MLLT11(AF1Q)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q21) of chromosome 1 and the long arm (q23) of chromosome 11. It is associated with KMT2A (MLL)/MLLT11 (AF1Q) fusions, acute myeloid leukemia and some cases of acute lymphoblastic leukemia.",
                                 meaning=NCIT.C168759) )
        setattr(cls, "t(1;22)(RBM15-MKL1)",
                PermissibleValue(text="t(1;22)(RBM15-MKL1)",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p13.3) of chromosome 1 and the long arm (q13.1) of chromosome 22. It is associated with RBM15/MRTFA (MKL1) fusions and acute megakaryocytic leukemia.",
                                 meaning=NCIT.C36417) )
        setattr(cls, "t(10;11)(p11.2;q23)",
                PermissibleValue(text="t(10;11)(p11.2;q23)",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p11.2) of chromosome 10 and the long arm (q23) of chromosome 11. It is associated with KMT2A (MLL)/ABI1 fusions and acute myeloid leukemia.",
                                 meaning=NCIT.C168758) )
        setattr(cls, "t(10;11)(p12;q23) / MLL-MLLT10(AF10)",
                PermissibleValue(text="t(10;11)(p12;q23) / MLL-MLLT10(AF10)",
                                 description="A cytogenetic abnormality that refers to the translocation of chromosome 10p12 with chromosome 11q23. It is associated with acute myeloid leukemia in childhood.",
                                 meaning=NCIT.C132102) )
        setattr(cls, "t(11;15)(p15;q35) / NUP98/JARID1A",
                PermissibleValue(text="t(11;15)(p15;q35) / NUP98/JARID1A",
                                 description="A cytogenetic abnormality that refers to the translocation of chromosome 11p15 with chromosome 15q35. It results in the formation of NUP98/JARID1A fusion gene. It is associated with the development of acute myeloid leukemia with t(11;15)(p15;q35); NUP98-JARID1A.",
                                 meaning=NCIT.C131505) )
        setattr(cls, "t(11;17)(AF17)",
                PermissibleValue(text="t(11;17)(AF17)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 11 and the long arm (q12-21) of chromosome 19. It is associated with KMT2A (MLL) fusions, including those with MLLT6 (AF17), and acute myeloid leukemia.",
                                 meaning=NCIT.C168760) )
        setattr(cls, "t(11;19)(q23;p13.1) / (MLL-ELL)",
                PermissibleValue(text="t(11;19)(q23;p13.1) / (MLL-ELL)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 11 and the short arm (p13.1) of chromosome 19. It is associated with the development of acute myeloid leukemia with variant MLL translocations and topoisomerase II inhibitor-related acute myeloid leukemia.",
                                 meaning=NCIT.C36371) )
        setattr(cls, "t(11;19)(q23;p13.3) / (MLL-ENL)",
                PermissibleValue(text="t(11;19)(q23;p13.3) / (MLL-ENL)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23.3) of chromosome 11 and the short arm (p13.3) of chromosome 19. It is associated with KMT2A (MLL)/MLLT1 (ENL) fusions and acute myeloid leukemia.",
                                 meaning=NCIT.C36372) )
        setattr(cls, "t(11;19)(q23;p13) / (MLL-ENL)/(MLL-ELL)",
                PermissibleValue(text="t(11;19)(q23;p13) / (MLL-ENL)/(MLL-ELL)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 11 and the short arm (p13) of chromosome 19. It is associated with KMT2A (MLL) fusions, including those with MLLT1 (ENL) and ELL, and acute myeloid leukemia.",
                                 meaning=NCIT.C168764) )
        setattr(cls, "t(15;17)(q24;q21)",
                PermissibleValue(text="t(15;17)(q24;q21)",
                                 description="A chromosomal translocation associated with creation of a fusion between the PML and RARA genes. It is seen in variants of acute promyelocytic leukemia.",
                                 meaning=NCIT.C27758) )
        setattr(cls, "t(16;16)(p13.1;q22)",
                PermissibleValue(text="t(16;16)(p13.1;q22)",
                                 description="A chromosomal translocation that involves chromosome 16. It is often associated with the development of acute myeloid leukemia CBFB-MYH11, acute myelomonocytic leukemia with abnormal eosinophils, and granulocytic sarcoma.",
                                 meaning=NCIT.C27759) )
        setattr(cls, "t(16;21)(p11;q22) / FUS/ERG",
                PermissibleValue(text="t(16;21)(p11;q22) / FUS/ERG",
                                 description="A chromosomal translocation involving the FUS gene on chromosome 16p11 and the ERG gene on chromosome 21q22.",
                                 meaning=NCIT.C36616) )
        setattr(cls, "t(16;21)(q24;q22) / RUNX1-CBFA2T3",
                PermissibleValue(text="t(16;21)(q24;q22) / RUNX1-CBFA2T3",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q24) of chromosome 16 and the long arm (q22) of chromosome 22. It is associated with RUNX1/CBFA2T3 fusions, myelodysplastic syndromes and acute myeloid leukemia.",
                                 meaning=NCIT.C168773) )
        setattr(cls, "t(2;12)",
                PermissibleValue(text="t(2;12)",
                                 description="A cytogenetic abnormality that involves a translocation between chromosomes 2 and 12.",
                                 meaning=NCIT.C173543) )
        setattr(cls, "t(3;12)(q23;p12.3)(ETV6/EVI1)",
                PermissibleValue(text="t(3;12)(q23;p12.3)(ETV6/EVI1)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 3 and the shot arm (p12.3) of chromosome 12. It is associated with ETV6/MECOM (EVI1) fusions, myeloproliferative disorders, myelodysplastic syndromes and acute myelogenous leukemia.",
                                 meaning=NCIT.C168766) )
        setattr(cls, "t(3;3)(q21;q26.2), RPN1-EVI1",
                PermissibleValue(text="t(3;3)(q21;q26.2), RPN1-EVI1",
                                 description="A cytogenetic abnormality that refers to the translocation where both breakpoints are on the long arm (q23.1 and q26.2) of chromosome 3. It is associated with acute myeloid leukemia.",
                                 meaning=NCIT.C36406) )
        setattr(cls, "t(3;5)(q25;q34) / NPM1/MLF1",
                PermissibleValue(text="t(3;5)(q25;q34) / NPM1/MLF1",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q25) of chromosome 3 and the long arm (q34) of chromosome 5. It is associated with the development of acute myeloid leukemia arising from myelodysplastic syndrome, acute myeloid leukemia with multilineage dysplasia, and acute myeloid leukemia with myelodysplasia-related changes.",
                                 meaning=NCIT.C36415) )
        setattr(cls, "t(5;11)(q35;p15) / NSD1/NUP98",
                PermissibleValue(text="t(5;11)(q35;p15) / NSD1/NUP98",
                                 description="A cytogenetic abnormality that refers to the translocation of chromosome 11p15 with chromosome 5q35. It results in the formation of NUP98/NSD1 fusion gene. It is associated with the development of acute myeloid leukemia with t(5;11)(q35;p15); NUP98-NSD1.",
                                 meaning=NCIT.C131503) )
        setattr(cls, "t(6;11)(q27;q23) / MLL-MLLT4(AF6)",
                PermissibleValue(text="t(6;11)(q27;q23) / MLL-MLLT4(AF6)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q27) of chromosome 6 and the long arm (q23) of chromosome 11. It is associated with the development of de novo acute myeloid leukemia.",
                                 meaning=NCIT.C36610) )
        setattr(cls, "t(6;9)(p23;q34) DEK/NUP214",
                PermissibleValue(text="t(6;9)(p23;q34) DEK/NUP214",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p23) of chromosome 6 and the long arm (q34.1) of chromosome 9. It is associated with DEK/NUP214 fusions, acute myeloid leukemia and myelodysplastic syndromes.",
                                 meaning=NCIT.C36532) )
        setattr(cls, "t(7;12)(q36;p13) / HLXB9(MNX1)/ETV6(TEL)",
                PermissibleValue(text="t(7;12)(q36;p13) / HLXB9(MNX1)/ETV6(TEL)",
                                 description="A chromosomal translocation involving the ETV6 gene on chromosome 12p13 and HLXB9 gene on chromosome 7q36.",
                                 meaning=NCIT.C122689) )
        setattr(cls, "t(8;16)MOZ/CBP",
                PermissibleValue(text="t(8;16)MOZ/CBP",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p11.2) of chromosome 8 and the short arm (p13.3) of chromosome 16. It is associated with KAT6A/CREBBP fusions and acute myeloid leukemia.",
                                 meaning=NCIT.C167194) )
        setattr(cls, "t(9;11)(p22;q23) / MLL-MLLT3(AF9)",
                PermissibleValue(text="t(9;11)(p22;q23) / MLL-MLLT3(AF9)",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p21.3) of chromosome 9 and the long arm (q23.3) of chromosome 11. It is associated with the development of acute myeloid leukemia with the MLLT3-MLL fusion gene transcript.",
                                 meaning=NCIT.C36370) )
        setattr(cls, "t(9;22)(q34;q11.2) / ABL/BCR",
                PermissibleValue(text="t(9;22)(q34;q11.2) / ABL/BCR",
                                 description="A translocation between chromosomes 9 and 22 that is associated with the Philadelphia chromosome.",
                                 meaning=NCIT.C13271) )
        setattr(cls, "Trisomy 8",
                PermissibleValue(text="Trisomy 8",
                                 description="A chromosomal abnormality consisting of the presence of a third copy of chromosome 8 in somatic cells.",
                                 meaning=NCIT.C36396) )
        setattr(cls, "WT1 Mutation",
                PermissibleValue(text="WT1 Mutation",
                                 description="A change in the nucleotide sequence of the WT1 gene.",
                                 meaning=NCIT.C146726) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Chromosome 11 Loss",
                PermissibleValue(text="Chromosome 11 Loss",
                                 description="A cytogenic abnormality that refers to loss of all or part of chromosome 11.",
                                 meaning=NCIT.C36549) )
        setattr(cls, "Chromosome 14q Loss",
                PermissibleValue(text="Chromosome 14q Loss",
                                 description="A cytogenetic abnormality that refers to the loss of all or part of the long arm of chromosome 14 (14q).",
                                 meaning=NCIT.C39795) )
        setattr(cls, "CTNNB1 Variant",
                PermissibleValue(text="CTNNB1 Variant",
                                 description="A change in the nucleotide sequence of the CTNNB1 gene.",
                                 meaning=NCIT.C36659) )
        setattr(cls, "MYC Amplification",
                PermissibleValue(text="MYC Amplification",
                                 description="A molecular genetic abnormality indicating the presence of multiple copies of the MYC gene.",
                                 meaning=NCIT.C36641) )
        setattr(cls, "MYCN Amplification",
                PermissibleValue(text="MYCN Amplification",
                                 description="A laboratory test in which cells in a sample of tumor tissue or bone marrow are checked to see how many copies of the MYCN gene are in the tumor DNA.") )
        setattr(cls, "PTCH1 Variant",
                PermissibleValue(text="PTCH1 Variant",
                                 description="A change in the nucleotide sequence of the PTCH1 gene.",
                                 meaning=NCIT.C133669) )
        setattr(cls, "SMO Variant",
                PermissibleValue(text="SMO Variant",
                                 description="A molecular genetic abnormality that refers to the mutation of the SMO gene located on chromosome 7q32.3.",
                                 meaning=NCIT.C124793) )
        setattr(cls, "SUFU Variant",
                PermissibleValue(text="SUFU Variant",
                                 description="A change in the nucleotide sequence of the SUFU gene.",
                                 meaning=NCIT.C189843) )
        setattr(cls, "TP53 Variant",
                PermissibleValue(text="TP53 Variant",
                                 description="A change in the nucleotide sequence of the TP53 gene.",
                                 meaning=NCIT.C118396) )
        setattr(cls, "ACD Variant",
                PermissibleValue(text="ACD Variant",
                                 description="A change in the nucleotide sequence of the ACD gene.",
                                 meaning=NCIT.C152088) )
        setattr(cls, "ALK Variant",
                PermissibleValue(text="ALK Variant",
                                 description="A molecular genetic abnormality that refers to the presence of a mutation in the ALK gene.",
                                 meaning=NCIT.C81945) )
        setattr(cls, "ANKRD26 Variant",
                PermissibleValue(text="ANKRD26 Variant",
                                 description="A change in the nucleotide sequence of the ANKRD26 gene.",
                                 meaning=NCIT.C151909) )
        setattr(cls, "t(2;16)(q35;p11)",
                PermissibleValue(text="t(2;16)(q35;p11)",
                                 description="A chromosomal translocation involving the FEV gene at 2q35 and the FUS gene at 16p11.",
                                 meaning=NCIT.C174465) )
        setattr(cls, "12q Gain",
                PermissibleValue(text="12q Gain",
                                 description="A chromosomal aberration where there are 3 copies of the long arm of chromosome 12. This aberration is associated with 12q duplication syndrome.",
                                 meaning=NCIT.C36441) )
        setattr(cls, "16q Loss",
                PermissibleValue(text="16q Loss",
                                 description="A cytogenetic abnormality that refers to the loss of all or part of the long arm of chromosome 16 (16q).",
                                 meaning=NCIT.C36515) )
        setattr(cls, "1q Gain",
                PermissibleValue(text="1q Gain",
                                 description="A cytogenetic abnormality that refers to allelic gain within the chromosomal arm 1q.",
                                 meaning=NCIT.C36482) )
        setattr(cls, "8q Gain",
                PermissibleValue(text="8q Gain",
                                 description="A chromosomal abnormality that refers to the gain of genetic material in the long arm of chromosome 8.",
                                 meaning=NCIT.C36488) )
        setattr(cls, "BCOR Rearranged",
                PermissibleValue(text="BCOR Rearranged",
                                 description="A molecular abnormality indicating rearrangement of the BCOR gene.",
                                 meaning=NCIT.C174461) )
        setattr(cls, "BCOR-MAML3",
                PermissibleValue(text="BCOR-MAML3",
                                 description="A fusion gene that results from a chromosomal translocation t(X;4)(p11;q31) which fuses part of exon 15 of the BCOR gene in frame with exon 2 of the MAML3 gene. This fusion is associated with undifferentiated small blue round cell sarcomas.",
                                 meaning=NCIT.C174487) )
        setattr(cls, "CCNB3-BCOR",
                PermissibleValue(text="CCNB3-BCOR",
                                 description="A fusion gene that results from a paracentric chromosomal inversion inv(X)(p11.4;p11.22) which fuses the stop codon of the BCOR gene to exon 5 of the CCNB3 gene. This fusion is associated with bone sarcomas.",
                                 meaning=NCIT.C139666) )
        setattr(cls, "CIC Rearranged",
                PermissibleValue(text="CIC Rearranged",
                                 description="A molecular abnormality indicating rearrangement of the CIC gene.",
                                 meaning=NCIT.C165668) )
        setattr(cls, "CIC-DUX4",
                PermissibleValue(text="CIC-DUX4",
                                 description="A fusion gene that results from a chromosomal translocation t(4;19)(q35;q13) which fuses exon 20 of the CIC gene to exon 1 of the DUX4 gene. This fusion is associated with soft tissue sarcoma.",
                                 meaning=NCIT.C139663) )
        setattr(cls, "CIC-DUX4L10",
                PermissibleValue(text="CIC-DUX4L10",
                                 description="A fusion gene that results from a chromosomal translocation t(10;19)(q26;q13) which fuses the CIC gene to the DUX4L10 gene, a pseudogene that is member of the DUX4L gene family cluster found at 10q26. This fusion is associated with the CIC-rearranged small blue round cell subtype of soft tissue sarcoma.",
                                 meaning=NCIT.C174463) )
        setattr(cls, "EWSR1 Rearranged",
                PermissibleValue(text="EWSR1 Rearranged",
                                 description="A molecular abnormality indicating rearrangement of the EWSR1 gene.",
                                 meaning=NCIT.C165667) )
        setattr(cls, "EWSR1-ATF1",
                PermissibleValue(text="EWSR1-ATF1",
                                 description="A fusion gene that results from a chromosomal translocation t(12;22)(q13;q12) which fuses the first 7 or 8 exons of the EWSR1 gene on the 5' side of exon 4 or 5 of the ATF1 gene. This rearrangement is associated with both malignant clear cell sarcoma of the soft tissue and angiomatoid fibrous histiocytoma.",
                                 meaning=NCIT.C99216) )
        setattr(cls, "EWSR1-CREB1",
                PermissibleValue(text="EWSR1-CREB1",
                                 description="A fusion gene that results from a chromosomal translocation t(2;22)(q34;q12) which fuses the first 7 exons of the EWSR1 gene to the 5' side of exon 7 of the CREB1 gene. This rearrangement is associated with angiomatoid fibrous histiocytoma and rare cases of malignant clear cell sarcoma of the soft tissue.",
                                 meaning=NCIT.C99249) )
        setattr(cls, "EWSR1-DDIT3",
                PermissibleValue(text="EWSR1-DDIT3",
                                 description="A fusion gene that results from a chromosomal translocation t(12;22)(q13;p11) which fuses either the first 7 or the first 10 exons of the EWSR1 gene with exon 2 of the DDIT3 gene. This rearrangement is associated with myxoid liposarcoma.",
                                 meaning=NCIT.C99200) )
        setattr(cls, "EWSR1-ERG",
                PermissibleValue(text="EWSR1-ERG",
                                 description="A fusion gene that results from a chromosomal translocation t(21;22)(q21;q12) which fuses the EWSR1 gene with the ERG gene. This rearrangement is associated with both Ewing tumor/peripheral primitive neuroectodermal tumor and desmoplastic small round cell sarcoma.",
                                 meaning=NCIT.C99211) )
        setattr(cls, "EWSR1-ETV1",
                PermissibleValue(text="EWSR1-ETV1",
                                 description="A fusion gene that results from a chromosomal translocation t(7;22)(p22;q12) which fuses exon 7 of the EWSR1 gene to either exon 10 or 11 of the ETV1 gene. This rearrangement is associated with Ewing sarcoma.",
                                 meaning=NCIT.C99259) )
        setattr(cls, "EWSR1-ETV4",
                PermissibleValue(text="EWSR1-ETV4",
                                 description="A fusion gene (~2.1 kb) that results from a chromosomal translocation t(17;22)(q21;q12) which fuses the first seven exons of the EWSR1 gene to the last 6 exons of the ETV4 gene. This rearrangement is associated with Ewing sarcoma.",
                                 meaning=NCIT.C99262) )
        setattr(cls, "EWSR1-FEV",
                PermissibleValue(text="EWSR1-FEV",
                                 description="A fusion gene that results from a chromosomal translocation t(2;22)(q36;q12) which fuses either the first seven or ten exons of the EWSR1 gene with exon 1 or 2 of the FEV gene. This rearrangement is associated with Ewing tumor/peripheral primitive neuroectodermal tumor.",
                                 meaning=NCIT.C99226) )
        setattr(cls, "EWSR1-FLI1",
                PermissibleValue(text="EWSR1-FLI1",
                                 description="A fusion gene that results from a chromosomal translocation t(11;22)(q24;q12) which fuses the first seven or ten exons of the EWSR1 gene with exon 5, 6 or 8 of the FLI1 gene. This rearrangement is associated with Ewing tumor/peripheral primitive neuroectodermal tumor.",
                                 meaning=NCIT.C99202) )
        setattr(cls, "EWSR1-KLF17",
                PermissibleValue(text="EWSR1-KLF17",
                                 description="A rare fusion gene that results from a chromosomal translocation t(1;22)(p34;q12) which fuses portions of the EWSR1 gene with the 5'-untranslated region of the KLF17 gene. This rearrangement is associated with myoepithelial tumors of soft tissue and bone.",
                                 meaning=NCIT.C174474) )
        setattr(cls, "EWSR1-NR4A3",
                PermissibleValue(text="EWSR1-NR4A3",
                                 description="A fusion gene that results from a chromosomal translocation t(9;22)(q22-31;q11-12) which fuses the first half of the EWSR1 gene to the entire coding sequence of the NR4A3 gene. This rearrangement is associated with extraskeletal myxoid chondrosarcomas.",
                                 meaning=NCIT.C99252) )
        setattr(cls, "EWSR1-PBX1",
                PermissibleValue(text="EWSR1-PBX1",
                                 description="A fusion gene that results from a chromosomal translocation t(1;22)(q23;q12) which fuses exon 8 of the EWSR1 gene to exon 5 of the PBX1 gene. This fusion may be associated with myoepithelioma.",
                                 meaning=NCIT.C139668) )
        setattr(cls, "EWSR1-POU5F1",
                PermissibleValue(text="EWSR1-POU5F1",
                                 description="A fusion gene that results from a chromosomal translocation t(6;22)(p21;q12) which fuses the first six exons of the EWSR1 gene to exon 2 of the POU5F1 gene. This rearrangement is associated with hidradenoma and one case of mucoepidermoid carcinoma of the salivary glands.",
                                 meaning=NCIT.C99256) )
        setattr(cls, "EWSR1-WT1",
                PermissibleValue(text="EWSR1-WT1",
                                 description="A fusion gene that results from a chromosomal translocation t(11;22)(p13;q12) which fuses the intron between exons 7 and 8 of the EWSR1 gene with the intron between exons 7 and 8 of the WT1 gene. This rearrangement is associated with desmoplastic small round cell sarcoma.",
                                 meaning=NCIT.C99213) )
        setattr(cls, "EWSR1-ZNF444",
                PermissibleValue(text="EWSR1-ZNF444",
                                 description="A fusion gene that results from a chromosomal translocation t(19;22)(q13;q12) which fuses exon 8 of the EWSR1 gene to exon 5 of the ZNF444 gene. This fusion may be associated with myoepithelioma.",
                                 meaning=NCIT.C139731) )
        setattr(cls, "FUS Rearranged",
                PermissibleValue(text="FUS Rearranged",
                                 description="A molecular abnormality indicating rearrangement of the FUS gene.",
                                 meaning=NCIT.C174462) )
        setattr(cls, "FUS Translocation Present",
                PermissibleValue(text="FUS Translocation Present",
                                 description="A cytogenetic abnormality that refers to any translocation involving the FUS gene.",
                                 meaning=NCIT.C168530) )
        setattr(cls, "FUS-DDIT3",
                PermissibleValue(text="FUS-DDIT3",
                                 description="A fusion gene that results from a chromosomal translocation t(12;16)(q13;p11) which fuses either the first 5, 7 or 8 exons of the FUS gene with exon 2 of the DDIT3 gene. This rearrangement is associated with myxoid liposarcoma.",
                                 meaning=NCIT.C99279) )
        setattr(cls, "FUS-ERG",
                PermissibleValue(text="FUS-ERG",
                                 description="A fusion gene that results from a chromosomal translocation t(16;21)(p11;q22) which fuses the FUS gene with the ERG gene. This rearrangement is associated with acute myeloid leukemia.",
                                 meaning=NCIT.C99281) )
        setattr(cls, "FUS-FEV",
                PermissibleValue(text="FUS-FEV",
                                 description="A fusion gene that results from a chromosomal translocation t(2;16)(q35;p11) which fuses exon 10 of the FUS gene with exon 2 of the FEV gene. This rearrangement is associated with Ewing sarcoma.",
                                 meaning=NCIT.C174466) )
        setattr(cls, "FUS-KLF17",
                PermissibleValue(text="FUS-KLF17",
                                 description="A fusion gene that results from a chromosomal translocation t(1;16)(p34;p11) which fuses either intron 4 or exon 6 of the FUS gene with 5'-untranslated region of the KLF17 gene. This rearrangement is associated with myoepithelial tumors of soft tissue and bone.",
                                 meaning=NCIT.C174473) )
        setattr(cls, "inv(X)(p11.4;p11.22)",
                PermissibleValue(text="inv(X)(p11.4;p11.22)",
                                 description="A paracentric chromosomal inversion of the short arm of the X chromosome involving the BCOR gene at Xp11.4 and the CCNB3 gene at Xp11.22.",
                                 meaning=NCIT.C174489) )
        setattr(cls, "t(1;16)(p34;p11)",
                PermissibleValue(text="t(1;16)(p34;p11)",
                                 description="A chromosomal translocation involving the KLF17 gene at 1p34 and the FUS gene at 16p11.",
                                 meaning=NCIT.C174475) )
        setattr(cls, "t(1;22)(p34;q12)",
                PermissibleValue(text="t(1;22)(p34;q12)",
                                 description="A chromosomal translocation involving the KLF17 gene at 1p34 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174476) )
        setattr(cls, "t(1;22)(q23;q12)",
                PermissibleValue(text="t(1;22)(q23;q12)",
                                 description="A chromosomal translocation involving the PBX1 gene at 1q23 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174477) )
        setattr(cls, "t(10;19)(q26;q13)",
                PermissibleValue(text="t(10;19)(q26;q13)",
                                 description="A cytogenetic abnormality that refers to the translocation involving the genes CIC (capicua transcriptional suppressor) on chromosome 19 and DUX4L (double homeobox 4-like) on chromosome 10 resulting in CIC-DUX4L fusion.",
                                 meaning=NCIT.C120223) )
        setattr(cls, "t(11;22)(p13;q12)",
                PermissibleValue(text="t(11;22)(p13;q12)",
                                 description="A chromosomal translocation involving the WT1 gene on chromosome 11p31 and the EWSR1 gene on chromosome 22q12.",
                                 meaning=NCIT.C36375) )
        setattr(cls, "t(11;22)(q24;q12)",
                PermissibleValue(text="t(11;22)(q24;q12)",
                                 description="A chromosomal translocation involving the FLI1 gene on chromosome 11q24 and the EWSR1 gene on chromosome 22q12.",
                                 meaning=NCIT.C27214) )
        setattr(cls, "t(12;16)(q13;p11)",
                PermissibleValue(text="t(12;16)(q13;p11)",
                                 description="A chromosomal translocation that involves chromosome 12 and chromosome 16. It is often associated with the development of angiomatoid fibrous histiocytoma or myxoid liposarcoma.",
                                 meaning=NCIT.C36317) )
        setattr(cls, "t(12;22)(q13.12;q12)",
                PermissibleValue(text="t(12;22)(q13.12;q12)",
                                 description="A chromosomal translocation involving the ATF1 gene at 12q13.12 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174478) )
        setattr(cls, "t(12;22)(q13.3;q12)",
                PermissibleValue(text="t(12;22)(q13.3;q12)",
                                 description="A chromosomal translocation involving the DDIT3 gene at 12q13.3 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174479) )
        setattr(cls, "t(17;22)(q21;q12)",
                PermissibleValue(text="t(17;22)(q21;q12)",
                                 description="A chromosomal translocation involving the ETV4 gene on chromosome 17q21 and the EWSR1 gene on chromosome 22q12.",
                                 meaning=NCIT.C36369) )
        setattr(cls, "t(19;22)(q13;q12)",
                PermissibleValue(text="t(19;22)(q13;q12)",
                                 description="A chromosomal translocation involving the ZNF444 gene at 19q13 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174480) )
        setattr(cls, "t(2;22)(q33;q12)",
                PermissibleValue(text="t(2;22)(q33;q12)",
                                 description="A chromosomal translocation involving the CREB1 gene on chromosome 2q33 and the EWSR1 gene on chromosome 22q12.",
                                 meaning=NCIT.C37249) )
        setattr(cls, "t(2;22)(q34;q12)",
                PermissibleValue(text="t(2;22)(q34;q12)",
                                 description="A chromosomal translocation involving the CREB1 gene at 2q34 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174481) )
        setattr(cls, "t(16;21)(p11;q22)",
                PermissibleValue(text="t(16;21)(p11;q22)",
                                 description="A chromosomal translocation involving the FUS gene on chromosome 16p11 and the ERG gene on chromosome 21q22.",
                                 meaning=NCIT.C36616) )
        setattr(cls, "t(21;22)(q22;q12)",
                PermissibleValue(text="t(21;22)(q22;q12)",
                                 description="A chromosomal translocation associated with Ewing Sarcoma/Peripheral Primitive Neuroectodermal Tumor and Olfactory Neuroblastoma.",
                                 meaning=NCIT.C36367) )
        setattr(cls, "t(4;19)(q25;q13)",
                PermissibleValue(text="t(4;19)(q25;q13)",
                                 description="A chromosomal translocation involving the CIC gene at 19q13 and a second breakpoint on the long arm of chromosome 4 (4q25).",
                                 meaning=NCIT.C174482) )
        setattr(cls, "t(4;19)(q35;q13)",
                PermissibleValue(text="t(4;19)(q35;q13)",
                                 description="A cytogenetic abnormality that refers to the translocation involving the genes CIC (capicua transcriptional suppressor) on chromosome 19 and DUX4 (double homeobox 4) on chromosome 4 resulting in CIC-DUX4 fusion.",
                                 meaning=NCIT.C120222) )
        setattr(cls, "t(6;22)(p21;q12)",
                PermissibleValue(text="t(6;22)(p21;q12)",
                                 description="A chromosomal translocation involving the POU5F1 gene at 6p21 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174483) )
        setattr(cls, "t(7;22)(p22;q12)",
                PermissibleValue(text="t(7;22)(p22;q12)",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p22) of chromosome 7 and the long arm (q12) of chromosome 22.",
                                 meaning=NCIT.C36368) )
        setattr(cls, "t(9;17)(q22;q11)",
                PermissibleValue(text="t(9;17)(q22;q11)",
                                 description="A chromosomal translocation involving the NR4A3 gene on chromosome 9q31 and the TAF15 gene on chromosome 17q12.",
                                 meaning=NCIT.C36393) )
        setattr(cls, "t(9;22)(q22;q12)",
                PermissibleValue(text="t(9;22)(q22;q12)",
                                 description="A chromosomal translocation involving the NR4A3 gene at 9q22 and the EWSR1 gene at 22q12.",
                                 meaning=NCIT.C174484) )
        setattr(cls, "t(X;22((p11;q13)",
                PermissibleValue(text="t(X;22((p11;q13)",
                                 description="A chromosomal translocation involving the BCOR gene at Xp11 and the ZC3H7B gene at 22q13.",
                                 meaning=NCIT.C174495) )
        setattr(cls, "t(X;4)(p11;q31)",
                PermissibleValue(text="t(X;4)(p11;q31)",
                                 description="A chromosomal translocation involving the BCOR gene at Xp11 and the MAML3 gene at 4q31.",
                                 meaning=NCIT.C174490) )
        setattr(cls, "TAF15-NR4A3",
                PermissibleValue(text="TAF15-NR4A3",
                                 description="A fusion gene that results from a chromosomal translocation t(9;17)(q22;q11) which fuses exon 6 of the TAF15 gene to the entire coding sequence of the NR4A3 gene. This rearrangement is associated with extraskeletal myxoid chondrosarcoma.",
                                 meaning=NCIT.C99501) )
        setattr(cls, "ZC3H7B-BCOR",
                PermissibleValue(text="ZC3H7B-BCOR",
                                 description="A fusion gene that results from a chromosomal translocation t(X;22)(p11;q13) which fuses exon 10 of the ZC3H7B gene to either exon 7 or 8 of the BCOR gene. This fusion is associated with both undifferentiated small blue round cell sarcomas and endometrial stromal sarcomas.",
                                 meaning=NCIT.C174491) )
        setattr(cls, "45XO",
                PermissibleValue(text="45XO",
                                 description="Gonadal dysgenesis in an individual with 46,XX karyotype and female phenotype.",
                                 meaning=NCIT.C26900) )
        setattr(cls, "45XO w/ Y chromosomal material",
                PermissibleValue(text="45XO w/ Y chromosomal material",
                                 description="An abnormal sex chromosome karyotype where the individual is missing a second X chromosome and has some chromosomal material from the Y chromosome. The normal autosomal karyotype is present.",
                                 meaning=NCIT.C176781) )
        setattr(cls, "46XX",
                PermissibleValue(text="46XX",
                                 description="Gonadal dysgenesis in an individual with 46,XX karyotype and female phenotype.",
                                 meaning=NCIT.C120197) )
        setattr(cls, "46XY",
                PermissibleValue(text="46XY",
                                 description="Gonadal dysgenesis in an individual with 46.XY karyotype.",
                                 meaning=NCIT.C120198) )
        setattr(cls, "47XYY",
                PermissibleValue(text="47XYY",
                                 description="A condition caused by the presence of an extra Y chromosome resulting in 47,XYY karyotype in an individual with male phenotype. The condition is characterized by tall stature, increased risk of learning disabilities, and delayed development of speech and language. Testicular function and size are normal.",
                                 meaning=NCIT.C85237) )
        setattr(cls, "47XXY",
                PermissibleValue(text="47XXY",
                                 description="A sex chromosome disorder caused by the presence of an extra X chromosome in the male karyotype. Affected individuals are infertile and have a small penis and testes. They tend to have tall stature and long legs and may have difficulties with speech and language development. Gynecomastia may be present.",
                                 meaning=NCIT.C34752) )
        setattr(cls, "47XXX",
                PermissibleValue(text="47XXX",
                                 description="A condition caused by the presence of an extra X chromosome resulting in 47,XXX karyotype in an individual with female phenotype. The condition is characterized by tall stature, increased risk of learning disabilities, and delayed development of speech and language.",
                                 meaning=NCIT.C129718) )
        setattr(cls, "48XXXY",
                PermissibleValue(text="48XXXY",
                                 description="A rare sex chromosome abnormality in which a male child has 2 extra X chromosomes.",
                                 meaning=NCIT.C89799) )
        setattr(cls, "48XXXX",
                PermissibleValue(text="48XXXX",
                                 description="An abnormal sex chromosome karyotype where the individual has four copies of the X chromosome. The normal autosomal karyotype is present.",
                                 meaning=NCIT.C176787) )
        setattr(cls, "p.G1128A",
                PermissibleValue(text="p.G1128A",
                                 description="ALK alterations that result in the amino acid substitution of G -> A at 1128") )
        setattr(cls, "p.M1166R",
                PermissibleValue(text="p.M1166R",
                                 description="ALK alterations that result in the amino acid substitution of M -> R at 1166") )
        setattr(cls, "p.I1170N",
                PermissibleValue(text="p.I1170N",
                                 description="ALK alterations that result in the amino acid substitution of I -> N at 1170") )
        setattr(cls, "p.I1170S",
                PermissibleValue(text="p.I1170S",
                                 description="ALK alterations that result in the amino acid substitution of I -> S at 1170") )
        setattr(cls, "p.I1171N",
                PermissibleValue(text="p.I1171N",
                                 description="ALK alterations that result in the amino acid substitution of I -> N at 1171") )
        setattr(cls, "p.F1174*",
                PermissibleValue(text="p.F1174*",
                                 description="ALK alterations that result in the amino acid substitution of F -> [one of several other amino acids] at 1174") )
        setattr(cls, "p.R1192P ",
                PermissibleValue(text="p.R1192P ",
                                 description="ALK alterations that result in the amino acid substitution of R -> P at 1192") )
        setattr(cls, "p.L1196M ",
                PermissibleValue(text="p.L1196M ",
                                 description="ALK alterations that result in the amino acid substitution of L -> M at 1196") )
        setattr(cls, "p.F1245*",
                PermissibleValue(text="p.F1245*",
                                 description="ALK alterations that result in the amino acid substitution of F -> [one of several other amino acids] at 1245") )
        setattr(cls, "p.R1275*",
                PermissibleValue(text="p.R1275*",
                                 description="ALK alterations that result in the amino acid substitution of R -> [one of several other amino acids] at 1275") )
        setattr(cls, "p.Y1278S",
                PermissibleValue(text="p.Y1278S",
                                 description="ALK alterations that result in the amino acid substitution of Y -> S at 1278") )
        setattr(cls, "ALK Missense, NOS",
                PermissibleValue(text="ALK Missense, NOS",
                                 description="ALK missense alterations that that do not result in any of the above amino acid substitutions and do not amplify the copy number") )
        setattr(cls, "ALK Amplification, NOS",
                PermissibleValue(text="ALK Amplification, NOS",
                                 description="ALK alterations that are not missense and do amplify the copy number") )
        setattr(cls, "ALK Alteration, NOS",
                PermissibleValue(text="ALK Alteration, NOS",
                                 description="ALK alterations that are not missense and do not amplify the copy number") )
        setattr(cls, "None",
                PermissibleValue(text="None",
                                 description="Nothing was identified.",
                                 meaning=NCIT.C157432) )
        setattr(cls, "RB1 Allele 1",
                PermissibleValue(text="RB1 Allele 1",
                                 description="The RB1 gene provides instructions for making a protein called pRB. This protein acts as a tumor suppressor, which means that it regulates cell growth and keeps cells from dividing too fast or in an uncontrolled way.") )
        setattr(cls, "Chromosome 1q Gain (KIF14 Gain)",
                PermissibleValue(text="Chromosome 1q Gain (KIF14 Gain)",
                                 description="A cytogenetic abnormality that refers to allelic gain within the chromosomal arm 1q. KIF14 affects cell cycle arrest and cell viability in cervical cancer by regulating the p27(Kip1) pathway.") )
        setattr(cls, "Chromosome 2p Gain (MYCN Gain)",
                PermissibleValue(text="Chromosome 2p Gain (MYCN Gain)",
                                 description="A cytogenetic abnormality that refers to the duplication of all or part of the short arm of chromosome 2. MYCN gene is involved in transcriptional regulation and amplification of this gene is associated with a variety of tumors, most notably neuroblastomas.") )
        setattr(cls, "Chromosome 6p Gain (DEK/E2F3 Gain)",
                PermissibleValue(text="Chromosome 6p Gain (DEK/E2F3 Gain)",
                                 description="A chromosomal abnormality that refers to the gain of genetic material in the short arm of chromosome 6. DEK is a structurally unique and highly conserved protein with emerging roles in epigenetic and transcriptional regulation. E2F-3 regulates the expression of genes that determine the rate of proliferation of both primary and tumor cell lines.") )
        setattr(cls, "Chromosome 16q Loss (CDH11 Loss)",
                PermissibleValue(text="Chromosome 16q Loss (CDH11 Loss)",
                                 description="A cytogenetic abnormality that refers to the loss of all or part of the long arm of chromosome 16 (16q). CDH11 Gene is involved in the adherens junction. ") )

class KaryotypeStatusEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Normal = PermissibleValue(text="Normal",
                                   description="The assessment of the karyotype is that it is normal.",
                                   meaning=NCIT.C173277)
    Abnormal = PermissibleValue(text="Abnormal",
                                       description="Any abnormality in the number, length, centromere position, banding pattern or differences between the sex chromosomes that is not representative of a normal set of chromosomes.",
                                       meaning=NCIT.C168875)

    _defn = EnumDefinition(
        name="KaryotypeStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Normal Karyotype",
                PermissibleValue(text="Normal Karyotype",
                                 description="The assessment of the karyotype is that it is normal.",
                                 meaning=NCIT.C173277) )
        setattr(cls, "Abnormal Karyotype",
                PermissibleValue(text="Abnormal Karyotype",
                                 description="Any abnormality in the number, length, centromere position, banding pattern or differences between the sex chromosomes that is not representative of a normal set of chromosomes.",
                                 meaning=NCIT.C168875) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class StatusEnum(EnumDefinitionImpl):

    Present = PermissibleValue(text="Present",
                                     description="A finding of abnormality following an examination or observation confirming something, such as the presence of a disease, condition, or microorganism.",
                                     meaning=NCIT.C38758)
    Absent = PermissibleValue(text="Absent",
                                   description="A finding of normality following an examination or investigation looking for the presence of a microorganism, disease, or condition.",
                                   meaning=NCIT.C38757)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="StatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Done",
                PermissibleValue(text="Not Done",
                                 description="Indicates a task, process or examination that has either not been initiated or not been completed.",
                                 meaning=NCIT.C49484) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class VariationTypeEnum(EnumDefinitionImpl):

    Deletion = PermissibleValue(text="Deletion",
                                       description="The point at which one or more contiguous nucleotides were excised. (Source: The Sequence Ontology) Should be used when the type of deletion is not specified.",
                                       meaning=NCIT.C19296)
    Translocation = PermissibleValue(text="Translocation",
                                                 description="A region of nucleotide sequence that has translocated to a new position. The observed adjacency of two previously separated regions. (Source: The Sequence Ontology)",
                                                 meaning=NCIT.C3420)
    Inversion = PermissibleValue(text="Inversion",
                                         description="A continuous nucleotide sequence is inverted in the same position. (Source: The Sequence Ontology)",
                                         meaning=NCIT.C45589)
    Rearrangement = PermissibleValue(text="Rearrangement",
                                                 description="Any genetic rearrangement that is not otherwise specified.",
                                                 meaning=NCIT.C36541)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned. ",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Isochromosome = PermissibleValue(text="Isochromosome",
                                                 description="Isochromosomes are chromosomes composed of mirror images of one of the arms of the chromosome.")
    Insertion = PermissibleValue(text="Insertion",
                                         description="The sequence of one or more nucleotides added between two adjacent nucleotides in the sequence. (Source: The Sequence Ontology)",
                                         meaning=SO["0000667"])
    Substitution = PermissibleValue(text="Substitution",
                                               description="A sequence alteration where the length of the change in the variant is the same as that of the reference. (Source: The Sequence Ontology)",
                                               meaning=SO["1000002"])
    Duplication = PermissibleValue(text="Duplication",
                                             description="An insertion which derives from, or is identical in sequence to, nucleotides present at a known location in the genome. (Source: The Sequence Ontology)",
                                             meaning=SO["1000035"])

    _defn = EnumDefinition(
        name="VariationTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Chromosome Arm-Level Aneuploidy (CAA)",
                PermissibleValue(text="Chromosome Arm-Level Aneuploidy (CAA)",
                                 description="Chromosome arm aneuploidy (CAA) is characterized by copy number gain or loss of chromosome arms. CAA is the most prevalent type of genomic alteration in solid tumors, occurring in 90% of cases ") )
        setattr(cls, "Translocation, Balanced",
                PermissibleValue(text="Translocation, Balanced",
                                 description="Interchanges of genetic material among different chromosomes following the breaking off of pieces of chromosomes such that the total chromosome composition may still contain all of the genetic material.Balanced Chromosomal Rearrangement.",
                                 meaning=NCIT.C6822) )
        setattr(cls, "Translocation, Unbalanced",
                PermissibleValue(text="Translocation, Unbalanced",
                                 description="Interchanges of genetic material among different chromosomes following the breaking off of pieces of chromosomes such that the total chromosome composition does not contain all of the genetic material.",
                                 meaning=NCIT.C6823) )
        setattr(cls, "SNV, NOS",
                PermissibleValue(text="SNV, NOS",
                                 description="SNVs are single nucleotide positions in genomic DNA at which different sequence alternatives exist. (Source: The Sequence Ontology)",
                                 meaning=NCIT.C164674) )
        setattr(cls, "Mutation, NOS",
                PermissibleValue(text="Mutation, NOS",
                                 description="Any genetic mutation that is not otherwise specified.",
                                 meaning=NCIT.C45576) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Rearrangement, Fusion",
                PermissibleValue(text="Rearrangement, Fusion",
                                 description="A sequence variant whereby a two genes have become joined. (Source: The Sequence Ontology)",
                                 meaning=SO["0001565"]) )
        setattr(cls, "Duplication, Internal Tandem",
                PermissibleValue(text="Duplication, Internal Tandem",
                                 description="A duplication consisting of 2 identical adjacent regions. (Source: The Sequence Ontology)",
                                 meaning=SO["1000173"]) )
        setattr(cls, "Chromosome arm-level aneuploidy (CAA), NOS",
                PermissibleValue(text="Chromosome arm-level aneuploidy (CAA), NOS",
                                 description="An incomplete chromosome. (Source: The Sequence Ontology)",
                                 meaning=SO["1000029"]) )

class CopyNumberVariationEnum(EnumDefinitionImpl):

    Gain = PermissibleValue(text="Gain",
                               description="A finding indicating the detection of more than the normal number of copies of a gene or genetic/genomic segment in a sample.",
                               meaning=NCIT.C189957)
    Loss = PermissibleValue(text="Loss",
                               description="A finding indicating the detection of less than the normal number of copies of a gene or genetic/genomic segment in a sample.",
                               meaning=NCIT.C189958)
    NOS = PermissibleValue(text="NOS",
                             description="Not characterized in any other way.",
                             meaning=NCIT.C19594)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Amplification = PermissibleValue(text="Amplification",
                                                 description="Addition of extra material.",
                                                 meaning=NCIT.C25418)

    _defn = EnumDefinition(
        name="CopyNumberVariationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Not Otherwise Specified",
                PermissibleValue(text="Not Otherwise Specified",
                                 description="Not characterized in any other way.",
                                 meaning=NCIT.C19594) )

class GenomicSourceClassEnum(EnumDefinitionImpl):

    Germline = PermissibleValue(text="Germline",
                                       description="Any mutation that appears in the gametes and which will therefore be transmitted to the progeny with some frequency. (Source NCIt)",
                                       meaning=NCIT.C17666)
    Somatic = PermissibleValue(text="Somatic",
                                     description="Any mutation with an origin in cells that are not destined to become gametes. As a consequence, such mutations are not transmitted to progeny, though they will be transmitted during any mitosis within the individual. Somatic mutations may contribute to a broad variety of pathologies including cancer. (Source NCIt)",
                                     meaning=NCIT.C18060)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="GenomicSourceClassEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Somatic Mosaic",
                PermissibleValue(text="Somatic Mosaic",
                                 description="The occurrence of two genetically distinct populations of cells within an individual, derived from a postzygotic mutation.") )
        setattr(cls, "Unknown Genomic Origin",
                PermissibleValue(text="Unknown Genomic Origin",
                                 description="The unknown origins of the genes in a cell or organism.") )

class ExpressionConsequenceEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Missense = PermissibleValue(text="Missense",
                                       description="Altering the genetic code in a way that produces an amino acid that is different from the usual amino acid at that position. Some missense mutations will alter the function of the protein.")
    Nonsense = PermissibleValue(text="Nonsense",
                                       description="Altering the genetic code in a way that causes the premature termination of a protein. The altered protein may be partially or completely inactivated, resulting in a change or loss of protein function.")
    Frameshift = PermissibleValue(text="Frameshift",
                                           description="Disrupting the triplet reading frame of a DNA sequence. Such mutations usually lead to the creation of a premature termination (stop) codon, and result in a truncated (shorter-than-normal) protein product.")
    Synonymous = PermissibleValue(text="Synonymous",
                                           description="No change in the amino acid resulting from the translation process")

    _defn = EnumDefinition(
        name="ExpressionConsequenceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Frameshift Mutation",
                PermissibleValue(text="Frameshift Mutation",
                                 description="A mutation occurring within the protein-coding region of a gene which results in a shift in the reading frame of the encoded protein. Frameshift mutations often result in the premature truncation of a gene product.",
                                 meaning=NCIT.C17354) )
        setattr(cls, "Missense Mutation",
                PermissibleValue(text="Missense Mutation",
                                 description="A point mutation occurring within the protein-coding region of a gene, and which codes for a different amino acid than expected.",
                                 meaning=NCIT.C18133) )
        setattr(cls, "Nonsense Mutation",
                PermissibleValue(text="Nonsense Mutation",
                                 description="A point mutation occurring within the protein-coding region of a gene, and which codes for a stop that can truncate the protein.",
                                 meaning=NCIT.C62198) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Stop Gained",
                PermissibleValue(text="Stop Gained",
                                 description="The gain of a premature termination codon (a stop was gained), which signals the end of translation") )
        setattr(cls, "Stop Lost",
                PermissibleValue(text="Stop Lost",
                                 description="The loss of a termination codon (a stop was lost), which removes the signal to end translation") )
        setattr(cls, "Start Lost",
                PermissibleValue(text="Start Lost",
                                 description="The loss of a start codon (a start was lost), which removes the signal to start translation") )
        setattr(cls, "None (inframe)",
                PermissibleValue(text="None (inframe)",
                                 description="The reading frame of the nucleotide sequence is not disrupted.") )

class ChromosomalConsequenceEnum(EnumDefinitionImpl):

    Monosomy = PermissibleValue(text="Monosomy",
                                       description="A chromosomal abnormality consisting of the absence of one chromosome from the normal diploid number.",
                                       meaning=NCIT.C3239)
    Nullisomy = PermissibleValue(text="Nullisomy",
                                         description="A chromosomal abnormality where a pair of homologous chromosomes that would normally be present is missing")
    Trisomy = PermissibleValue(text="Trisomy",
                                     description="A chromosomal abnormality consisting of the presence of one chromosome in addition to the normal diploid number.",
                                     meaning=NCIT.C3421)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ChromosomalConsequenceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AllelicStateEnum(EnumDefinitionImpl):

    Heterozygous = PermissibleValue(text="Heterozygous",
                                               description="Having two different allelic forms of a gene, one inherited from each parent, on each of the two homologous chromosomes.",
                                               meaning=NCIT.C45825)
    Homozygous = PermissibleValue(text="Homozygous",
                                           description="Having two identical allelic forms of a gene, one inherited from each parent, on each of the two homologous chromosomes.",
                                           meaning=NCIT.C45826)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AllelicStateEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ExternalRefIdSystemEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="ExternalRefIdSystemEnum",
    )

class VariationEffectEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="VariationEffectEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class InheritancePatternEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="InheritancePatternEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ParentalStatusEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ParentalStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ReportedSignificanceEnum(EnumDefinitionImpl):

    Pathogenic = PermissibleValue(text="Pathogenic",
                                           description="A genetic variant that is known to directly contribute to the development of disease.",
                                           meaning=NCIT.C168799)
    Benign = PermissibleValue(text="Benign",
                                   description="A genetic variant that is known to not contribute to the development of a disease.",
                                   meaning=NCIT.C168802)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ReportedSignificanceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Likely pathogenic",
                PermissibleValue(text="Likely pathogenic",
                                 description="A genetic variant that is known to have a high likelihood (greater than 90% certainty) to contribute to the development of a disease.",
                                 meaning=NCIT.C168800) )
        setattr(cls, "Uncertain significance",
                PermissibleValue(text="Uncertain significance",
                                 description="A variation in a genetic sequence whose association with disease risk is unknown.",
                                 meaning=NCIT.C94187) )
        setattr(cls, "Likely benign",
                PermissibleValue(text="Likely benign",
                                 description="A genetic variant that is not expected to contribute to the development of a disease, but the scientific evidence may be insufficient to prove this conclusively.",
                                 meaning=NCIT.C168801) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Likely Pathogenic",
                PermissibleValue(text="Likely Pathogenic",
                                 description="A genetic variant that is known to have a high likelihood (greater than 90% certainty) to contribute to the development of a disease.",
                                 meaning=NCIT.C168800) )
        setattr(cls, "Uncertain Significance",
                PermissibleValue(text="Uncertain Significance",
                                 description="A variation in a genetic sequence whose association with disease risk is unknown.",
                                 meaning=NCIT.C94187) )
        setattr(cls, "Likely Benign",
                PermissibleValue(text="Likely Benign",
                                 description="A genetic variant that is not expected to contribute to the development of a disease, but the scientific evidence may be insufficient to prove this conclusively.",
                                 meaning=NCIT.C168801) )

class AssociatedConditionEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AssociatedConditionEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ReviewSourceEnum(EnumDefinitionImpl):

    Institutional = PermissibleValue(text="Institutional",
                                                 description="Local institutional review process at treating institution.",
                                                 meaning=NCIT.C185325)
    Central = PermissibleValue(text="Central",
                                     description="Review by a single person or group of laboratory test results, protocols, or other data generated from multiple locations.",
                                     meaning=NCIT.C191951)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ReviewSourceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TumorClassificationEnum(EnumDefinitionImpl):

    Primary = PermissibleValue(text="Primary",
                                     description="A tumor at the original site of origin.",
                                     meaning=NCIT.C8509)
    Metastatic = PermissibleValue(text="Metastatic",
                                           description="A term referring to the clinical or pathologic observation of a tumor extension from its original site of growth to another anatomic site.",
                                           meaning=NCIT.C14174)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorClassificationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class BiologicalAnalyteEnum(EnumDefinitionImpl):

    DNA = PermissibleValue(text="DNA",
                             description="A long linear double-stranded polymer formed from nucleotides attached to a deoxyribose backbone and found in the nucleus of a cell; associated with the transmission of genetic information.",
                             meaning=NCIT.C449)
    RNA = PermissibleValue(text="RNA",
                             description="Single-stranded long chain of nucleotides containing ribose. It is the end product of DNA transcription by the enzyme RNA polymerase. It is essential in protein synthesis.",
                             meaning=NCIT.C812)
    ctDNA = PermissibleValue(text="ctDNA",
                                 description="The detection of cell-free, neoplasm-derived DNA in patient serum or plasma.",
                                 meaning=NCIT.C113243)
    cfDNA = PermissibleValue(text="cfDNA",
                                 description="DNA that is found in blood plasma and is not associated with cells in the circulation.",
                                 meaning=NCIT.C128274)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="BiologicalAnalyteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SourcePctEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SourcePctEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MafEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MafEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ClonalStatusEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ClonalStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class DnaIndexEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="DnaIndexEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CytodifferentiationEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="CytodifferentiationEnum",
    )

class MitoticRateEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="MitoticRateEnum",
    )

class AltStatusEnum(EnumDefinitionImpl):

    Positive = PermissibleValue(text="Positive",
                                       description="An observation confirming something, such as the presence of a disease, condition, or microorganism. (Source: CDISC)")
    Negative = PermissibleValue(text="Negative",
                                       description="An observation confirming the lack of something, such as the absence of a disease, condition, or microorganism. (Source: CDISC)")
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.")

    _defn = EnumDefinition(
        name="AltStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not done",
                PermissibleValue(text="Not done",
                                 description="The indicated condition was not confirmed or denied by exploratory testing.") )
        setattr(cls, "Not reported",
                PermissibleValue(text="Not reported",
                                 description="Not provided or available.") )

class DeauvilleScoreEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="DeauvilleScoreEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Score 1",
                PermissibleValue(text="Score 1",
                                 description="The results of the positron emission tomography are negative; there is no detectable abnormal tracer uptake.",
                                 meaning=NCIT.C99728) )
        setattr(cls, "Score 2",
                PermissibleValue(text="Score 2",
                                 description="The results of the positron emission tomography are negative; the tracer uptake is less than or equal to the mediastinum.",
                                 meaning=NCIT.C99747) )
        setattr(cls, "Score 3",
                PermissibleValue(text="Score 3",
                                 description="The results of the positron emission tomography are negative; the tracer uptake is greater than the mediastinum but less than or equal to the liver.",
                                 meaning=NCIT.C99748) )
        setattr(cls, "Score 4",
                PermissibleValue(text="Score 4",
                                 description="The results of the positron emission tomography are positive; the tracer uptake is moderately more than the liver uptake, at any disease site.",
                                 meaning=NCIT.C99749) )
        setattr(cls, "Score 5",
                PermissibleValue(text="Score 5",
                                 description="The results of the positron emission tomography are positive; the tracer uptake is markedly increased at any disease site.",
                                 meaning=NCIT.C99750) )

class FindingEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="FindingEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Intraocular Mass(es)",
                PermissibleValue(text="Intraocular Mass(es)",
                                 description="A lump or collection of cohering particles within the eyeball.") )
        setattr(cls, "Orbital Finding - Etiology Not Clear",
                PermissibleValue(text="Orbital Finding - Etiology Not Clear",
                                 description="Abnormal growths of tissue in the structures that surround the orbit of the eye with unknown cause.") )
        setattr(cls, "Suspected Lymph Node involvement",
                PermissibleValue(text="Suspected Lymph Node involvement",
                                 description="A suspected finding indicating the spread of cancer to regional or distant lymph node(s).") )
        setattr(cls, "Distant Metastasis",
                PermissibleValue(text="Distant Metastasis",
                                 description="A biological process that involves the transfer and growth of cancer cells from the site of the primary tumor. Relocation of malignant cells during metastasis can be restricted to movement within a specific tissue/organ or may entail migration to a distal locus within the body. This phenotype is a characteristic of all malignant tumors.",
                                 meaning=NCIT.C18206) )
        setattr(cls, "Pineal Gland Tumor",
                PermissibleValue(text="Pineal Gland Tumor",
                                 description="A neoplasm arising from the pineocyte, a cell with photosensory and neuroendocrine functions. It may be composed of mature elements or primitive, immature cells. The cellular composition determines the biological behavior and clinical outcome. Three types are recognized: pineoblastoma, pineocytoma, and pineal parenchymal tumor of intermediate differentiation (Adapted from WHO.)",
                                 meaning=NCIT["6965"]) )
        setattr(cls, "Pineal Gland Cyst",
                PermissibleValue(text="Pineal Gland Cyst",
                                 description="A fluid filled sac within the pineal gland. It is usually an incidental finding of no real clinical significance.",
                                 meaning=NCIT.C9483) )
        setattr(cls, "Optic Nerve Enhancement",
                PermissibleValue(text="Optic Nerve Enhancement",
                                 description="Abnormality of the optic nerve.") )
        setattr(cls, "Optic Nerve Thickening",
                PermissibleValue(text="Optic Nerve Thickening",
                                 description="A reaction to a buildup of pressure in or around your brain that may have many causes.") )
        setattr(cls, "Orbital Cellulitis",
                PermissibleValue(text="Orbital Cellulitis",
                                 description="Inflammation of the eye tissues posterior to the orbital septum, and generally secondary to an infection spread from adjacent sinuses. Signs and symptoms of the affected eye include sudden loss of vision, erythema, edema, decreased eye movement, and pain. Treatment is conducted via intravenous antibiotics, observation, and surgical intervention when necessary.",
                                 meaning=NCIT.C99000) )
        setattr(cls, "Subluxation of Lens",
                PermissibleValue(text="Subluxation of Lens",
                                 description="Lens that are subluxed when it is partially displaced but remains within the lens space.") )
        setattr(cls, "Suspected Orbital Extension of RB",
                PermissibleValue(text="Suspected Orbital Extension of RB",
                                 description="A suspected clinically or radiologically detection of orbital extension of an intraocular retinoblastoma at the initial presentation, with or without proptosis or a fungating mass.") )
        setattr(cls, "Suspected Optic Nerve Extension of RB",
                PermissibleValue(text="Suspected Optic Nerve Extension of RB",
                                 description="A suspected clinically or radiologically detection of orbital nerve extension of an intraocular retinoblastoma at the initial presentation, with or without proptosis or a fungating mass.") )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class FindingSiteEnum(EnumDefinitionImpl):

    Brain = PermissibleValue(text="Brain",
                                 description="An organ composed of grey and white matter containing billions of neurons that is the center for intelligence and reasoning. It is protected by the bony cranium.",
                                 meaning=NCIT.C12439)
    Liver = PermissibleValue(text="Liver",
                                 description="A triangular-shaped organ located under the diaphragm in the right hypochondrium. It is the largest internal organ of the body, weighting up to 2 kg. Metabolism and bile secretion are its main functions. It is composed of cells which have the ability to regenerate.",
                                 meaning=NCIT.C12392)
    Bones = PermissibleValue(text="Bones",
                                 description="The structural organ comprised of specialized connective tissue that forms the skeletal components of the body.",
                                 meaning=NCIT.C1266)
    Lungs = PermissibleValue(text="Lungs",
                                 description="One of a pair of viscera occupying the pulmonary cavities of the thorax, the organs of respiration in which aeration of the blood takes place. As a rule, the right lung is slightly larger than the left and is divided into three lobes (an upper, a middle, and a lower or basal), while the left has two lobes (an upper and a lower or basal). Each lung is irregularly conical in shape, presenting a blunt upper extremity (the apex), a concave base following the curve of the diaphragm, an outer convex surface (costal surface), an inner or mediastinal surface (mediastinal surface), a thin and sharp anterior border, and a thick and rounded posterior border.",
                                 meaning=NCIT.C12488)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="FindingSiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Oculus Dexter (Right Eye)",
                PermissibleValue(text="Oculus Dexter (Right Eye)",
                                 description="The eye positioned in the right orbit.",
                                 meaning=NCIT.C119333) )
        setattr(cls, "Oculus Sinister (Left Eye)",
                PermissibleValue(text="Oculus Sinister (Left Eye)",
                                 description="The eye positioned in the left orbit.",
                                 meaning=NCIT.C119334) )
        setattr(cls, "Oculus Uterque (Both Eyes)",
                PermissibleValue(text="Oculus Uterque (Both Eyes)",
                                 description="Of or pertaining to both the left and right eyes.",
                                 meaning=NCIT.C119335) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NegativeNotreportedPositiveUnknownEnum(EnumDefinitionImpl):

    Positive = PermissibleValue(text="Positive",
                                       description="A finding of abnormality following an examination or observation confirming something, such as the presence of a disease, condition, or microorganism.",
                                       meaning=NCIT.C38758)
    Negative = PermissibleValue(text="Negative",
                                       description="A finding of normality following an examination or investigation looking for the presence of a microorganism, disease, or condition.",
                                       meaning=NCIT.C38757)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NegativeNotreportedPositiveUnknownEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MorphCodeSystemEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="MorphCodeSystemEnum",
    )

class TopCodeSystemEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="TopCodeSystemEnum",
    )

class AllTypeEnum(EnumDefinitionImpl):

    MPAL = PermissibleValue(text="MPAL",
                               description="An acute leukemia of ambiguous lineage. It is characterized by the presence of either separate populations of blasts of more than one lineage, or one population of blasts co-expressing markers of more than one lineage.",
                               meaning=NCIT.C82179)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AllTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "B-ALL",
                PermissibleValue(text="B-ALL",
                                 description="The most frequent type of acute lymphoblastic leukemia. Approximately 75% of cases occur in children under six years of age. This is a good prognosis leukemia. In the pediatric age group the complete remission rate is approximately 95% and the disease free survival rate is 70%. Approximately 80% of children appear to be cured. In the adult age group the complete remission rate is 60-85%. (WHO, 2001)",
                                 meaning=NCIT.C8644) )
        setattr(cls, "T-ALL",
                PermissibleValue(text="T-ALL",
                                 description="Acute lymphoblastic leukemia of T-cell origin. It comprises about 15% of childhood cases and 25% of adult cases. It is more common in males than females. (WHO, 2001)",
                                 meaning=NCIT.C3183) )
        setattr(cls, "Acute Leukemia, ambiguous lineage (mixed or biphenotypic)",
                PermissibleValue(text="Acute Leukemia, ambiguous lineage (mixed or biphenotypic)",
                                 description="An acute leukemia in which the blasts lack sufficient evidence to classify as myeloid or lymphoid or they have morphologic and/or immunophenotypic characteristics of both myeloid and lymphoid cells. (WHO, 2001)",
                                 meaning=NCIT.C7464) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class FabTypeEnum(EnumDefinitionImpl):

    M0 = PermissibleValue(text="M0",
                           description="Acute Myeloid Leukemia with Minimal Differentiation",
                           meaning=NCIT.C8460)
    M1 = PermissibleValue(text="M1",
                           description="Acute Myeloid Leukemia without Maturation",
                           meaning=NCIT.C3249)
    M2 = PermissibleValue(text="M2",
                           description="Acute Myeloid Leukemia with Maturation",
                           meaning=NCIT.C3250)
    M3 = PermissibleValue(text="M3",
                           description="Acute Promyelocytic Leukemia with PML-RARA",
                           meaning=NCIT.C3182)
    M4 = PermissibleValue(text="M4",
                           description="Acute Myelomonocytic Leukemia",
                           meaning=NCIT.C7463)
    M4eo = PermissibleValue(text="M4eo",
                               description="Acute Myelomonocytic Leukemia with Abnormal Eosinophils",
                               meaning=NCIT.C9020)
    M5 = PermissibleValue(text="M5",
                           description="Acute Monocytic Leukemia",
                           meaning=NCIT.C4861)
    M6 = PermissibleValue(text="M6",
                           description="Acute Erythroid Leukemia",
                           meaning=NCIT.C8923)
    M7 = PermissibleValue(text="M7",
                           description="Acute Megakaryoblastic Leukemia",
                           meaning=NCIT.C3170)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="FabTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "M3 Variant",
                PermissibleValue(text="M3 Variant",
                                 description="Acute promyelocytic leukemia in which the promyelocytes in the peripheral blood have paucity or absence of cytoplasmic granules and characteristic bilobed nuclei.",
                                 meaning=NCIT.C27757) )
        setattr(cls, "AML, NOS",
                PermissibleValue(text="AML, NOS",
                                 description="Acute Myeloid Leukemia NOS",
                                 meaning=NCIT.C27753) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class WhoAmlEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="WhoAmlEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "AML with t(8;21)(q22;q22.1); RUNX1-RUNX1T1",
                PermissibleValue(text="AML with t(8;21)(q22;q22.1); RUNX1-RUNX1T1",
                                 description="An acute myeloid leukemia with t(8;21)(q22; q22.1) giving rise to RUNX1/RUNX1T1 fusion transcript and showing maturation in the neutrophil lineage. The bone marrow and the peripheral blood show large myeloblasts with abundant basophilic cytoplasm, often containing azurophilic granules. This type of AML is associated with good response to chemotherapy and high complete remission rate.",
                                 meaning=NCIT.C9288) )
        setattr(cls, "AML with inv(16)(p13.1q22) or t(16;16)(p13.1;q22); CBFB-MYH11",
                PermissibleValue(text="AML with inv(16)(p13.1q22) or t(16;16)(p13.1;q22); CBFB-MYH11",
                                 description="An acute myeloid leukemia with monocytic and granulocytic differentiation and the presence of a characteristically abnormal eosinophil component in the bone marrow. This type of acute myeloid leukemia has a favorable prognosis. (WHO, 2001)",
                                 meaning=NCIT.C9287) )
        setattr(cls, "APL with PML-RARA",
                PermissibleValue(text="APL with PML-RARA",
                                 description="An acute promyelocytic leukemia with PML-RARA fusion occurring in children.",
                                 meaning=NCIT.C7968) )
        setattr(cls, "AML with t(9;11)(p21.3;q23.3); KMT2A-MLLT3",
                PermissibleValue(text="AML with t(9;11)(p21.3;q23.3); KMT2A-MLLT3",
                                 description="An acute myeloid leukemia associated with t(9;11)(p21.3;q23.3) and MLLT3-MLL (KMT2A) fusion protein expression. Morphologically it usually has monocytic features. It may present at any age but it is more commonly seen in children. Patients may present with disseminated intravascular coagulation.",
                                 meaning=NCIT.C82403) )
        setattr(cls, "AML with t(6;9)(p23;q34.1);DEK-NUP214",
                PermissibleValue(text="AML with t(6;9)(p23;q34.1);DEK-NUP214",
                                 description="An acute myeloid leukemia associated with t(6;9)(p23;q34.1) resulting in DEK-NUP214(CAN) fusion protein expression. It is often associated with multilineage dysplasia and basophilia. It affects both children and adults and it usually has an unfavorable clinical outcome.",
                                 meaning=NCIT.C82423) )
        setattr(cls, "AML with inv(3)(q21.3q26.2) or t(3;3)(q21.3;q26.2); GATA2, MECOM",
                PermissibleValue(text="AML with inv(3)(q21.3q26.2) or t(3;3)(q21.3;q26.2); GATA2, MECOM",
                                 description="An acute myeloid leukemia associated with inv(3)(q21.3q26.2) or t(3;3)(q21.3;q26.2) resulting in the reposition of a distal GATA2 enhancer to activate MECOM expression. It may present de novo or follow a myelodysplastic syndrome. The clinical course is aggressive.",
                                 meaning=NCIT.C82426) )
        setattr(cls, "AML (megakaryoblastic) with t(1;22)(p13.3;q13.3); RBM15-MKL1",
                PermissibleValue(text="AML (megakaryoblastic) with t(1;22)(p13.3;q13.3); RBM15-MKL1",
                                 description="An acute myeloid leukemia associated with t(1;22)(p13.3;q13.1) resulting in the expression of RBM15-MKL1 fusion protein. It affects infants and children and usually shows megakaryocytic maturation.",
                                 meaning=NCIT.C82427) )
        setattr(cls, "Provisional entity: AML with BCR-ABL1",
                PermissibleValue(text="Provisional entity: AML with BCR-ABL1",
                                 description="A rare, de novo acute myeloid leukemia in which the blasts harbor BCR-ABL1 translocation in the absence of a history and clinical and laboratory features of chronic myelogenous leukemia.",
                                 meaning=NCIT.C129785) )
        setattr(cls, "AML with mutated NPM1",
                PermissibleValue(text="AML with mutated NPM1",
                                 description="An acute myeloid leukemia with mutation of the nucleophosmin gene. It is usually associated with normal karyotype and frequently has myelomonocytic or monocytic features. It usually responds to induction therapy.",
                                 meaning=NCIT.C82431) )
        setattr(cls, "AML with biallelic mutations of CEBPA",
                PermissibleValue(text="AML with biallelic mutations of CEBPA",
                                 description="An acute myeloid leukemia with double mutations of the CEBPA gene.",
                                 meaning=NCIT.C129782) )
        setattr(cls, "Provisional entity: AML with mutated RUNX1",
                PermissibleValue(text="Provisional entity: AML with mutated RUNX1",
                                 description="De novo acute myeloid leukemia with RUNX1 gene mutation, not associated with myelodysplastic syndrome-related cytogenetic abnormalities.",
                                 meaning=NCIT.C129786) )
        setattr(cls, "AML with myelodysplasia-related changes",
                PermissibleValue(text="AML with myelodysplasia-related changes",
                                 description="Acute Myeloid Leukemia with Myelodysplasia-Related Changes",
                                 meaning=NCIT.C7600) )
        setattr(cls, "Therapy-related myeloid neoplasms",
                PermissibleValue(text="Therapy-related myeloid neoplasms",
                                 description="Acute myeloid leukemias, myelodysplastic syndromes, and myelodysplastic/myeloproliferative neoplasms arising as a result of the mutagenic effect of chemotherapy agents and/or radiation that are used for the treatment of neoplastic or non-neoplastic disorders.",
                                 meaning=NCIT.C27912) )
        setattr(cls, "AML, NOS",
                PermissibleValue(text="AML, NOS",
                                 description="Acute myeloid leukemias that do not fulfill the criteria for inclusion in the group of acute myeloid leukemias which have recurrent genetic abnormalities or myelodysplastic changes, or are therapy-related. This category includes entities classified according to the French-American-British classification scheme.",
                                 meaning=NCIT.C27753) )
        setattr(cls, "AML with minimal differentiation",
                PermissibleValue(text="AML with minimal differentiation",
                                 description="Acute Myeloid Leukemia with Minimal Differentiation",
                                 meaning=NCIT.C8460) )
        setattr(cls, "AML without maturation",
                PermissibleValue(text="AML without maturation",
                                 description="An acute myeloid leukemia (AML) in which the blasts do not show evidence of myeloid differentiation by morphology and conventional cytochemistry. (WHO, 2001)",
                                 meaning=NCIT.C3249) )
        setattr(cls, "AML with maturation",
                PermissibleValue(text="AML with maturation",
                                 description="An acute myeloid leukemia (AML) characterized by blasts with evidence of maturation to more mature neutrophils. (WHO, 2001)",
                                 meaning=NCIT.C3250) )
        setattr(cls, "Acute myelomonocytic leukemia",
                PermissibleValue(text="Acute myelomonocytic leukemia",
                                 description="An acute leukemia characterized by the proliferation of both neutrophil and monocyte precursors. (WHO, 2001)",
                                 meaning=NCIT.C7463) )
        setattr(cls, "Acute monoblastic/monocytic leukemia",
                PermissibleValue(text="Acute monoblastic/monocytic leukemia",
                                 description="Acute myeloid leukemia in which 80% or more of the leukemic cells are of monocytic lineage, including monoblasts, promonocytes, and monocytes. Bleeding disorders are common presenting features.",
                                 meaning=NCIT.C7318) )
        setattr(cls, "Pure erythroid leukemia",
                PermissibleValue(text="Pure erythroid leukemia",
                                 description="Acute erythroid leukemia characterized by the presence of immature erythroid cells in the bone marrow (at least 80% of the cellular component), without evidence of a significant myeloblastic cell population present.",
                                 meaning=NCIT.C7467) )
        setattr(cls, "Acute megakaryoblastic leukemia",
                PermissibleValue(text="Acute megakaryoblastic leukemia",
                                 description="An acute myeloid leukemia in which at least 50% of the blasts are of megakaryocytic lineage. (WHO, 2001)",
                                 meaning=NCIT.C3170) )
        setattr(cls, "Acute basophilic leukemia",
                PermissibleValue(text="Acute basophilic leukemia",
                                 description="A rare acute myeloid leukemia in which the immature cells differentiate towards basophils.",
                                 meaning=NCIT.C3164) )
        setattr(cls, "Acute panmyelosis with myelofibrosis",
                PermissibleValue(text="Acute panmyelosis with myelofibrosis",
                                 description="An acute myeloid leukemia characterized by bone marrow fibrosis without preexisting primary myelofibrosis.",
                                 meaning=NCIT.C4344) )
        setattr(cls, "Myeloid sarcoma",
                PermissibleValue(text="Myeloid sarcoma",
                                 description="A tumor mass composed of myeloblasts or immature myeloid cells. It occurs in extramedullary sites or the bone. (WHO, 2001)",
                                 meaning=NCIT.C3520) )
        setattr(cls, "Myeloid proliferations related to Down syndrome",
                PermissibleValue(text="Myeloid proliferations related to Down syndrome",
                                 description="Myeloid neoplasms occurring in individuals with Down syndrome. There is an increased risk of acute leukemias in both children and adults with Down syndrome. In particular, the incidence of acute myeloid leukemia in Down syndrome children of less than five years of age is particularly high, it is usually an acute megakaryoblastic leukemia, and is associated with GATA1 gene mutation. This group of disorders also includes the entity transient abnormal myelopoiesis which occurs in neonates and is associated with GATA1 gene mutation.",
                                 meaning=NCIT.C82338) )
        setattr(cls, "Transient abnormal myelopoiesis (TAM)",
                PermissibleValue(text="Transient abnormal myelopoiesis (TAM)",
                                 description="A myeloid proliferation occurring in newborns with Down syndrome. It is clinically and morphologically indistinguishable from acute myeloid leukemia and is associated with GATA1 mutations. The blasts display morphologic and immunophenotypic features of megakaryocytic lineage. In the majority of patients the myeloid proliferation undergoes spontaneous remission.",
                                 meaning=NCIT.C82339) )
        setattr(cls, "Myeloid leukemia associated with Down syndrome",
                PermissibleValue(text="Myeloid leukemia associated with Down syndrome",
                                 description="Acute myeloid leukemia or myelodysplastic syndrome occurring in children with Down syndrome. The acute myeloid leukemia is usually an acute megakaryoblastic leukemia, and is associated with GATA1 gene mutation.",
                                 meaning=NCIT.C43223) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class HistologyEnum(EnumDefinitionImpl):

    Pineoblastoma = PermissibleValue(text="Pineoblastoma",
                                                 description="A poorly differentiated malignant embryonal neoplasm arising from the pineal region. It usually occurs in children and it is characterized by the presence of small immature neuroepithelial cells. It may follow an aggressive clinical course.",
                                                 meaning=NCIT.C9344)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Choriocarcinoma = PermissibleValue(text="Choriocarcinoma",
                                                     description="An aggressive malignant tumor arising from trophoblastic cells. The vast majority of cases arise in the uterus and represent gestational choriocarcinomas that derive from placental trophoblastic cells. Approximately half of the cases develop from a complete hydatidiform mole. A minority of cases arise in the testis or the ovaries. There is often marked elevation of human chorionic gonadotropin (hCG) in the blood. Choriocarcinomas disseminate rapidly through the hematogenous route; the lungs are most frequently affected.",
                                                     meaning=NCIT.C2948)
    Gonadoblastoma = PermissibleValue(text="Gonadoblastoma",
                                                   description="A mixed germ cell/sex cord-stromal tumor characterized by the presence of large germ cells which resemble seminoma cells and small cells which resemble Sertoli or granulosa cells. It occurs in the testis and the ovary and is identified in children and adults. It is often associated with gonadal dysgenesis and abnormal karyotype.",
                                                   meaning=NCIT.C3754)
    Seminoma = PermissibleValue(text="Seminoma",
                                       description="A radiosensitive malignant germ cell tumor found in the testis (especially undescended), and extragonadal sites (anterior mediastinum and pineal gland). It is characterized by the presence of uniform cells with clear or dense cytoplasm which contains glycogen, and by a large nucleus which contains one or more nucleoli. The neoplastic germ cells form aggregates separated by fibrous septa. The fibrous septa contain chronic inflammatory cells, mainly lymphocytes.",
                                       meaning=NCIT.C9309)
    Dysgerminoma = PermissibleValue(text="Dysgerminoma",
                                               description="A malignant germ cell tumor characterized by the presence of a monotonous primitive germ cell population. The neoplastic cells form aggregates and have an abundant pale cytoplasm and uniform nuclei. The aggregates of the germ cells are separated by fibrous septa which contain inflammatory cells, mostly T-lymphocytes. It arises primarily in the ovaries, but can occur both primarily and secondarily at other sites, particularly the central nervous system. It responds to chemotherapy and radiotherapy. Its prognosis is related to the tumor stage.",
                                               meaning=NCIT.C2996)
    Germinoma = PermissibleValue(text="Germinoma",
                                         description="A malignant germ cell tumor arising in the central nervous system. It is characterized by the presence of primitive, large malignant germ cells and lymphocytes.",
                                         meaning=NCIT.C3753)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Glomangiomatosis = PermissibleValue(text="Glomangiomatosis",
                                                       meaning=ICDO["8711/1"])
    Myoepithelioma = PermissibleValue(text="Myoepithelioma",
                                                   meaning=ICDO["8982/0"])

    _defn = EnumDefinition(
        name="HistologyEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Embryonal Tumor with Multilayered Rosettes",
                PermissibleValue(text="Embryonal Tumor with Multilayered Rosettes",
                                 description="A central nervous system embryonal tumor characterized by the presence of multilayered rosette formation and typically the presence of amplification of the C19MC region on chromosome 19 (19q13.42) or rarely a DICER1 mutation.",
                                 meaning=NCIT.C186534) )
        setattr(cls, "Embryonal Tumor, NOS",
                PermissibleValue(text="Embryonal Tumor, NOS",
                                 description="A term that refers to central nervous system embryonal tumors which are not fully characterized.",
                                 meaning=NCIT.C5398) )
        setattr(cls, "Medulloblastoma, Classic",
                PermissibleValue(text="Medulloblastoma, Classic",
                                 description="A medulloblastoma composed of malignant cells with hyperchromatic nucleus and scanty cytoplasm. Homer Wright rosettes may be present.",
                                 meaning=NCIT.C54039) )
        setattr(cls, "Medulloblastoma, NOS",
                PermissibleValue(text="Medulloblastoma, NOS",
                                 description="A medulloblastoma which has not been further characterized.",
                                 meaning=NCIT.C129447) )
        setattr(cls, "Primitive Neuroectodermal Tumor (PNET)",
                PermissibleValue(text="Primitive Neuroectodermal Tumor (PNET)",
                                 description="A malignant neoplasm that originates in the neuroectoderm. The neuroectoderm constitutes the portion of the ectoderm of the early embryo that gives rise to the central and peripheral nervous systems and includes some glial cell precursors.",
                                 meaning=NCIT.C3716) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Ewing Sarcoma",
                PermissibleValue(text="Ewing Sarcoma",
                                 description="A small round cell tumor that lacks morphologic, immunohistochemical, and electron microscopic evidence of neuroectodermal differentiation. It represents one of the two ends of the spectrum called Ewing sarcoma/peripheral neuroectodermal tumor. It affects mostly males under age 20, and it can occur in soft tissue or bone. Pain and the presence of a mass are the most common clinical symptoms.",
                                 meaning=NCIT.C4817) )
        setattr(cls, "Undifferentiated Ewing Tumor",
                PermissibleValue(text="Undifferentiated Ewing Tumor",
                                 description="An undifferentiated soft tissue sarcoma characterized by the presence of uniform round or ovoid malignant cells with a high nuclear to cytoplasmic ratio.",
                                 meaning=NCIT.C121799) )
        setattr(cls, "Neuro-differentiated Ewing Tumor",
                PermissibleValue(text="Neuro-differentiated Ewing Tumor",
                                 description="A small round cell tumor with neural differentiation arising from the soft tissues or bone.",
                                 meaning=NCIT.C9341) )
        setattr(cls, "Large Cell Ewing Tumor",
                PermissibleValue(text="Large Cell Ewing Tumor",
                                 description="Ewing sarcoma characterized by the presence of large malignant cells with prominent nucleoli and irregular contours.",
                                 meaning=NCIT.C174456) )
        setattr(cls, "Seminoma/Dysgerminoma/Germinoma",
                PermissibleValue(text="Seminoma/Dysgerminoma/Germinoma",
                                 description="A term that refers to germinoma, seminoma, or dysgerminoma.",
                                 meaning=NCIT.C121618) )
        setattr(cls, "Embryonal Carcinoma",
                PermissibleValue(text="Embryonal Carcinoma",
                                 description="A non-seminomatous malignant germ cell tumor characterized by the presence of large germ cells with abundant cytoplasm resembling epithelial cells, geographic necrosis, high mitotic activity, and pseudoglandular and pseudopapillary structures formation. It can arise from the testis, ovary, and extragonadal sites (central nervous system and mediastinum).",
                                 meaning=NCIT.C3752) )
        setattr(cls, "Yolk Sac Tumor",
                PermissibleValue(text="Yolk Sac Tumor",
                                 description="A non-seminomatous malignant germ cell tumor composed of primitive germ cells. It is the most common malignant germ cell tumor in the pediatric population. It occurs in the infant testis, ovary, sacrococcygeal region, vagina, uterus, prostate, abdomen, liver, retroperitoneum, thorax, and pineal/third ventricle. The tumor mimics the yolk sac of the embryo and produces alpha-fetoprotein (AFP). Treatment includes: surgical resection, radiation, and chemotherapy. This tumor is very responsive to chemotherapy regimens that include cisplatinum.",
                                 meaning=NCIT.C3011) )
        setattr(cls, "Mature Teratoma",
                PermissibleValue(text="Mature Teratoma",
                                 description="A teratoma which may be cystic; it is composed entirely of well differentiated, adult-type mature tissues, without evidence of fetal-type immature tissues (grade 0 teratoma).",
                                 meaning=NCIT.C9015) )
        setattr(cls, "Immature Teratoma",
                PermissibleValue(text="Immature Teratoma",
                                 description="A teratoma characterized by the presence of an extensive component of immature, fetal-type tissues.",
                                 meaning=NCIT.C4286) )
        setattr(cls, "Somatic Malignancy",
                PermissibleValue(text="Somatic Malignancy",
                                 description="A teratoma which is characterized by morphologic transformation to malignancy and an aggressive clinical course. The malignant component most often is sarcomatous or carcinomatous.",
                                 meaning=NCIT.C4289) )
        setattr(cls, "Necrotic Tumor",
                PermissibleValue(text="Necrotic Tumor",
                                 description="Necrotic Neoplasm",
                                 meaning=NCIT.C36029) )
        setattr(cls, "Teratoma, NOS",
                PermissibleValue(text="Teratoma, NOS",
                                 description="A non-seminomatous germ cell tumor characterized by the presence of various tissues which correspond to the different germinal layers (endoderm, mesoderm, and ectoderm). It occurs in the testis, ovary, and extragonadal sites including central nervous system, mediastinum, lung, and stomach. According to the level of differentiation of the tissues which comprise the tumor, teratomas are classified as benign (grade 0 or 1), immature (grade 2), and malignant (grade 3). Grade 0 teratomas contain only mature elements; grade 1 teratomas have a limited degree of immaturity; grade 2 teratomas have a more extensive degree of immaturity; grade 3 teratomas are composed exclusively of immature tissues. The prognosis depends on patient age, tumor size and grade, and stage.",
                                 meaning=NCIT.C3403) )
        setattr(cls, "Mixed Germ Cell Tumor",
                PermissibleValue(text="Mixed Germ Cell Tumor",
                                 description="A malignant germ cell tumor characterized by the presence of at least two different germ cell tumor components. The different germ cell tumor components include choriocarcinoma, embryonal carcinoma, yolk sac tumor, teratoma, and seminoma. It occurs in the ovary, testis, and extragonadal sites including central nervous system and mediastinum.",
                                 meaning=NCIT.C4290) )
        setattr(cls, "Malignant Teratoma",
                PermissibleValue(text="Malignant Teratoma",
                                 description="A teratoma composed exclusively of immature tissues.",
                                 meaning=NCIT.C4287) )
        setattr(cls, "Hodgkin Lymphoma, NOS",
                PermissibleValue(text="Hodgkin Lymphoma, NOS",
                                 description="A lymphoma, previously known as Hodgkin's disease, characterized by the presence of large tumor cells in an abundant admixture of nonneoplastic cells. There are two distinct subtypes: nodular lymphocyte predominant Hodgkin lymphoma and classical Hodgkin lymphoma. Hodgkin lymphoma involves primarily lymph nodes.",
                                 meaning=NCIT.C9357) )
        setattr(cls, "Hodgkin Lymphoma, Lymphocyte-Rich",
                PermissibleValue(text="Hodgkin Lymphoma, Lymphocyte-Rich",
                                 description="A subtype of classic Hodgkin lymphoma with scattered Hodgkin and Reed-Sternberg cells and a nodular or less often diffuse cellular background consisting of small lymphocytes and with an absence of neutrophils and eosinophils. (WHO, 2008)",
                                 meaning=NCIT.C6913) )
        setattr(cls, "Hodgkin lymphoma, Mixed Cellularity, NOS",
                PermissibleValue(text="Hodgkin lymphoma, Mixed Cellularity, NOS",
                                 description="A subtype of classic Hodgkin lymphoma with scattered Reed-Sternberg and Hodgkin cells in a diffuse or vaguely nodular mixed inflammatory background without nodular sclerosing fibrosis. (WHO, 2008)",
                                 meaning=NCIT.C3517) )
        setattr(cls, "Hodgkin Lymphoma, Lymphocyte Depletion, NOS",
                PermissibleValue(text="Hodgkin Lymphoma, Lymphocyte Depletion, NOS",
                                 description="A diffuse subtype of classic Hodgkin lymphoma which is rich in Hodgkin and Reed-Sternberg cells and/or depleted in non-neoplastic lymphocytes. (WHO, 2008)",
                                 meaning=NCIT.C9283) )
        setattr(cls, "Hodgkin Lymphoma, Nodular Lymphocyte Predominance",
                PermissibleValue(text="Hodgkin Lymphoma, Nodular Lymphocyte Predominance",
                                 description="A monoclonal B-cell neoplasm characterized by a nodular, or a nodular and diffuse proliferation of scattered large neoplastic cells known as popcorn or lymphocyte predominant cells (LP cells)- formerly called L&H cells for lymphocytic and/or histiocytic Reed-Sternberg cell variants. The LP cells lack CD15 and CD30 in nearly all instances. Patients are predominantly male, frequently in the 30-50 year age group. Most patients present with limited stage disease (localized peripheral lymphadenopathy, stage I or II). (WHO 2008)",
                                 meaning=NCIT.C7258) )
        setattr(cls, "Hodgkin Lymphoma, Nodular Sclerosis, NOS",
                PermissibleValue(text="Hodgkin Lymphoma, Nodular Sclerosis, NOS",
                                 description="A subtype of classic Hodgkin lymphoma characterized by collagen bands that surround at least one nodule, and Hodgkin and Reed-Sternberg cells with lacunar type morphology. (WHO, 2008)",
                                 meaning=NCIT.C3518) )
        setattr(cls, "Atypical Lipomatous Tumour ",
                PermissibleValue(text="Atypical Lipomatous Tumour ",
                                 meaning=ICDO["8850/1"]) )
        setattr(cls, "Well differentiated Liposarcoma ",
                PermissibleValue(text="Well differentiated Liposarcoma ",
                                 meaning=ICDO["8850/3"]) )
        setattr(cls, "Dedifferentiated Liposarcoma ",
                PermissibleValue(text="Dedifferentiated Liposarcoma ",
                                 meaning=ICDO["8858/3"]) )
        setattr(cls, "Myxoid Liposarcoma ",
                PermissibleValue(text="Myxoid Liposarcoma ",
                                 meaning=ICDO["8852/3"]) )
        setattr(cls, "Pleomorphic Liposarcoma ",
                PermissibleValue(text="Pleomorphic Liposarcoma ",
                                 meaning=ICDO["8854/3"]) )
        setattr(cls, "Liposrcoma, NOS ",
                PermissibleValue(text="Liposrcoma, NOS ",
                                 meaning=ICDO["8850/3"]) )
        setattr(cls, "Palmar/plantar Fibromatosis ",
                PermissibleValue(text="Palmar/plantar Fibromatosis ",
                                 meaning=ICDO["8813/1"]) )
        setattr(cls, "Desmoid-type Fibromatosis ",
                PermissibleValue(text="Desmoid-type Fibromatosis ",
                                 meaning=ICDO["8821/1"]) )
        setattr(cls, "Lipofibromatosis ",
                PermissibleValue(text="Lipofibromatosis ",
                                 meaning=ICDO["8851/1"]) )
        setattr(cls, "Giant cell Fibroblastoma ",
                PermissibleValue(text="Giant cell Fibroblastoma ",
                                 meaning=ICDO["8834/1"]) )
        setattr(cls, "Dermatofibrosarcoma Protuberans ",
                PermissibleValue(text="Dermatofibrosarcoma Protuberans ",
                                 meaning=ICDO["8832/1"]) )
        setattr(cls, "Fibrosarcomatous Dermatofibrosarcoma Protuberans ",
                PermissibleValue(text="Fibrosarcomatous Dermatofibrosarcoma Protuberans ",
                                 meaning=ICDO["8832/3"]) )
        setattr(cls, "Pigmented Dermatofibrosarcoma Protuberans ",
                PermissibleValue(text="Pigmented Dermatofibrosarcoma Protuberans ",
                                 meaning=ICDO["8833/1"]) )
        setattr(cls, "Solitary Fibrous tumour ",
                PermissibleValue(text="Solitary Fibrous tumour ",
                                 meaning=ICDO["8815/1"]) )
        setattr(cls, "Solitary Fibrous tumour, malignant ",
                PermissibleValue(text="Solitary Fibrous tumour, malignant ",
                                 meaning=ICDO["8815/3"]) )
        setattr(cls, "Inflammatory myofibroblastic tumour ",
                PermissibleValue(text="Inflammatory myofibroblastic tumour ",
                                 meaning=ICDO["8825/1"]) )
        setattr(cls, "Low-grade myofibroblastic sarcoma ",
                PermissibleValue(text="Low-grade myofibroblastic sarcoma ",
                                 meaning=ICDO["8825/3"]) )
        setattr(cls, "Myxoinflammatory fibroblastic sarcoma/Atypical myxoinflammatory fibroblastic tumour ",
                PermissibleValue(text="Myxoinflammatory fibroblastic sarcoma/Atypical myxoinflammatory fibroblastic tumour ",
                                 meaning=ICDO["8811/1"]) )
        setattr(cls, "Infantile Fibrosarcoma ",
                PermissibleValue(text="Infantile Fibrosarcoma ",
                                 meaning=ICDO["8814/3"]) )
        setattr(cls, "Adult Fibrosarcoma ",
                PermissibleValue(text="Adult Fibrosarcoma ",
                                 meaning=ICDO["8810/3"]) )
        setattr(cls, "Myxofibrosarcoma ",
                PermissibleValue(text="Myxofibrosarcoma ",
                                 meaning=ICDO["8811/3"]) )
        setattr(cls, "Low-Grade Fibromyxoid Sarcoma ",
                PermissibleValue(text="Low-Grade Fibromyxoid Sarcoma ",
                                 meaning=ICDO["8840/3"]) )
        setattr(cls, "Sclerosing Epithelioid Fibrosarcoma ",
                PermissibleValue(text="Sclerosing Epithelioid Fibrosarcoma ",
                                 meaning=ICDO["8840/3"]) )
        setattr(cls, "Tenosynovial Giant Cell Tumour Localized Type ",
                PermissibleValue(text="Tenosynovial Giant Cell Tumour Localized Type ",
                                 meaning=ICDO["9252/0"]) )
        setattr(cls, "Tenosynovial Giant Cell Tumour Diffuse Type ",
                PermissibleValue(text="Tenosynovial Giant Cell Tumour Diffuse Type ",
                                 meaning=ICDO["9252/1"]) )
        setattr(cls, "Tenosynovial Giant Cell Tumour Malignant ",
                PermissibleValue(text="Tenosynovial Giant Cell Tumour Malignant ",
                                 meaning=ICDO["9252/3"]) )
        setattr(cls, "Plexiform fibrohistiocytic tumour ",
                PermissibleValue(text="Plexiform fibrohistiocytic tumour ",
                                 meaning=ICDO["8835/1"]) )
        setattr(cls, "Giant Cell Tumour of Soft Tissues",
                PermissibleValue(text="Giant Cell Tumour of Soft Tissues",
                                 meaning=ICDO["9251/1"]) )
        setattr(cls, "Leiomyosarcoma (Excluding Skin) ",
                PermissibleValue(text="Leiomyosarcoma (Excluding Skin) ",
                                 meaning=ICDO["8890/3"]) )
        setattr(cls, "Glomus Tumour (and Variants) ",
                PermissibleValue(text="Glomus Tumour (and Variants) ",
                                 meaning=ICDO["8711/0"]) )
        setattr(cls, "Malignant Glomus Tumour",
                PermissibleValue(text="Malignant Glomus Tumour",
                                 meaning=ICDO["8711/3"]) )
        setattr(cls, "Kaposiform Haemangioendothelioma",
                PermissibleValue(text="Kaposiform Haemangioendothelioma",
                                 meaning=ICDO["9130/1"]) )
        setattr(cls, "Retiform Haemangioendothelioma ",
                PermissibleValue(text="Retiform Haemangioendothelioma ",
                                 meaning=ICDO["9136/1"]) )
        setattr(cls, "Papillary Intralymphatic Angioendothelioma",
                PermissibleValue(text="Papillary Intralymphatic Angioendothelioma",
                                 meaning=ICDO["9135/1"]) )
        setattr(cls, "Composite Haemangioendothelioma ",
                PermissibleValue(text="Composite Haemangioendothelioma ",
                                 meaning=ICDO["9136/1"]) )
        setattr(cls, "Pseudomyogenic (Epithelioid Sarcoma-Like) Haemangioendothelioma",
                PermissibleValue(text="Pseudomyogenic (Epithelioid Sarcoma-Like) Haemangioendothelioma",
                                 meaning=ICDO["9136/1"]) )
        setattr(cls, "Kaposi Sarcoma ",
                PermissibleValue(text="Kaposi Sarcoma ",
                                 meaning=ICDO["9140/3"]) )
        setattr(cls, "Epithelioid Haemangioendothelioma",
                PermissibleValue(text="Epithelioid Haemangioendothelioma",
                                 meaning=ICDO["9133/3"]) )
        setattr(cls, "Angiosarcoma of Soft Tissue",
                PermissibleValue(text="Angiosarcoma of Soft Tissue",
                                 meaning=ICDO["9120/3"]) )
        setattr(cls, "Soft Tissue Chondroma",
                PermissibleValue(text="Soft Tissue Chondroma",
                                 meaning=ICDO["9220/0"]) )
        setattr(cls, "Extraskeletal Mesenchymal Chondrosarcoma",
                PermissibleValue(text="Extraskeletal Mesenchymal Chondrosarcoma",
                                 meaning=ICDO["9240/3"]) )
        setattr(cls, "Extraskeletal Osteosarcoma",
                PermissibleValue(text="Extraskeletal Osteosarcoma",
                                 meaning=ICDO["9180/3"]) )
        setattr(cls, "Gastrointestinal Stromal Tumour, Uncertain Malignant Potential",
                PermissibleValue(text="Gastrointestinal Stromal Tumour, Uncertain Malignant Potential",
                                 meaning=ICDO["8936/1"]) )
        setattr(cls, "Gastrointestinal Stromal Tumour, Malignant ",
                PermissibleValue(text="Gastrointestinal Stromal Tumour, Malignant ",
                                 meaning=ICDO["8936/3"]) )
        setattr(cls, "Malignant peripheral nerve sheath tumor ",
                PermissibleValue(text="Malignant peripheral nerve sheath tumor ",
                                 meaning=ICDO["9540/3"]) )
        setattr(cls, "Epithelioid Malignant peripheral nerve sheath tumor ",
                PermissibleValue(text="Epithelioid Malignant peripheral nerve sheath tumor ",
                                 meaning=ICDO["9542/3"]) )
        setattr(cls, "Malignant Triton Tumour ",
                PermissibleValue(text="Malignant Triton Tumour ",
                                 meaning=ICDO["9561/3"]) )
        setattr(cls, "Malignant granular cell Tumour ",
                PermissibleValue(text="Malignant granular cell Tumour ",
                                 meaning=ICDO["9580/3"]) )
        setattr(cls, "Ectomesenchymoma ",
                PermissibleValue(text="Ectomesenchymoma ",
                                 meaning=ICDO["8921/3"]) )
        setattr(cls, "Haemosiderotic fibrolipomatous Tumour ",
                PermissibleValue(text="Haemosiderotic fibrolipomatous Tumour ",
                                 meaning=ICDO["8811/1"]) )
        setattr(cls, "Atypical fibromyxanthoma",
                PermissibleValue(text="Atypical fibromyxanthoma",
                                 meaning=ICDO["8830/1"]) )
        setattr(cls, "Angiomatoid fibrous histiocytoma ",
                PermissibleValue(text="Angiomatoid fibrous histiocytoma ",
                                 meaning=ICDO["8836/1"]) )
        setattr(cls, "Ossifying fibromyxoid Tumour ",
                PermissibleValue(text="Ossifying fibromyxoid Tumour ",
                                 meaning=ICDO["8842/0"]) )
        setattr(cls, "Ossifying fibromyxoid Tumour, Malignant",
                PermissibleValue(text="Ossifying fibromyxoid Tumour, Malignant",
                                 meaning=ICDO["8842/3"]) )
        setattr(cls, "Mixed Tumour NOS ",
                PermissibleValue(text="Mixed Tumour NOS ",
                                 meaning=ICDO["8940/0"]) )
        setattr(cls, "Mixed Tumour NOS, Malignant",
                PermissibleValue(text="Mixed Tumour NOS, Malignant",
                                 meaning=ICDO["8940/3"]) )
        setattr(cls, "Myoepithelioma cacrinoma",
                PermissibleValue(text="Myoepithelioma cacrinoma",
                                 meaning=ICDO["8982/3"]) )
        setattr(cls, "Phosphaturic mesenchymal Tumour, Benign",
                PermissibleValue(text="Phosphaturic mesenchymal Tumour, Benign",
                                 meaning=ICDO["8990/0"]) )
        setattr(cls, "Phosphaturic mesenchymal Tumour, Malignant",
                PermissibleValue(text="Phosphaturic mesenchymal Tumour, Malignant",
                                 meaning=ICDO["8990/3"]) )
        setattr(cls, "Synovial sarcoma NOS",
                PermissibleValue(text="Synovial sarcoma NOS",
                                 meaning=ICDO["9040/3"]) )
        setattr(cls, "Synovial sarcoma, spindle cell",
                PermissibleValue(text="Synovial sarcoma, spindle cell",
                                 meaning=ICDO["9041/3"]) )
        setattr(cls, "Synovial sarcoma, biphasic",
                PermissibleValue(text="Synovial sarcoma, biphasic",
                                 meaning=ICDO["9043/3"]) )
        setattr(cls, "Epithelioid sarcoma",
                PermissibleValue(text="Epithelioid sarcoma",
                                 meaning=ICDO["8804/3"]) )
        setattr(cls, "Alveolar soft-part sarcoma",
                PermissibleValue(text="Alveolar soft-part sarcoma",
                                 meaning=ICDO["9581/3"]) )
        setattr(cls, "Clear cell sarcoma of soft tissue",
                PermissibleValue(text="Clear cell sarcoma of soft tissue",
                                 meaning=ICDO["9044/3"]) )
        setattr(cls, "Extraskeletal myxoid chondrosarcoma",
                PermissibleValue(text="Extraskeletal myxoid chondrosarcoma",
                                 meaning=ICDO["9231/3"]) )
        setattr(cls, "Desmoplastic small round cell tumour",
                PermissibleValue(text="Desmoplastic small round cell tumour",
                                 meaning=ICDO["8806/3"]) )
        setattr(cls, "Extra-renal rhabdoid tumor",
                PermissibleValue(text="Extra-renal rhabdoid tumor",
                                 meaning=ICDO["8963/3"]) )
        setattr(cls, "PEComa NOS, benign",
                PermissibleValue(text="PEComa NOS, benign",
                                 meaning=ICDO["8714/0"]) )
        setattr(cls, "PEComa NOS, malignant",
                PermissibleValue(text="PEComa NOS, malignant",
                                 meaning=ICDO["8714/3"]) )
        setattr(cls, "Intimal sarcoma",
                PermissibleValue(text="Intimal sarcoma",
                                 meaning=ICDO["9137/3"]) )
        setattr(cls, "Undifferentiated spindle cell sarcoma",
                PermissibleValue(text="Undifferentiated spindle cell sarcoma",
                                 meaning=ICDO["8801/3"]) )
        setattr(cls, "Undifferentiated pleomorphic sarcoma",
                PermissibleValue(text="Undifferentiated pleomorphic sarcoma",
                                 meaning=ICDO["8802/3"]) )
        setattr(cls, "Undifferentiated round cell sarcoma",
                PermissibleValue(text="Undifferentiated round cell sarcoma",
                                 meaning=ICDO["8803/3"]) )
        setattr(cls, "Undifferentiated epithelioid sarcoma",
                PermissibleValue(text="Undifferentiated epithelioid sarcoma",
                                 meaning=ICDO["8804/3"]) )
        setattr(cls, "Undifferentiated sarcoma NOS",
                PermissibleValue(text="Undifferentiated sarcoma NOS",
                                 meaning=ICDO["8805/3"]) )
        setattr(cls, "Conventional Osteosarcoma",
                PermissibleValue(text="Conventional Osteosarcoma",
                                 description="A high grade malignant bone-forming mesenchymal neoplasm producing osteoid. The tumor arises from the medullary portion of the bone. It affects the long bones and most commonly, the distal femur, proximal tibia, and proximal humerus. Pain with or without a palpable mass is the most common clinical presentation. It usually has an aggressive growth and may metastasize through the hematogenous route. The lung is the most frequent site of metastasis.",
                                 meaning=NCIT.C35870) )
        setattr(cls, "Surface Osteosarcoma",
                PermissibleValue(text="Surface Osteosarcoma",
                                 description="A usually aggressive malignant bone-forming mesenchymal neoplasm arising from the surface of the bone.",
                                 meaning=NCIT.C7134) )
        setattr(cls, "Osteoblastic Osteosarcoma",
                PermissibleValue(text="Osteoblastic Osteosarcoma",
                                 description="A conventional osteosarcoma characterized by the predominance of osteoid matrix.",
                                 meaning=NCIT.C53953) )
        setattr(cls, "Chondroblastic Osteosarcoma",
                PermissibleValue(text="Chondroblastic Osteosarcoma",
                                 description="An osteosarcoma characterised by the presence of atypical cartilage of variable cellularity. It may or may not be associated with the presence of myxoid areas or focal bone formation.",
                                 meaning=NCIT.C4021) )
        setattr(cls, "Fibroblastic Osteosarcoma",
                PermissibleValue(text="Fibroblastic Osteosarcoma",
                                 description="A conventional osteosarcoma characterized by the presence of spindle shaped cells.",
                                 meaning=NCIT.C4020) )
        setattr(cls, "Periosteal Osteosarcoma",
                PermissibleValue(text="Periosteal Osteosarcoma",
                                 description="An intermediate grade malignant bone-forming mesenchymal neoplasm with chondroblastic differentiation. It arises from the surface of the bone and affects the diaphysis or diaphyseal- metaphyseal portion of the long bones. A painless mass or swelling is the most common clinical sign. It is associated with a better prognosis than conventional osteosarcoma.",
                                 meaning=NCIT.C8970) )
        setattr(cls, "Parosteal Osteosarcoma",
                PermissibleValue(text="Parosteal Osteosarcoma",
                                 description="A low grade malignant bone-forming mesenchymal neoplasm arising from the surface of the bone. It usually affects the distal posterior femur, the proximal tibia, and proximal humerus. Painless swelling is the usual clinical sign. Most patients are young adults and the prognosis is usually excellent.",
                                 meaning=NCIT.C8969) )
        setattr(cls, "Giant Cell Rich Osteosarcoma",
                PermissibleValue(text="Giant Cell Rich Osteosarcoma",
                                 description="An exceedingly rare, high-grade variant of conventional osteosarcoma characterized by the presence of numerous osteoclast-like giant cells and variable amount of tumor osteoid.",
                                 meaning=NCIT.C179410) )
        setattr(cls, "Telangiectatic Osteosarcoma",
                PermissibleValue(text="Telangiectatic Osteosarcoma",
                                 description="An osteosarcoma usually arising from the metaphysis of long bones. It is characterized by the presence of a cystic architecture with blood-filled spaces. The prognosis is similar to that of conventional osteosarcoma.",
                                 meaning=NCIT.C3902) )
        setattr(cls, "Small Cell Osteosarcoma",
                PermissibleValue(text="Small Cell Osteosarcoma",
                                 description="An osteosarcoma usually arising from the metaphysis of long bones. It is characterized by the presence of small cells and osteoid production. The prognosis is usually unfavorable.",
                                 meaning=NCIT.C4023) )

class MolecularClassificationEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MolecularClassificationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "CNS Neuroblastoma, FOXR2-Activated",
                PermissibleValue(text="CNS Neuroblastoma, FOXR2-Activated",
                                 description="A rare central nervous system embryonal neoplasm with neuroblastic and/or neuronal differentiation. It is characterized by the presence of structural rearrangements of FOXR2 gene that result in the activation of the transcription factor FOXR2.",
                                 meaning=NCIT.C186547) )
        setattr(cls, "CNS Tumor With BCOR Internal Tandem Duplication",
                PermissibleValue(text="CNS Tumor With BCOR Internal Tandem Duplication",
                                 description="A rare central nervous system embryonal tumor characterized by the presence of uniform oval or spindle-shaped cells with round or oval nuclei, pseudorosette formation, and heterozygous internal tandem duplication in exon 15 of the BCOR gene.",
                                 meaning=NCIT.C186556) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class DeterminationSourceEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="DeterminationSourceEnum",
    )

class HistologyResultUnitEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="HistologyResultUnitEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "%",
                PermissibleValue(text="%",
                                 description="A unit for expressing a number as a fraction of hundred (on the basis of a rate or proportion per hundred).",
                                 meaning=NCIT.C48570) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class HistologyGradeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="HistologyGradeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "System NOS, Grade 1",
                PermissibleValue(text="System NOS, Grade 1",
                                 description="Tumor is well differentiated (low grade), system not specified",
                                 meaning=NCIT.C41338) )
        setattr(cls, "System NOS, Grade 2",
                PermissibleValue(text="System NOS, Grade 2",
                                 description="Tumor is moderately differentiated (intermediate grade), system not specified",
                                 meaning=NCIT.C41339) )
        setattr(cls, "System NOS, Grade 3",
                PermissibleValue(text="System NOS, Grade 3",
                                 description="Tumor is poorly differentiated (high grade) , system not specified",
                                 meaning=NCIT.C41340) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "FNCLCC, Grade GX",
                PermissibleValue(text="FNCLCC, Grade GX",
                                 description="Grade cannot be assessed.") )
        setattr(cls, "FNCLCC, Grade 1",
                PermissibleValue(text="FNCLCC, Grade 1",
                                 description="Total tumor differentiation, mitotic count, and necrosis score of 2 or 3.") )
        setattr(cls, "FNCLCC, Grade 2",
                PermissibleValue(text="FNCLCC, Grade 2",
                                 description="Total tumor differentiation, mitotic count, and necrosis score of 4 or 5.") )
        setattr(cls, "FNCLCC, Grade 3",
                PermissibleValue(text="FNCLCC, Grade 3",
                                 description="Total tumor differentiation, mitotic count, and necrosis score of 6, 7, or 8.") )
        setattr(cls, "System NOS, G1",
                PermissibleValue(text="System NOS, G1",
                                 description="Tumor is well differentiated (low grade), system not specified",
                                 meaning=NCIT.C41338) )
        setattr(cls, "System NOS, G2",
                PermissibleValue(text="System NOS, G2",
                                 description="Tumor is moderately differentiated (intermediate grade), system not specified",
                                 meaning=NCIT.C41339) )
        setattr(cls, "System NOS, G3",
                PermissibleValue(text="System NOS, G3",
                                 description="Tumor is poorly differentiated (high grade) , system not specified",
                                 meaning=NCIT.C41340) )

class SomaticMalignancyTypeEnum(EnumDefinitionImpl):

    Rhabdomyosarcoma = PermissibleValue(text="Rhabdomyosarcoma",
                                                       description="A rare aggressive malignant mesenchymal neoplasm arising from skeletal muscle. It usually occurs in children and young adults. Only a small percentage of tumors arise in the skeletal muscle of the extremities. The majority arise in other anatomic sites.",
                                                       meaning=NCIT.C3359)
    Adenocarcinoma = PermissibleValue(text="Adenocarcinoma",
                                                   description="A common cancer characterized by the presence of malignant glandular cells. Morphologically, adenocarcinomas are classified according to the growth pattern (e.g., papillary, alveolar) or according to the secreting product (e.g., mucinous, serous). Representative examples of adenocarcinoma are ductal and lobular breast carcinoma, lung adenocarcinoma, renal cell carcinoma, hepatocellular carcinoma (hepatoma), colon adenocarcinoma, and prostate adenocarcinoma.",
                                                   meaning=NCIT.C2852)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SomaticMalignancyTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Sarcoma, NOS",
                PermissibleValue(text="Sarcoma, NOS",
                                 description="A usually aggressive malignant neoplasm of the soft tissue or bone. It arises from muscle, fat, fibrous tissue, bone, cartilage, and blood vessels. Sarcomas occur in both children and adults. The prognosis depends largely on the degree of differentiation (grade) of the neoplasm. Representative subtypes are liposarcoma, leiomyosarcoma, osteosarcoma, and chondrosarcoma.",
                                 meaning=NCIT.C9118) )
        setattr(cls, "Primitive Neuroectodermal Tumor",
                PermissibleValue(text="Primitive Neuroectodermal Tumor",
                                 description="A malignant neoplasm that originates in the neuroectoderm. The neuroectoderm constitutes the portion of the ectoderm of the early embryo that gives rise to the central and peripheral nervous systems and includes some glial cell precursors.",
                                 meaning=NCIT.C3716) )
        setattr(cls, "Squamous Cell Carcinoma",
                PermissibleValue(text="Squamous Cell Carcinoma",
                                 description="A carcinoma arising from squamous epithelial cells. Morphologically, it is characterized by the proliferation of atypical, often pleomorphic squamous cells. Squamous cell carcinomas are graded by the degree of cellular differentiation as well, moderately, or poorly differentiated. Well differentiated carcinomas are usually associated with keratin production and the presence of intercellular bridges between adjacent cells. Representative examples are lung squamous cell carcinoma, skin squamous cell carcinoma, and cervical squamous cell carcinoma.",
                                 meaning=NCIT.C2929) )
        setattr(cls, "Malignant Histiocytosis",
                PermissibleValue(text="Malignant Histiocytosis",
                                 description="An antiquated term referring to cases of systemic non-Hodgkin lymphomas which are composed of large, atypical neoplastic lymphoid cells and cases of hemophagocytic syndromes. In the past, cases of anaplastic large cells lymphoma were called malignant histiocytosis.",
                                 meaning=NCIT.C7202) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class RevisedInpcEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="RevisedInpcEnum",
    )

class MkiEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="MkiEnum",
    )

class TumorSiteEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorSiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class DiseaseSiteEnum(EnumDefinitionImpl):

    Testes = PermissibleValue(text="Testes",
                                   description="Either of the paired male reproductive glands that produce the male germ cells and the male hormones.",
                                   meaning=NCIT.C12412)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="DiseaseSiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Bone Marrow",
                PermissibleValue(text="Bone Marrow",
                                 description="The tissue occupying the spaces of bone. It consiRMS of blood vessel sinuses and a network of hematopoietic cells which give rise to the red cells, white cells, and megakaryocytes.",
                                 meaning=NCIT.C12431) )
        setattr(cls, "Central Nervous System",
                PermissibleValue(text="Central Nervous System",
                                 description="The part of the nervous system that consiRMS of the brain, spinal cord, and meninges.",
                                 meaning=NCIT.C12438) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CnsDiseaseStatusEnum(EnumDefinitionImpl):

    CNS1 = PermissibleValue(text="CNS1",
                               description="The status of central nervous system leukemia at diagnosis, where there is an absence of blasts on a cerebral spinal fluid cytospin preparation, regardless of the number of white blood cells.",
                               meaning=NCIT.C116833)
    CNS2 = PermissibleValue(text="CNS2",
                               description="The status of central nervous system leukemia at diagnosis, where there are less than 5 white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is positive for blasts; or greater than 5 white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is considered negative by Steinherz/Bleyer algorithm.",
                               meaning=NCIT.C116834)
    CNS3 = PermissibleValue(text="CNS3",
                               description="The status of central nervous system leukemia at diagnosis, where there are more than 5 white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is positive for blasts; with or without clinical signs of CNS leukemia.",
                               meaning=NCIT.C116835)
    CNS2a = PermissibleValue(text="CNS2a",
                                 description="The status of central nervous system leukemia at diagnosis, where there are less than 10 red blood cells and less than 5 white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is positive for blasts.",
                                 meaning=NCIT.C116836)
    CNS2b = PermissibleValue(text="CNS2b",
                                 description="The status of central nervous system leukemia at diagnosis, where there are 10 or more red blood cells and less than 5 white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is positive for blasts.",
                                 meaning=NCIT.C116837)
    CNS2c = PermissibleValue(text="CNS2c",
                                 description="The status of central nervous system leukemia at diagnosis, where there are 10 or more red blood cells and 5 or more white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is positive for blasts and is considered negative by Steinherz/Bleyer algorithm.",
                                 meaning=NCIT.C116838)
    CNS3a = PermissibleValue(text="CNS3a",
                                 description="The status of central nervous system leukemia at diagnosis, where there are less than 10 red blood cells and 5 or more white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is positive for blasts.",
                                 meaning=NCIT.C116840)
    CNS3b = PermissibleValue(text="CNS3b",
                                 description="The status of central nervous system leukemia at diagnosis, where there are 10 or more red blood cells and 5 or more white blood cells per microliter on a cerebral spinal fluid cytospin preparation that is considered positive by Steinherz/Bleyer algorithm.",
                                 meaning=NCIT.C116841)
    CNS3c = PermissibleValue(text="CNS3c",
                                 description="The status of central nervous system leukemia at diagnosis, where there are clinical signs of central system leukemia (such as facial nerve palsy, brain/eye involvement, or hypothalamic syndrome).",
                                 meaning=NCIT.C116843)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CnsDiseaseStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class DetectionMethodEnum(EnumDefinitionImpl):

    Imaging = PermissibleValue(text="Imaging",
                                     description="The removal of tissue specimens or fluid from the living body for microscopic examination, performed to establish a diagnosis.",
                                     meaning=NCIT.C15189)
    Biopsy = PermissibleValue(text="Biopsy",
                                   description="The removal of tissue specimens or fluid from the living body for microscopic examination, performed to establish a diagnosis.",
                                   meaning=NCIT.C15189)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="DetectionMethodEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Cerebrospinal Fluid Results",
                PermissibleValue(text="Cerebrospinal Fluid Results",
                                 description="The results of cerebrospinal fluid laboratory teRMS.",
                                 meaning=NCIT.C168884) )
        setattr(cls, "Clinical Signs or Symptoms",
                PermissibleValue(text="Clinical Signs or Symptoms",
                                 description="Objective evidence of disease perceptible to the examining practitioner (sign) and subjective evidence of disease perceived by the patient (symptom).",
                                 meaning=NCIT.C100104) )
        setattr(cls, "Bone Marrow Results",
                PermissibleValue(text="Bone Marrow Results",
                                 description="The results of bone marrow laboratory tests.",
                                 meaning=NCIT.C190021) )
        setattr(cls, "Tumor marker",
                PermissibleValue(text="Tumor marker",
                                 description="A substance present in or produced by a tumor or by the host, that can be used for differentiating neoplastic from normal tissue based on measurements in body fluids, secretions, cells, and/or tissues. Markers are used in diagnosis, staging and prognosis of cancer, provide an estimation of tumor burden, and serve for monitoring effects of therapy, detecting recurrence, localization of tumors, and screening in general populations.",
                                 meaning=NCIT.C17220) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MyeloidSarcomaSiteEnum(EnumDefinitionImpl):

    Bone = PermissibleValue(text="Bone",
                               description="Connective tissue that forms the skeletal components of the body.",
                               meaning=NCIT.C12366)
    CNS = PermissibleValue(text="CNS",
                             description="The part of the nervous system that consiRMS of the brain, spinal cord, and meninges.",
                             meaning=NCIT.C12438)
    Orbit = PermissibleValue(text="Orbit",
                                 description="The bony cavity of the skull which contains the eye, anterior portion of the optic nerve, ocular muscles and ocular adnexa. Seven bones contribute to the structure of the orbit: the frontal, maxillary, zygomatic, sphenoid, lacrimal, ethmoid, and palatine bones.",
                                 meaning=NCIT.C12347)
    Skin = PermissibleValue(text="Skin",
                               description="An organ that constitutes the external surface of the body. It consiRMS of the epidermis, dermis, and skin appendages.",
                               meaning=NCIT.C12470)
    Testis = PermissibleValue(text="Testis",
                                   description="Either of the paired male reproductive glands that produce the male germ cells and the male hormones.",
                                   meaning=NCIT.C12412)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MyeloidSarcomaSiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class PerformanceScoreEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="PerformanceScoreEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class PerformanceScoreSystemEnum(EnumDefinitionImpl):

    Karnofsky = PermissibleValue(text="Karnofsky",
                                         description="An index designed for classifying patients 16 years of age or older by their functional impairment.",
                                         meaning=NCIT.C28013)
    Lansky = PermissibleValue(text="Lansky",
                                   description="The play-performance scale for children is a parent-rated instrument which records usual play activity as the index of performance. It is similar to the Karnofsky Performance Scale for adults.",
                                   meaning=NCIT.C38144)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="PerformanceScoreSystemEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class GpohScoreEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=PCDC["/ncitC17998"])

    _defn = EnumDefinition(
        name="GpohScoreEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "1",
                PermissibleValue(text="1",
                                 description="Normal, no complaint",
                                 meaning=PCDC["/ncitC174992"]) )
        setattr(cls, "2",
                PermissibleValue(text="2",
                                 description="Mild complaints, but needs no assistance",
                                 meaning=PCDC["/ncitC174993"]) )
        setattr(cls, "3",
                PermissibleValue(text="3",
                                 description="Age-appropriate activity severely impaired",
                                 meaning=PCDC["/ncitC174994"]) )
        setattr(cls, "4",
                PermissibleValue(text="4",
                                 description="Confined to bed, needs nursing care",
                                 meaning=PCDC["/ncitC174995"]) )
        setattr(cls, "5",
                PermissibleValue(text="5",
                                 description="Needs intensive care, seriously ill, moribund",
                                 meaning=PCDC["/ncitC174996"]) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=PCDC["/ncitC43234"]) )

class RiskGroupSystemEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="RiskGroupSystemEnum",
    )

class RiskGroupEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="RiskGroupEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "IGCCC, Good",
                PermissibleValue(text="IGCCC, Good",
                                 description="The good prognosis category refers to testes/retroperitoneal primary and no nonpulmonary visceral metastases and the following markers: AFP less than 1,000 ng/mL, hCG less than 5,000 IU/L and LDH less than 1.5 × ULN.") )
        setattr(cls, "IGCCC, Intermediate",
                PermissibleValue(text="IGCCC, Intermediate",
                                 description="The intermediate risk group refers to testes/retroperitoneal primary and no nonpulmonary visceral metastases and the following markers: AFP greater than or equal to 1,000 ng/mL and less than or equal to 10,000 ng/mL, or hCG greater than or equal to 5,000 IU/L and less than or equal to 50,000 ng/mL or LDH greater than or equal to 1.5 × ULN and less than or equal to 10 × ULN.") )
        setattr(cls, "IGCCC, Poor",
                PermissibleValue(text="IGCCC, Poor",
                                 description="The poor prognosis category refers to mediastinal primary or nonpulmonary visceral metastases or markers with the following: AFP greater than 10,000 ng/mL or hCG greater than 50,000 IU/L or LDH greater than 10 × ULN.") )
        setattr(cls, "MaGIC, Low",
                PermissibleValue(text="MaGIC, Low",
                                 description="The low risk classification refers to age younger than 11 years and extragonadal stage III-IV disease.") )
        setattr(cls, "MaGIC, Standard",
                PermissibleValue(text="MaGIC, Standard",
                                 description="The standard risk classification refers to four-years-event-free survival of more than 80%.") )
        setattr(cls, "MaGIC, Poor",
                PermissibleValue(text="MaGIC, Poor",
                                 description="The poor risk classification refers to age equal or older than 11 years, ovarian stage IV disease, and extragonadal stage III-IV disease.") )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class GtsTreatmentEnum(EnumDefinitionImpl):

    Surgery = PermissibleValue(text="Surgery",
                                     description="The branch of medical science that treats disease or injury by operative procedures.",
                                     meaning=NCIT.C17173)
    Chemotherapy = PermissibleValue(text="Chemotherapy",
                                               description="The use of synthetic or naturally-occurring chemicals for the treatment of diseases.",
                                               meaning=NCIT.C15632)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT["17998"])

    _defn = EnumDefinition(
        name="GtsTreatmentEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT["43234"]) )

class InitialTreatmentCategoryEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="InitialTreatmentCategoryEnum",
    )

class EvaluatorEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="EvaluatorEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class PresentationSymptomsEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="PresentationSymptomsEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ClinicalSignsEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ClinicalSignsEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SuspectedReferringDiagnosisEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="SuspectedReferringDiagnosisEnum",
    )

class VisualAcuityTechniqueEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="VisualAcuityTechniqueEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class VisualAcuityResultEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="VisualAcuityResultEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class VisualAcuityNotationEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="VisualAcuityNotationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AnteriorSegmentExamEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="AnteriorSegmentExamEnum",
    )

class AnteriorSegmentDetailsEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="AnteriorSegmentDetailsEnum",
    )

class IntraocularPressureUnitEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="IntraocularPressureUnitEnum",
    )

class RetinalDetachmentEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="RetinalDetachmentEnum",
    )

class AdvancedDiseaseSignsEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="AdvancedDiseaseSignsEnum",
    )

class MriSequenceEnum(EnumDefinitionImpl):

    FLAIR = PermissibleValue(text="FLAIR",
                                 description="A magnetic resonance imaging (MRI) pulse sequence that uses an inversion recovery technique to null fluids present in the imaging area, improving clarity of the object of interest.",
                                 meaning=NCIT.C82392)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MriSequenceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Diffusion Weighted Imaging",
                PermissibleValue(text="Diffusion Weighted Imaging",
                                 description="A diffusion MRI technique in which diffusion-sensitizing gradients are applied to the imaging sequence.",
                                 meaning=NCIT.C111116) )
        setattr(cls, "MRI T1 with Gadolinium",
                PermissibleValue(text="MRI T1 with Gadolinium",
                                 description="T1 weighted magnetic resonance imaging done with the addition of a contrast agent to enhance tissues.",
                                 meaning=NCIT.C180728) )
        setattr(cls, "MRI T2",
                PermissibleValue(text="MRI T2",
                                 description="A method of magnetic resonance imaging (MRI) that creates contrast between tissues based on differences in the transverse relaxation of a tissue's net magnetization vector; it measures the time taken for spinning protons to lose phase coherence among the nuclei spinning perpendicular to the main field. This MRI sequence is produced by using a longer time to echo (TE) and repetition time (TR) than a T1-weighted sequence.",
                                 meaning=NCIT.C180729) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TumorPresentationEnum(EnumDefinitionImpl):

    Diffuse = PermissibleValue(text="Diffuse",
                                     description="Widely spread; not localized or confined.",
                                     meaning=NCIT.C14175)
    Nodular = PermissibleValue(text="Nodular",
                                     description="A benign or malignant neoplasm characterized by the formation of nodules by the proliferating neoplastic cells.",
                                     meaning=NCIT.C36012)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorPresentationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ClassificationEnum(EnumDefinitionImpl):

    Metastatic = PermissibleValue(text="Metastatic",
                                           description="A term referring to the clinical or pathologic observation of a tumor extension from its original site of growth to another anatomic site.",
                                           meaning=NCIT.C14174)
    Primary = PermissibleValue(text="Primary",
                                     description="A tumor at the original site of origin.",
                                     meaning=NCIT.C8509)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Regional = PermissibleValue(text="Regional",
                                       description="Refers to cancer that has grown beyond the original (primary) tumor to nearby lymph nodes or organs and tissues.",
                                       meaning=NCIT.C41844)

    _defn = EnumDefinition(
        name="ClassificationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SiteEnum(EnumDefinitionImpl):

    Cerebellum = PermissibleValue(text="Cerebellum",
                                           description="The portion of the brain in the back of the head between the cerebrum and the brain stem. The cerebellum controls balance for walking and standing, and other complex motor functions.",
                                           meaning=NCIT.C12445)
    Leptomeningeal = PermissibleValue(text="Leptomeningeal",
                                                   description="The two innermost layers of tissue that cover the brain and spinal cord, the arachnoid mater and the pia mater.",
                                                   meaning=NCIT.C32979)
    Medulla = PermissibleValue(text="Medulla",
                                     description="The lower portion of the brainstem located between the pons and brainstem. This structure contains several descending and ascending tracts, lower cranial nerve nuclei, a significant proportion of the reticular system of the brainstem and other structures.",
                                     meaning=NCIT.C12442)
    Midbrain = PermissibleValue(text="Midbrain",
                                       description="The uppermost portion of the brainstem located between the pons and the diencephalon. The midbrain contains the cerebral peduncles, oculomotor, trochlear and red nuclei, substantia nigra and various other nuclei and tracts.",
                                       meaning=NCIT.C12510)
    Pineal = PermissibleValue(text="Pineal",
                                   description="A small endocrine gland in the brain, situated beneath the back part of the corpus callosum, that secretes melatonin.",
                                   meaning=NCIT.C12398)
    Pons = PermissibleValue(text="Pons",
                               description="The middle portion of the brainstem located between the midbrain and the medulla oblongata. The fourth ventricle lies dorsal to the pons which also contains the motor trigeminal nuclei and the abducens nuclei. The cerebellum contributes a large number of afferent fibers to the pons.",
                               meaning=NCIT.C12511)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Abdomen = PermissibleValue(text="Abdomen",
                                     description="The portion of the body that lies between the thorax and the pelvis.",
                                     meaning=NCIT.C12664)
    Acetabulum = PermissibleValue(text="Acetabulum",
                                           description="Two cup shaped areas, one each on the lateral side of the lower pelvis that house the head of the femur to form the ball and socket joint of the hip.",
                                           meaning=NCIT.C32042)
    Ankle = PermissibleValue(text="Ankle",
                                 description="A gliding joint between the distal ends of the tibia and fibula and the proximal end of the talus.",
                                 meaning=NCIT.C32078)
    Anus = PermissibleValue(text="Anus",
                               description="The lower opening of the digestive tract, lying in the cleft between the buttocks, through which fecal matter is extruded.",
                               meaning=NCIT.C43362)
    Appendix = PermissibleValue(text="Appendix",
                                       description="Small tissue projection existing as a cecal diverticulum with a questionable history of vestigial versus specialized organ.",
                                       meaning=NCIT.C12380)
    Axilla = PermissibleValue(text="Axilla",
                                   description="Any one of the paired bones, 12 on either side, extending from the thoracic vertebrae toward the median line on the ventral aspect of the trunk.",
                                   meaning=NCIT.C12674)
    Basin = PermissibleValue(text="Basin",
                                 description="An organ composed of grey and white matter containing billions of neurons that is the center for intelligence and reasoning. It is protected by the bony cranium.",
                                 meaning=NCIT.C12439)
    Bladder = PermissibleValue(text="Bladder",
                                     description="The distensible sac-like organ that functions as a reservoir of urine, collecting from the kidneys and eliminating via the urethra.",
                                     meaning=NCIT.C12414)
    Bone = PermissibleValue(text="Bone",
                               description="Connective tissue that forms the skeletal components of the body.",
                               meaning=NCIT.C12366)
    Brain = PermissibleValue(text="Brain",
                                 description="An organ composed of grey and white matter containing billions of neurons that is the center for intelligence and reasoning. It is protected by the bony cranium.",
                                 meaning=NCIT.C12439)
    Breast = PermissibleValue(text="Breast",
                                   description="One of two hemispheric projections of variable size situated in the subcutaneous layer over the pectoralis major muscle on either side of the chest.",
                                   meaning=NCIT.C12971)
    Bronchus = PermissibleValue(text="Bronchus",
                                       description="Tubular structure in continuation with the trachea, serving as air passage. It terminates in the lung (terminal bronchiole).",
                                       meaning=NCIT.C12683)
    Buttock = PermissibleValue(text="Buttock",
                                     description="Either of the fleshy mounds in the rear pelvic area of the human body formed by the gluteal muscles.",
                                     meaning=NCIT.C89806)
    Calcaneum = PermissibleValue(text="Calcaneum",
                                         description="The irregular and largest tarsal bone that forms the heel.",
                                         meaning=NCIT.C32250)
    Cervix = PermissibleValue(text="Cervix",
                                   description="The lower part of the uterus occupying the region between the isthmus of the uterus and the vagina. It is divided into supravaginal and vaginal portions.",
                                   meaning=NCIT.C12311)
    Cheek = PermissibleValue(text="Cheek",
                                 description="The fleshy part of the face bounded by the eyes, nose, ear, and jaw line.",
                                 meaning=NCIT.C13070)
    Chest = PermissibleValue(text="Chest",
                                 description="The anterior side of the thorax from the neck to the abdomen. The shape of the chest is often regarded as potential insight into a disease process, as in the case of barrel chest and respiratory dysfunction.",
                                 meaning=NCIT.C25389)
    Clavicle = PermissibleValue(text="Clavicle",
                                       description="One of a pair of bones linking the scapula and the sternum. The clavicle is part of the pectoral girdle.",
                                       meaning=NCIT.C24203)
    Coccyx = PermissibleValue(text="Coccyx",
                                   description="A small bone located at the bottom of the spine. The coccyx is a result of 3-5 fused rudimentary vertebrae.",
                                   meaning=NCIT.C12696)
    Colon = PermissibleValue(text="Colon",
                                 description="The part of the large intestine measured from the cecum to the rectum consisting of ascending, transverse, descending and sigmoid portions. The purpose of the colon is to remove water from digested food prior to excretion.",
                                 meaning=NCIT.C12382)
    Cutaneous = PermissibleValue(text="Cutaneous",
                                         description="Having to do with the skin.",
                                         meaning=NCIT.C13316)
    Duodenum = PermissibleValue(text="Duodenum",
                                       description="A jointed tube 25-30 cm long that connects the stomach to the jejunum.",
                                       meaning=NCIT.C12263)
    Elbow = PermissibleValue(text="Elbow",
                                 description="A type of hinge joint located between the forearm and upper arm.",
                                 meaning=NCIT.C32497)
    Epididymis = PermissibleValue(text="Epididymis",
                                           description="A crescent-like structure located in the upper and posterior surfaces of the testis. It consists of the efferent ductules and the duct of the epididymis. It facilitates the maturation of sperm that is produced in the testis.",
                                           meaning=NCIT.C12328)
    Esophagus = PermissibleValue(text="Esophagus",
                                         description="The portion of the digestive canal between the pharynx and stomach. It is about 25 cm long and consists of three parts: the cervical part, from the cricoid cartilage to the thoracic inlet; thoracic part, from thoracic inlet to the diaphragm; and abdominal part, below the diaphragm to the cardiac opening of the stomach.",
                                         meaning=NCIT.C12389)
    Eyelid = PermissibleValue(text="Eyelid",
                                   description="A thin membrane of skin with the purpose of covering and protecting an eye.",
                                   meaning=NCIT.C12713)
    Face = PermissibleValue(text="Face",
                               description="The anterior portion of the head extending from the forehead to the chin and ear to ear. The facial structures contain the eyes, nose and mouth, cheeks and jaws.",
                               meaning=NCIT.C13071)
    Femur = PermissibleValue(text="Femur",
                                 description="The upper leg bone positioned between the pelvis and the knee.",
                                 meaning=NCIT.C12717)
    Fibula = PermissibleValue(text="Fibula",
                                   description="The small, lateral calf bone extending from the knee to the ankle.",
                                   meaning=NCIT.C12718)
    Finger = PermissibleValue(text="Finger",
                                   description="Any of the digits of the hand.",
                                   meaning=NCIT.C32608)
    Foot = PermissibleValue(text="Foot",
                               description="The structure found below the ankle joint required for locomotion.",
                               meaning=NCIT.C32622)
    Forearm = PermissibleValue(text="Forearm",
                                     description="The structure on the upper limb, between the elbow and the wrist.",
                                     meaning=NCIT.C32628)
    Gallbladder = PermissibleValue(text="Gallbladder",
                                             description="A pear-shaped organ located under the liver that stores and concentrates bile secreted by the liver. From the gallbladder the bile is delivered through the bile ducts into the intestine thereby aiding the digestion of fat-containing foods.",
                                             meaning=NCIT.C12377)
    Groin = PermissibleValue(text="Groin",
                                 description="The lower region of the anterior abdominal wall located laterally to the pubic region.",
                                 meaning=NCIT.C12726)
    Hand = PermissibleValue(text="Hand",
                               description="The distal portion of the upper extremity. It consists of the carpus, metacarpus, and digits.",
                               meaning=NCIT.C32712)
    Head = PermissibleValue(text="Head",
                               description="The anterior and superior part of a human bearing the mouth, the brain and sensory organs.",
                               meaning=NCIT.C12419)
    Heart = PermissibleValue(text="Heart",
                                 description="A hollow organ located slightly to the left of the middle portion of the chest. It is composed of muscle and it is divided by a septum into two sides: the right side which receives de-oxygenated blood from the body and the left side which sends newly oxygenated blood to the body. Each side is composed of two chambers: the atrium (receiving blood) and ventricle (ejecting blood).",
                                 meaning=NCIT.C12727)
    Hip = PermissibleValue(text="Hip",
                             description="The lateral prominence of the pelvis from the waist to the thigh.",
                             meaning=NCIT.C64193)
    Humerus = PermissibleValue(text="Humerus",
                                     description="The upper arm bone between the shoulder and elbow.",
                                     meaning=NCIT.C12731)
    Hypopharynx = PermissibleValue(text="Hypopharynx",
                                             description="The lower part of the pharynx that connects to the esophagus.",
                                             meaning=NCIT.C12246)
    Ilium = PermissibleValue(text="Ilium",
                                 description="The broad, dorsal, upper, and widest of the three principal bones composing either half of the pelvis.",
                                 meaning=NCIT.C32765)
    Intraperitoneal = PermissibleValue(text="Intraperitoneal",
                                                     description="Relating to the peritoneal cavity as the intended site of administration.",
                                                     meaning=NCIT.C13352)
    Intrathoracic = PermissibleValue(text="Intrathoracic",
                                                 description="Within the thoracic cavity.",
                                                 meaning=NCIT.C105579)
    Ischium = PermissibleValue(text="Ischium",
                                     description="The most posterior and ventral bone making up the pelvis.",
                                     meaning=NCIT.C32884)
    Kidney = PermissibleValue(text="Kidney",
                                   description="One of the two bean-shaped organs located on each side of the spine in the retroperitoneum. The right kidney is located below the liver and the left kidney below the diaphragm. The kidneys filter and secrete metabolic products and minerals from the blood, thus maintaining homeostasis. On the superior pole of each kidney there is an adrenal gland. Each kidney and adrenal gland is surrounded by fat.",
                                   meaning=NCIT.C77608)
    Knee = PermissibleValue(text="Knee",
                               description="A joint connecting the lower part of the femur with the upper part of the tibia. The lower part of the femur and the upper part of the tibia are attached to each other by ligaments. Other structures of the knee joint include the upper part of the fibula, located below and parallel to the tibia, and the patella which moves as the knee bends.",
                               meaning=NCIT.C32898)
    Larynx = PermissibleValue(text="Larynx",
                                   description="The cartilaginous structure of the respiratory tract between the pharynx and the trachea. It contains elastic vocal cords required for sound production.",
                                   meaning=NCIT.C12420)
    Leg = PermissibleValue(text="Leg",
                             description="One of the two lower extremities in humans used for locomotion and support.",
                             meaning=NCIT.C32974)
    Liver = PermissibleValue(text="Liver",
                                 description="A triangular-shaped organ located under the diaphragm in the right hypochondrium. It is the largest internal organ of the body, weighting up to 2 kg. Metabolism and bile secretion are its main functions. It is composed of cells which have the ability to regenerate.",
                                 meaning=NCIT.C12392)
    Lung = PermissibleValue(text="Lung",
                               description="One of a pair of viscera occupying the pulmonary cavities of the thorax, the organs of respiration in which aeration of the blood takes place. As a rule, the right lung is slightly larger than the left and is divided into three lobes (an upper, a middle, and a lower or basal), while the left has two lobes (an upper and a lower or basal). Each lung is irregularly conical in shape, presenting a blunt upper extremity (the apex), a concave base following the curve of the diaphragm, an outer convex surface (costal surface), an inner or mediastinal surface (mediastinal surface), a thin and sharp anterior border, and a thick and rounded posterior border.",
                               meaning=NCIT.C12468)
    Mandible = PermissibleValue(text="Mandible",
                                       description="The lower jaw bone holding the lower teeth.",
                                       meaning=NCIT.C12290)
    Maxilla = PermissibleValue(text="Maxilla",
                                     description="The upper jawbone in vertebrates; it is fused to the cranium.",
                                     meaning=NCIT.C26470)
    Mediastinum = PermissibleValue(text="Mediastinum",
                                             description="A group of organs surrounded by loose connective tissue, separating the two pleural sacs, between the sternum anteriorly and the vertebral column posteriorly as well as from the thoracic inlet superiorly to the diaphragm inferiorly. The mediastinum contains the heart and pericardium, the bases of the great vessels, the trachea and bronchi, esophagus, thymus, lymph nodes, thoracic duct, phrenic and vagus nerves, and other structures and tissues.",
                                             meaning=NCIT.C12748)
    Meninges = PermissibleValue(text="Meninges",
                                       description="Any one of three membranes that surround the brain and spinal cord.",
                                       meaning=NCIT.C12348)
    Metacarpus = PermissibleValue(text="Metacarpus",
                                           description="Any of the five bones between the wrist and the fingers that form the skeleton of the palm.",
                                           meaning=NCIT.C12751)
    Metatarsus = PermissibleValue(text="Metatarsus",
                                           description="A bone belonging to the middle part of the foot located between toes and ankle. There are 5 metatarsal bones and they are numbered from the medial side.",
                                           meaning=NCIT.C12752)
    Nasopharynx = PermissibleValue(text="Nasopharynx",
                                             description="The part of the pharynx in the back of the throat, at and above the soft palate. The nasopharynx is continuous with the nasal passages.",
                                             meaning=NCIT.C12423)
    Neck = PermissibleValue(text="Neck",
                               description="The region that connects the head to the rest of the body.",
                               meaning=NCIT.C13063)
    Orbit = PermissibleValue(text="Orbit",
                                 description="The bony cavity of the skull which contains the eye, anterior portion of the optic nerve, ocular muscles and ocular adnexa. Seven bones contribute to the structure of the orbit: the frontal, maxillary, zygomatic, sphenoid, lacrimal, ethmoid, and palatine bones.",
                                 meaning=NCIT.C12347)
    Oropharynx = PermissibleValue(text="Oropharynx",
                                           description="The part of the pharynx between the soft palate and the upper portion of the epiglottis.",
                                           meaning=NCIT.C12762)
    Ovary = PermissibleValue(text="Ovary",
                                 description="One of the paired female reproductive glands containing the ova or germ cells; the ovary's stroma is a vascular connective tissue containing numbers of ovarian follicles enclosing the ova.",
                                 meaning=NCIT.C12404)
    Pancreas = PermissibleValue(text="Pancreas",
                                       description="An organ behind the lower part of the stomach that is the shape of a fish and about the size of a hand. It is a compound gland composed of both exocrine and endocrine tissues. The endocrine pancreas makes insulin so that the body can use glucose (sugar) for energy. The exocrine pancreas makes enzymes that help the body digest food. Spread all over the pancreas are areas called the Islets of Langerhans. The cells in these areas each have a special purpose. The alpha cells make glucagon, which raises the level of glucose in the blood; the beta cells make insulin; the delta cells make somatostatin. There are also PP cells and D1 cells, about which little is known.",
                                       meaning=NCIT.C12393)
    Paraspinal = PermissibleValue(text="Paraspinal",
                                           description="Pertaining to muscles and/or tissue adjacent to the spinal column.",
                                           meaning=NCIT.C129461)
    Paratesticular = PermissibleValue(text="Paratesticular",
                                                   description="A small anatomical compartment that contains the testicular collecting system, and mesothelial and mesenchymal components that represent extensions of the abdominal cavity and retroperitoneum.",
                                                   meaning=NCIT.C162491)
    Parotid = PermissibleValue(text="Parotid",
                                     description="The largest of the three paired salivary glands, located in front of the ear.",
                                     meaning=NCIT.C12427)
    Patella = PermissibleValue(text="Patella",
                                     description="A small flat triangular bone in front of the knee that articulates with the femur and protects the knee joint.",
                                     meaning=NCIT.C33282)
    Pelvis = PermissibleValue(text="Pelvis",
                                   description="The bony, basin-shaped structure formed by the hipbones and the base of the backbone supporting the lower limbs in humans.",
                                   meaning=NCIT.C12767)
    Penis = PermissibleValue(text="Penis",
                                 description="The male organ of urination and copulation.",
                                 meaning=NCIT.C12409)
    Perineum = PermissibleValue(text="Perineum",
                                       description="The area located between the anus and vulva in females, and anus and scrotum in males.",
                                       meaning=NCIT.C33301)
    Peritoneum = PermissibleValue(text="Peritoneum",
                                           description="The tissue that lines the wall of the abdominal cavity, intestine, mesentery, and pelvic organs. It consiRMS of the parietal peritoneum and the visceral peritoneum.",
                                           meaning=NCIT.C12770)
    Pleura = PermissibleValue(text="Pleura",
                                   description="The tissue that lines the wall of the thoracic cavity and the surface of the lungs.",
                                   meaning=NCIT.C12469)
    Prostate = PermissibleValue(text="Prostate",
                                       description="The walnut shaped accessory sex gland of the male reproductive system. It is located in the pelvis just below the bladder, surrounding the prostatic part of the urethra. The prostate gland secretes a fluid which is part of the semen.",
                                       meaning=NCIT.C12410)
    Rectum = PermissibleValue(text="Rectum",
                                   description="The terminal portion of the gastrointestinal tract, extending from the rectosigmoid junction to the anal canal.",
                                   meaning=NCIT.C12390)
    Retroperitoneum = PermissibleValue(text="Retroperitoneum",
                                                     description="The back of the abdomen where the kidneys lie and the great blood vessels run.",
                                                     meaning=NCIT.C12298)
    Rib = PermissibleValue(text="Rib",
                             description="Any one of the paired bones, 12 on either side, extending from the thoracic vertebrae toward the median line on the ventral aspect of the trunk. The long curved bones which form the rib cage. Generally, ribs 1 to 7 are connected to the sternum by their costal cartilages and are called true ribs, whereas ribs 8 to 12 are termed false ribs.",
                             meaning=NCIT.C12782)
    Sacrum = PermissibleValue(text="Sacrum",
                                   description="The triangular bone, made up of 5 fused bones of the spine, located in the lower area of the spine between the fifth lumbar vertebra and the coccyx.",
                                   meaning=NCIT.C33508)
    Sacrococcygeal = PermissibleValue(text="Sacrococcygeal",
                                                   description="The amphiarthrodial joint between the sacrum and coccyx.",
                                                   meaning=NCIT.C33506)
    Scalp = PermissibleValue(text="Scalp",
                                 description="The skin which covers the top of the head and which is usually covered by hair.",
                                 meaning=NCIT.C89807)
    Scapula = PermissibleValue(text="Scapula",
                                     description="The flat triangle-shaped bone that connects the humerus with the clavicle in the back of the shoulder.",
                                     meaning=NCIT.C12744)
    Shoulder = PermissibleValue(text="Shoulder",
                                       description="The region of the body between the neck and the upper arm.",
                                       meaning=NCIT.C12783)
    Skin = PermissibleValue(text="Skin",
                               description="An organ that constitutes the external surface of the body. It consiRMS of the epidermis, dermis, and skin appendages.",
                               meaning=NCIT.C12470)
    Skull = PermissibleValue(text="Skull",
                                 description="The bones that form the head, made up of the bones of the braincase and face.",
                                 meaning=NCIT.C12789)
    Spine = PermissibleValue(text="Spine",
                                 description="A series of bones, muscles, tendons, and other tissues reaching from the base of the skull to the tailbone. The vertebral column forms the axis of the skeleton and encloses as well as protects the spinal cord and the fluid surrounding the spinal cord.",
                                 meaning=NCIT.C12998)
    Spleen = PermissibleValue(text="Spleen",
                                   description="An organ that is part of the hematopoietic and immune systems. It is composed of the white pulp and the red pulp and is surrounded by a capsule. It is located in the left hypochondriac region. Its functions include lymphocyte production, blood cell storage, and blood cell destruction.",
                                   meaning=NCIT.C12432)
    Sternum = PermissibleValue(text="Sternum",
                                     description="The long, flat bone connecting with the cartilages of the first seven ribs and the clavicle.",
                                     meaning=NCIT.C62484)
    Stomach = PermissibleValue(text="Stomach",
                                     description="An organ located under the diaphragm, between the liver and the spleen as well as between the esophagus and the small intestine. The stomach is the primary organ of food digestion.",
                                     meaning=NCIT.C12391)
    Talus = PermissibleValue(text="Talus",
                                 description="The bone of the foot that connects with the tibia and fibula to form the ankle joint.",
                                 meaning=NCIT.C52799)
    Testis = PermissibleValue(text="Testis",
                                   description="Either of the paired male reproductive glands that produce the male germ cells and the male hormones.",
                                   meaning=NCIT.C12412)
    Thalamus = PermissibleValue(text="Thalamus",
                                       description="An ovoid mass composed predominantly of gray substance and associated laminae of white substance. The thalamus is divided into anterior, medial, and lateral parts. The function of the thalamus is to relay sensory impulses and cerebellar and basal ganglia projections to the cerebral cortex. The thalamus is positioned within the posterior part of the diencephalon forming most of each lateral wall of the third ventricle.",
                                       meaning=NCIT.C12459)
    Thigh = PermissibleValue(text="Thigh",
                                 description="A part of the lower limb, located between hip and knee.",
                                 meaning=NCIT.C33763)
    Thorax = PermissibleValue(text="Thorax",
                                   description="The division of the body lying between the neck and the abdomen.",
                                   meaning=NCIT.C12799)
    Thyroid = PermissibleValue(text="Thyroid",
                                     description="An endocrine gland located at the base of the neck that produces and secretes thyroxine and other hormones. Thyroxine is important for metabolic control.",
                                     meaning=NCIT.C12400)
    Tibia = PermissibleValue(text="Tibia",
                                 description="A bone located between the femur and the tarsus, being part of the lower leg.",
                                 meaning=NCIT.C12800)
    Toe = PermissibleValue(text="Toe",
                             description="One of the terminal digits of the foot.",
                             meaning=NCIT.C33788)
    Tonsil = PermissibleValue(text="Tonsil",
                                   description="The two organs situated in the throat on either side of the narrow passage from the mouth to the pharynx. They are composed of lymphoid tissues.",
                                   meaning=NCIT.C12802)
    Trunk = PermissibleValue(text="Trunk",
                                 description="The body excluding the head and neck and limbs.",
                                 meaning=NCIT.C33816)
    Ulna = PermissibleValue(text="Ulna",
                               description="One of the bones that comprise the forearm. The largest aspect articulates with the humerus at the elbow joint and the smallest portion of the ulna articulates with the carpal bones in the wrist.",
                               meaning=NCIT.C12809)
    Ureter = PermissibleValue(text="Ureter",
                                   description="The thick-walled tube that carries urine from each kidney to the bladder.",
                                   meaning=NCIT.C12416)
    Uterus = PermissibleValue(text="Uterus",
                                   description="A hollow, thick-walled, muscular organ located within the pelvic cavity of a woman. Within the uterus the fertilized egg implants and the fetus develops during pregnancy.",
                                   meaning=NCIT.C12405)
    Vagina = PermissibleValue(text="Vagina",
                                   description="The female genital canal, extending from the uterus to the vulva.",
                                   meaning=NCIT.C12407)
    Viscera = PermissibleValue(text="Viscera",
                                     description="Two or more internal organs.",
                                     meaning=NCIT.C28287)
    Vulva = PermissibleValue(text="Vulva",
                                 description="The external, visible part of the female genitalia surrounding the urethral and vaginal opening. The vulva includes the clitoris and inner as well as outer labia.",
                                 meaning=NCIT.C12408)
    Wrist = PermissibleValue(text="Wrist",
                                 description="A joint between the distal end of the radius and the proximal row of carpal bones.",
                                 meaning=NCIT.C33894)
    Cranium = PermissibleValue(text="Cranium",
                                     description="The bones that form the head, made up of the bones of the braincase and face.",
                                     meaning=NCIT.C12789)
    Dermis = PermissibleValue(text="Dermis",
                                   description="The inner layer of the two main layers of the skin. The dermis has connective tissue, blood vessels, oil and sweat glands, nerves, hair follicles, and other structures. It is made up of a thin upper layer called the papillary dermis, and a thick lower layer called the reticular dermis.",
                                   meaning=NCIT.C12701)
    Hypodermis = PermissibleValue(text="Hypodermis",
                                           description="A tissue sample that contains the epidermis, dermis, and subcutaneous adipose tissue.",
                                           meaning=NCIT.C92441)
    Intraspinal = PermissibleValue(text="Intraspinal",
                                             description="Within the spine.",
                                             meaning=NCIT.C96908)
    Omentum = PermissibleValue(text="Omentum",
                                     description="A fold of peritoneum originating at the stomach and supporting the viscera.",
                                     meaning=NCIT.C33209)
    Metacarpals = PermissibleValue(text="Metacarpals",
                                             description="Any of the five bones between the wrist and the fingers that form the skeleton of the palm.",
                                             meaning=NCIT.C12751)
    Metatarsals = PermissibleValue(text="Metatarsals",
                                             description="A bone belonging to the middle part of the foot located between toes and ankle. There are 5 metatarsal bones and they are numbered from the medial side.",
                                             meaning=NCIT.C12752)
    Tarsals = PermissibleValue(text="Tarsals",
                                     description="Any one of the seven bones forming the instep of the foot.",
                                     meaning=NCIT.C12796)
    Thymus = PermissibleValue(text="Thymus",
                                   description="A bi-lobed organ surrounded by a connective tissue capsule. It is located in the upper anterior portion of the chest, behind the sternum. It is composed predominantly of lymphocytes and fewer epithelial cells. Connective tissue septa separate the lobes into lobules. The lobules contain an outer portion (cortical zone) which is rich in lymphocytes and an inner portion (medullary zone) which is rich in epithelial cells. It is an organ essential for the development of the immune system. Its function is the maturation of the progenitor lymphoid cells to thymocytes and subsequently to mature T-cells. It reaches its greatest weight at puberty and subsequently begins to involute.",
                                   meaning=NCIT.C12433)
    Trachea = PermissibleValue(text="Trachea",
                                     description="The fibrocartilaginous, mucous-lined tube passing from the larynx to the bronchi.",
                                     meaning=NCIT.C12428)

    _defn = EnumDefinition(
        name="SiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Basal Ganglia-Thalamus",
                PermissibleValue(text="Basal Ganglia-Thalamus",
                                 description="The gray matter that includes the basal ganglia and/or thalamus.",
                                 meaning=NCIT.C158080) )
        setattr(cls, "Cauda Equina Spinal Cord",
                PermissibleValue(text="Cauda Equina Spinal Cord",
                                 description="The collection of spinal nerve roots, arising from lumbar pairs two through five, sacral pairs one through five, and the coccygeal nerve, that branch off the conus medularis at the termination of the spinal cord, and float freely within the lumbar cistern before exiting the spinal column at the appropriate vertebra.",
                                 meaning=NCIT.C12689) )
        setattr(cls, "Cervical Spine",
                PermissibleValue(text="Cervical Spine",
                                 description="The set of vertebrae immediately caudal to the skull.",
                                 meaning=NCIT.C69313) )
        setattr(cls, "Fourth Ventricle",
                PermissibleValue(text="Fourth Ventricle",
                                 description="A diamond-shaped cavity filled with cerebrospinal fluid within the pons extending between the obex in the caudal medulla and the aqueduct of Sylvius in the cerebellum.",
                                 meaning=NCIT.C12828) )
        setattr(cls, "Frontal Lobe",
                PermissibleValue(text="Frontal Lobe",
                                 description="The part of the brain located anterior to the parietal lobes at the front of each cerebral hemisphere.",
                                 meaning=NCIT.C12352) )
        setattr(cls, "Lateral Ventricle",
                PermissibleValue(text="Lateral Ventricle",
                                 description="The rostral extensions of the ventricular system of the brain consisting of two cavities, one on each side of the brain within the central regions of each cerebral hemisphere. Cerebrospinal fluid flows from the lateral ventricles into the centrally third ventricle via the foramen of Monroe.",
                                 meaning=NCIT.C12834) )
        setattr(cls, "Lumbar Spinal Cord",
                PermissibleValue(text="Lumbar Spinal Cord",
                                 description="The segment of the spinal cord between the thoracic spinal cord and the sacral spinal cord.",
                                 meaning=NCIT.C12895) )
        setattr(cls, "Occipital Lobe",
                PermissibleValue(text="Occipital Lobe",
                                 description="One of the four regions of cortex in each cerebral hemisphere. It is located posterior to the temporal lobe and inferior to the parietal lobe.",
                                 meaning=NCIT.C12355) )
        setattr(cls, "Optic Chiasm",
                PermissibleValue(text="Optic Chiasm",
                                 description="An anatomic structure formed by the crossing of the two optic nerves under the hypothalamus.",
                                 meaning=NCIT.C90609) )
        setattr(cls, "Optic Nerve",
                PermissibleValue(text="Optic Nerve",
                                 description="A cranial nerve extending between the retina and optic chiasma, which innervates the eye.",
                                 meaning=NCIT.C12761) )
        setattr(cls, "Parietal Lobe",
                PermissibleValue(text="Parietal Lobe",
                                 description="One of the lobes of the cerebral hemisphere located superiorly to the occipital lobe and posteriorly to the frontal lobe. Cognition and visuospatial processing are its main functions.",
                                 meaning=NCIT.C12354) )
        setattr(cls, "Temporal Lobe",
                PermissibleValue(text="Temporal Lobe",
                                 description="One of the cerebral lobes. It is located inferior to the frontal and parietal lobes and anterior to the occipital lobe.",
                                 meaning=NCIT.C12353) )
        setattr(cls, "Third Ventricle",
                PermissibleValue(text="Third Ventricle",
                                 description="A centrally placed component of the ventricular system of the brain located in the diencephalon. Cerebrospinal fluid from the lateral ventricles flows into the third ventricle via the foramina of Monroe and exits the third ventricle via the aqueduct of Sylvius. The thalamus and hypothalamus border the lateral walls of the third ventricle.",
                                 meaning=NCIT.C12827) )
        setattr(cls, "Thoracic Spinal Cord",
                PermissibleValue(text="Thoracic Spinal Cord",
                                 description="The portion of the spinal cord located in the thoracic region.",
                                 meaning=NCIT.C12894) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Abdominal Wall",
                PermissibleValue(text="Abdominal Wall",
                                 description="The tissues that surround the organs that are present within the abdominal cavity. The abdominal wall tissue is composed of layers of fat, parietal peritoneum, fascia, and muscles.",
                                 meaning=NCIT.C28256) )
        setattr(cls, "Adrenal Gland",
                PermissibleValue(text="Adrenal Gland",
                                 description="A flattened, roughly triangular body resting upon the upper end of each kidney; it is one of the ductless glands furnishing internal secretions (epinephrine and norepinephrine from the medulla and steroid hormones from the cortex).",
                                 meaning=NCIT.C12666) )
        setattr(cls, "Anal/Perianal",
                PermissibleValue(text="Anal/Perianal",
                                 description="The lower opening of the digestive tract, lying in the cleft between the buttocks, through which fecal matter is extruded. | The skin around the anus",
                                 meaning=NCIT.C43362) )
        setattr(cls, "Ankle Joint",
                PermissibleValue(text="Ankle Joint",
                                 description="A gliding joint between the distal ends of the tibia and fibula and the proximal end of the talus.",
                                 meaning=NCIT.C32078) )
        setattr(cls, "Anterior Skull Base",
                PermissibleValue(text="Anterior Skull Base",
                                 description="The portion of the skull that is formed laterally by the orbital plates of the frontal bone, medially by the cribriform palate and crista galli of the ethmoid bone, and posteriorly by the planum sphenoidale and lesser wings of the sphenoid bone.",
                                 meaning=NCIT.C180372) )
        setattr(cls, "Ascitic Fluid",
                PermissibleValue(text="Ascitic Fluid",
                                 description="A biospecimen of ascitic fluid.",
                                 meaning=NCIT.C159203) )
        setattr(cls, "Axillary Nodes",
                PermissibleValue(text="Axillary Nodes",
                                 description="One of approximately 20-30 lymph nodes in chain formation that traverse the concavity of the underarm to the clavicle.",
                                 meaning=NCIT.C12904) )
        setattr(cls, "Bladder/Prostate",
                PermissibleValue(text="Bladder/Prostate",
                                 description="The walnut shaped accessory sex gland of the male reproductive system. It is located in the pelvis just below the bladder, surrounding the prostatic part of the urethra. The prostate gland secretes a fluid which is part of the semen.",
                                 meaning=NCIT.C12410) )
        setattr(cls, "Bone Face",
                PermissibleValue(text="Bone Face",
                                 description="Any bone that contributes to the facial structures, except those bones that are part of the braincase.",
                                 meaning=NCIT.C63706) )
        setattr(cls, "Bone Foot",
                PermissibleValue(text="Bone Foot",
                                 description="One of the seven tarsal, five metatarsal, or 14 phalangeal bones in the foot.",
                                 meaning=NCIT.C13068) )
        setattr(cls, "Bone Marrow",
                PermissibleValue(text="Bone Marrow",
                                 description="The tissue occupying the spaces of bone. It consists of blood vessel sinuses and a network of hematopoietic cells which give rise to the red cells, white cells, and megakaryocytes.",
                                 meaning=NCIT.C12431) )
        setattr(cls, "Bone or Bone Marrow",
                PermissibleValue(text="Bone or Bone Marrow",
                                 description="Connective tissue that forms the skeletal components of the body. | The tissue occupying the spaces of bone. It consiRMS of blood vessel sinuses and a network of hematopoietic cells which give rise to the red cells, white cells, and megakaryocytes.",
                                 meaning=NCIT.C12366) )
        setattr(cls, "Bone Shoulder Girdle",
                PermissibleValue(text="Bone Shoulder Girdle",
                                 description="The bony arch formed by the collarbones and shoulder blades.",
                                 meaning=NCIT.C33547) )
        setattr(cls, "Brain/Leptomeninges",
                PermissibleValue(text="Brain/Leptomeninges",
                                 description="An organ composed of grey and white matter containing billions of neurons that is the center for intelligence and reasoning. It is protected by the bony cranium. | The two innermost layers of tissue that cover the brain and spinal cord, the arachnoid mater and the pia mater.",
                                 meaning=NCIT.C12439) )
        setattr(cls, "Carpal Bone",
                PermissibleValue(text="Carpal Bone",
                                 description="Any of the small bones of the wrist joint, located between the radius and the ulna and the metacarpus.",
                                 meaning=NCIT.C12688) )
        setattr(cls, "Celiac Nodes",
                PermissibleValue(text="Celiac Nodes",
                                 description="A lymph node at the base of the celiac artery.",
                                 meaning=NCIT.C65166) )
        setattr(cls, "Central Nervous System",
                PermissibleValue(text="Central Nervous System",
                                 description="The part of the nervous system that consists of the brain, spinal cord, and meninges.",
                                 meaning=NCIT.C12438) )
        setattr(cls, "Cervical Nodes",
                PermissibleValue(text="Cervical Nodes",
                                 description="Any of the lymph nodes located in the neck.",
                                 meaning=NCIT.C32298) )
        setattr(cls, "Cervical Vertebra",
                PermissibleValue(text="Cervical Vertebra",
                                 description="Any one of the seven vertebrae that start with C1, connecting the skull to the spine, and ends with C7, which joins the cervical with the thoracic spine.",
                                 meaning=NCIT.C12415) )
        setattr(cls, "Chest Wall",
                PermissibleValue(text="Chest Wall",
                                 description="The total system of structures outside the lungs that move as a part of breathing; it includes all structures from the skin to the parietal pleura.",
                                 meaning=NCIT.C62484) )
        setattr(cls, "Cerebrospinal Fluid",
                PermissibleValue(text="Cerebrospinal Fluid",
                                 description="The fluid that is contained within the brain ventricles, the subarachnoid space and the central canal of the spinal cord.",
                                 meaning=NCIT.C12692) )
        setattr(cls, "Distant Lymph Nodes",
                PermissibleValue(text="Distant Lymph Nodes",
                                 description="A bean-shaped organ surrounded by a connective tissue capsule. It is part of the lymphatic system and is found throughout the body. It is composed predominantly of lymphocytes and its main function is immune protection.",
                                 meaning=NCIT.C160424) )
        setattr(cls, "Dorsal Spine",
                PermissibleValue(text="Dorsal Spine",
                                 description="A spinal curve that originates at the middle of the second thoracic vertebra and terminates at the middle of the last thoracic vertebra.",
                                 meaning=NCIT.C32472) )
        setattr(cls, "Dorsal Vertebra",
                PermissibleValue(text="Dorsal Vertebra",
                                 description="Any one of the seven vertebrae that start with C1, connecting the skull to the spine, and ends with C7, which joins the cervical with the thoracic spine.",
                                 meaning=NCIT.C12693) )
        setattr(cls, "Elbow Joint",
                PermissibleValue(text="Elbow Joint",
                                 description="A type of hinge joint located between the forearm and upper arm.",
                                 meaning=NCIT.C32497) )
        setattr(cls, "Epitrochlear Nodes",
                PermissibleValue(text="Epitrochlear Nodes",
                                 description="A lymph node located above and adjacent to the elbow.",
                                 meaning=NCIT.C98182) )
        setattr(cls, "Ethmoid Bone",
                PermissibleValue(text="Ethmoid Bone",
                                 description="A light and spongy bone that is cubical in shape. This bone is positioned at the anterior part of the cranium, sitting between the two orbits, at the roof of the nose. It consists of four parts: a horizontal or cribriform plate; a perpendicular plate; and two lateral masses or labyrinths.",
                                 meaning=NCIT.C12711) )
        setattr(cls, "Fallopian Tube",
                PermissibleValue(text="Fallopian Tube",
                                 description="One of a pair of tubes that extend from the uterus to each of the ovaries. Following ovulation the egg travels down the fallopian tube to the uterus where fertilization may or may not occur.",
                                 meaning=NCIT.C12403) )
        setattr(cls, "Female Reproductive System Part",
                PermissibleValue(text="Female Reproductive System Part",
                                 description="Any component of the female organs and tissues involved in the production and maturation of gametes and in their union and subsequent development as offspring.",
                                 meaning=NCIT.C13039) )
        setattr(cls, "Fibular Head",
                PermissibleValue(text="Fibular Head",
                                 description="The highest portion of the fibula that articulates with the patella.",
                                 meaning=NCIT.C32719) )
        setattr(cls, "Foot Joint",
                PermissibleValue(text="Foot Joint",
                                 description="The structure found below the ankle joint required for locomotion.",
                                 meaning=NCIT.C32623) )
        setattr(cls, "Foot Phalanges",
                PermissibleValue(text="Foot Phalanges",
                                 description="A bone of the foot.",
                                 meaning=NCIT.C52772) )
        setattr(cls, "Frontal Bone",
                PermissibleValue(text="Frontal Bone",
                                 description="A bone of the skull forming the forehead, root of the nose and the roof of both orbits.",
                                 meaning=NCIT.C32635) )
        setattr(cls, "Frontal Cortex",
                PermissibleValue(text="Frontal Cortex",
                                 description="The part of the brain located anterior to the parietal lobes at the front of each cerebral hemisphere.",
                                 meaning=NCIT.C12352) )
        setattr(cls, "Gastrointestinal Tract",
                PermissibleValue(text="Gastrointestinal Tract",
                                 description="The upper gastrointestinal (GI) tract is comprised of mouth, pharynx, esophagus and stomach while the lower GI tract consists of intestines and anus. The primary function of the GI tract is to ingest, digest, absorb and ultimately excrete food stuff.",
                                 meaning=NCIT.C34082) )
        setattr(cls, "Hand Bone",
                PermissibleValue(text="Hand Bone",
                                 description="A bone of the hand.",
                                 meaning=NCIT.C52771) )
        setattr(cls, "Hand Joint",
                PermissibleValue(text="Hand Joint",
                                 description="The hinge synovial joints between the phalanges of the fingers.",
                                 meaning=NCIT.C32868) )
        setattr(cls, "Hand Phalanges",
                PermissibleValue(text="Hand Phalanges",
                                 description="For oncology, an area of the body generally construed to comprise the base of skull and facial bones, sinuses, orbits, salivary glands, oral cavity, oropharynx, larynx, thyroid, facial and neck musculature and lymph nodes draining these areas.",
                                 meaning=NCIT.C12418) )
        setattr(cls, "Head and Neck",
                PermissibleValue(text="Head and Neck",
                                 description="For oncology, an area of the body generally construed to comprise the base of skull and facial bones, sinuses, orbits, salivary glands, oral cavity, oropharynx, larynx, thyroid, facial and neck musculature and lymph nodes draining these areas.",
                                 meaning=NCIT.C12418) )
        setattr(cls, "Hilar Nodes",
                PermissibleValue(text="Hilar Nodes",
                                 description="A lymph node located in the hilar region of the spleen.",
                                 meaning=NCIT.C33600) )
        setattr(cls, "Hip/Inguinal Region",
                PermissibleValue(text="Hip/Inguinal Region",
                                 description="The lateral prominence of the pelvis from the waist to the thigh. | The lower region of the anterior abdominal wall located laterally to the pubic region.",
                                 meaning=NCIT.C64193) )
        setattr(cls, "Iliac Crest",
                PermissibleValue(text="Iliac Crest",
                                 description="The broad, dorsal, upper, and widest of the three principal bones composing either half of the pelvis.",
                                 meaning=NCIT.C32765) )
        setattr(cls, "Inferior Limb",
                PermissibleValue(text="Inferior Limb",
                                 description="A bone of the leg (lower extremity).",
                                 meaning=NCIT.C12982) )
        setattr(cls, "Infraclavicular Lymph Node",
                PermissibleValue(text="Infraclavicular Lymph Node",
                                 description="A lymph node located in the area below the clavicle.",
                                 meaning=NCIT.C63705) )
        setattr(cls, "Inguinal Nodes",
                PermissibleValue(text="Inguinal Nodes",
                                 description="A superficial or deep lymph node located in the inguinal area.",
                                 meaning=NCIT.C32801) )
        setattr(cls, "Intra-abdominal",
                PermissibleValue(text="Intra-abdominal",
                                 description="The lower region of the anterior abdominal wall located laterally to the pubic region.",
                                 meaning=NCIT.C12726) )
        setattr(cls, "Knee Joint",
                PermissibleValue(text="Knee Joint",
                                 description="A joint connecting the lower part of the femur with the upper part of the tibia. The lower part of the femur and the upper part of the tibia are attached to each other by ligaments. Other structures of the knee joint include the upper part of the fibula, located below and parallel to the tibia, and the patella which moves as the knee bends.",
                                 meaning=NCIT.C32899) )
        setattr(cls, "Lacrimal Bone",
                PermissibleValue(text="Lacrimal Bone",
                                 description="A small rectangular thin plate forming part of the medial orbit wall. It is located posterior to the frontal process of the maxilla and articulates with the inferior nasal concha, ethmoid, frontal, and maxillary bones.",
                                 meaning=NCIT.C32906) )
        setattr(cls, "Liver/Biliary Tract",
                PermissibleValue(text="Liver/Biliary Tract",
                                 description="A triangular-shaped organ located under the diaphragm in the right hypochondrium. It is the largest internal organ of the body, weighting up to 2 kg. Metabolism and bile secretion are its main functions. It is composed of cells which have the ability to regenerate. | The system that transports bile from the hepatocytes in the liver to the small intestine. It is comprised of the intrahepatic bile ducts, hepatic ducts, common bile duct, cystic duct, and the gallbladder.",
                                 meaning=NCIT.C12392) )
        setattr(cls, "Lower Extremity",
                PermissibleValue(text="Lower Extremity",
                                 description="The limb that is composed of the hip, thigh, leg and foot.",
                                 meaning=NCIT.C12742) )
        setattr(cls, "Lower Limb",
                PermissibleValue(text="Lower Limb",
                                 description="The limb that is composed of the hip, thigh, leg and foot.",
                                 meaning=NCIT.C12742) )
        setattr(cls, "Lower Spine",
                PermissibleValue(text="Lower Spine",
                                 description="Those vertebrae between the ribs and the pelvis, L1-L5 in man.",
                                 meaning=NCIT.C69314) )
        setattr(cls, "Lumbar Vertebra",
                PermissibleValue(text="Lumbar Vertebra",
                                 description="One of the five bones situated between the thoracic vertebrae and the sacrum in the lower part of the spine.",
                                 meaning=NCIT.C45874) )
        setattr(cls, "Lymph Nodes",
                PermissibleValue(text="Lymph Nodes",
                                 description="A bean-shaped organ surrounded by a connective tissue capsule. It is part of the lymphatic system and is found throughout the body. It is composed predominantly of lymphocytes and its main function is immune protection.",
                                 meaning=NCIT.C12745) )
        setattr(cls, "Mesenteric Nodes",
                PermissibleValue(text="Mesenteric Nodes",
                                 description="A lymph node located in the mesentery.",
                                 meaning=NCIT.C77641) )
        setattr(cls, "Middle Ear",
                PermissibleValue(text="Middle Ear",
                                 description="The part of the ear including the eardrum and ossicles. The middle ear leads to the inner ear.",
                                 meaning=NCIT.C12274) )
        setattr(cls, "Nasal Bone",
                PermissibleValue(text="Nasal Bone",
                                 description="One of two small oblong bones placed side by side at the middle and upper part of the face.",
                                 meaning=NCIT.C33157) )
        setattr(cls, "Nasal Cavity",
                PermissibleValue(text="Nasal Cavity",
                                 description="The proximal portion of the respiratory passages on either side of the nasal septum lying between the floor of the cranium and the roof of the mouth and extending from the face to the pharynx. The nasal cavity is lined with ciliated mucosa, extending from the nares to the pharynx.",
                                 meaning=NCIT.C12424) )
        setattr(cls, "Nasal Cavity and Paranasal Sinuses",
                PermissibleValue(text="Nasal Cavity and Paranasal Sinuses",
                                 description="The proximal portion of the respiratory passages on either side of the nasal septum lying between the floor of the cranium and the roof of the mouth and extending from the face to the pharynx. The nasal cavity is lined with ciliated mucosa, extending from the nares to the pharynx. | Any one of the air-filled spaces within the ethmoid, frontal, maxillary, or sphenoid bones, which communicate with the nasal cavity.",
                                 meaning=NCIT.C12424) )
        setattr(cls, "Nasal Septum",
                PermissibleValue(text="Nasal Septum",
                                 description="The thin wall between the two nasal cavities.",
                                 meaning=NCIT.C33160) )
        setattr(cls, "Occipital Bone",
                PermissibleValue(text="Occipital Bone",
                                 description="The trapezoidal-shaped bone that forms the back and part of the base of the skull.",
                                 meaning=NCIT.C12757) )
        setattr(cls, "Occiptial Cortex",
                PermissibleValue(text="Occiptial Cortex",
                                 description="One of the four regions of cortex in each cerebral hemisphere. It is located posterior to the temporal lobe and inferior to the parietal lobe.",
                                 meaning=NCIT.C12355) )
        setattr(cls, "Omentum/Peritoneum",
                PermissibleValue(text="Omentum/Peritoneum",
                                 description="A fold of peritoneum originating at the stomach and supporting the viscera.",
                                 meaning=NCIT.C33209) )
        setattr(cls, "Oral Cavity",
                PermissibleValue(text="Oral Cavity",
                                 description="The cavity located at the upper end of the alimentary canal, behind the teeth and gums that is bounded on the outside by the lips, above by the hard and soft palates and below by the tongue.",
                                 meaning=NCIT.C12421) )
        setattr(cls, "Paraaortic Lymph Node",
                PermissibleValue(text="Paraaortic Lymph Node",
                                 description="A lymph node located adjacent to the lumbar region of the spine.",
                                 meaning=NCIT.C77643) )
        setattr(cls, "Paranasal Sinuses",
                PermissibleValue(text="Paranasal Sinuses",
                                 description="Any one of the air-filled spaces within the ethmoid, frontal, maxillary, or sphenoid bones, which communicate with the nasal cavity.",
                                 meaning=NCIT.C12763) )
        setattr(cls, "Parietal Bone",
                PermissibleValue(text="Parietal Bone",
                                 description="One of two cranial bones that by their union form the sides and roof of the skull.",
                                 meaning=NCIT.C12766) )
        setattr(cls, "Parietal Cortex",
                PermissibleValue(text="Parietal Cortex",
                                 description="One of the lobes of the cerebral hemisphere located superiorly to the occipital lobe and posteriorly to the frontal lobe. Cognition and visuospatial processing are its main functions.",
                                 meaning=NCIT.C12354) )
        setattr(cls, "Pectoral Nodes",
                PermissibleValue(text="Pectoral Nodes",
                                 description="An axillary lymph node located along the lower edge of the pectoralis minor.",
                                 meaning=NCIT.C120322) )
        setattr(cls, "Pleural Effusion",
                PermissibleValue(text="Pleural Effusion",
                                 description="Increased amounts of fluid within the pleural cavity. Symptoms include shortness of breath, cough, and chest pain. It is usually caused by lung infections, congestive heart failure, pleural and lung tumors, connective tissue disorders, and trauma.",
                                 meaning=NCIT.C3331) )
        setattr(cls, "Popliteal Nodes",
                PermissibleValue(text="Popliteal Nodes",
                                 description="Lymph node located within the fat layer of the knee joint.",
                                 meaning=NCIT.C53146) )
        setattr(cls, "Preauricular Lymph Node",
                PermissibleValue(text="Preauricular Lymph Node",
                                 description="A lymph node located anterior to the auricle of the ear. (NCI)",
                                 meaning=NCIT.C103429) )
        setattr(cls, "Radius Bone",
                PermissibleValue(text="Radius Bone",
                                 description="The long bone of the forearm that extends from the lateral aspect of the elbow to the thumb-side of the wrist.",
                                 meaning=NCIT.C12777) )
        setattr(cls, "Sacral Region",
                PermissibleValue(text="Sacral Region",
                                 description="The triangular bone, made up of 5 fused bones of the spine, located in the lower area of the spine between the fifth lumbar vertebra and the coccyx.",
                                 meaning=NCIT.C33508) )
        setattr(cls, "Salivary Gland",
                PermissibleValue(text="Salivary Gland",
                                 description="An exocrine gland that secretes saliva. Salivary glands are mostly located in and around the oral cavity.",
                                 meaning=NCIT.C12426) )
        setattr(cls, "Shoulder Girdle",
                PermissibleValue(text="Shoulder Girdle",
                                 description="The bony arch formed by the collarbones and shoulder blades.",
                                 meaning=NCIT.C33547) )
        setattr(cls, "Shoulder Joint",
                PermissibleValue(text="Shoulder Joint",
                                 description="A ball-and-socket joint at the upper end of the humerus, located at the junction of humerus and scapula.",
                                 meaning=NCIT.C33548) )
        setattr(cls, "Small Intestine",
                PermissibleValue(text="Small Intestine",
                                 description="The section of the intestines between the pylorus and cecum. The small intestine is approximately 20 feet long and consists of the duodenum, the jejunum, and the ileum. Its main function is to absorb nutrients from food as the food is transported to the large intestine.",
                                 meaning=NCIT.C12386) )
        setattr(cls, "Soft Tissue",
                PermissibleValue(text="Soft Tissue",
                                 description="A general term comprising tissue that is not hardened or calcified; including muscle, fat, blood vessels, nerves, tendons, ligaments and fascia.",
                                 meaning=NCIT.C12471) )
        setattr(cls, "Spheniod Bone",
                PermissibleValue(text="Spheniod Bone",
                                 description="The butterfly-shaped bone located at the base of the skull that helps to form the orbit of the eye.",
                                 meaning=NCIT.C12790) )
        setattr(cls, "Spinal Cord",
                PermissibleValue(text="Spinal Cord",
                                 description="The elongated, approximately cylindrical part of the central nervous system of vertebrates that lies in the vertebral canal and from which the spinal nerves emerge.",
                                 meaning=NCIT.C12464) )
        setattr(cls, "Splenic Hilar Nodes",
                PermissibleValue(text="Splenic Hilar Nodes",
                                 description="A lymph node located in the hilar region of the spleen.",
                                 meaning=NCIT.C33600) )
        setattr(cls, "Superior Maxilla",
                PermissibleValue(text="Superior Maxilla",
                                 description="The facial bone that forms the mediala floor of the orbit.",
                                 meaning=NCIT.C33682) )
        setattr(cls, "Supraclavicular Lymph Node",
                PermissibleValue(text="Supraclavicular Lymph Node",
                                 description="A lymph node which is located above the clavicle.",
                                 meaning=NCIT.C12903) )
        setattr(cls, "Suprasellar/Neurohypophyseal",
                PermissibleValue(text="Suprasellar/Neurohypophyseal",
                                 description="The area above or over the sella turcica.",
                                 meaning=NCIT.C42602) )
        setattr(cls, "Tarsal Bone",
                PermissibleValue(text="Tarsal Bone",
                                 description="Any one of the seven bones forming the instep of the foot.",
                                 meaning=NCIT.C12796) )
        setattr(cls, "Temporal Bone",
                PermissibleValue(text="Temporal Bone",
                                 description="A large irregular bone situated at the base and side of the skull, connected with the mandible via the temporomandibular joint. The temporal bone consists of the squamous, tympanic and petrous parts. The petrous portion of the temporal bone contains the vestibulocochlear organ of the inner ear.",
                                 meaning=NCIT.C12797) )
        setattr(cls, "Temporal Cortex",
                PermissibleValue(text="Temporal Cortex",
                                 description="One of the cerebral lobes. It is located inferior to the frontal and parietal lobes and anterior to the occipital lobe.",
                                 meaning=NCIT.C12353) )
        setattr(cls, "Thoracic Vertebra",
                PermissibleValue(text="Thoracic Vertebra",
                                 description="One of 12 vertebrae in the human vertebral column. The thoracic vertebrae are situated between the seventh cervical vertebra down to the first lumbar vertebra.",
                                 meaning=NCIT.C12798) )
        setattr(cls, "Upper Airway",
                PermissibleValue(text="Upper Airway",
                                 description="The sinuses and those parts of the respiratory system above the trachea. It includes the nares, nasopharynx, oropharynx, larynx, vocal cords, glottis and upper trachea.",
                                 meaning=NCIT.C33839) )
        setattr(cls, "Upper Arm",
                PermissibleValue(text="Upper Arm",
                                 description="The portion of the upper extremity between the shoulder and the elbow. For clinical purposes this term is also used to refer to the whole superior limb.",
                                 meaning=NCIT.C32141) )
        setattr(cls, "Upper Extremity",
                PermissibleValue(text="Upper Extremity",
                                 description="The region of the body that includes the arm, the forearm, and hand.",
                                 meaning=NCIT.C12671) )
        setattr(cls, "Upper Limb",
                PermissibleValue(text="Upper Limb",
                                 description="The region of the body that includes the arm, the forearm, and hand.",
                                 meaning=NCIT.C12671) )
        setattr(cls, "Waldeyer's Ring",
                PermissibleValue(text="Waldeyer's Ring",
                                 description="The ring of lymphoid tissue located in the pharynx, consisting of the pharyngeal, tubal, palatine, and lingual tonsils.",
                                 meaning=NCIT.C73468) )
        setattr(cls, "Wrist Joint",
                PermissibleValue(text="Wrist Joint",
                                 description="A joint between the distal end of the radius and the proximal row of carpal bones.",
                                 meaning=NCIT.C33895) )
        setattr(cls, "Zygomatic Bone",
                PermissibleValue(text="Zygomatic Bone",
                                 description="The union at the zygomaticotemporal suture of the temporal process of the zygomatic one and zygomatic process of the temporal bone.",
                                 meaning=NCIT.C33897) )
        setattr(cls, "Intra-Abdominal",
                PermissibleValue(text="Intra-Abdominal",
                                 description="The lower region of the anterior abdominal wall located laterally to the pubic region.",
                                 meaning=NCIT.C12726) )
        setattr(cls, "Lymph Node",
                PermissibleValue(text="Lymph Node",
                                 description="A bean-shaped organ surrounded by a connective tissue capsule. It is part of the lymphatic system and is found throughout the body. It is composed predominantly of lymphocytes and its main function is immune protection.",
                                 meaning=NCIT.C12745) )
        setattr(cls, "Sphenoid Bone",
                PermissibleValue(text="Sphenoid Bone",
                                 description="The butterfly-shaped bone located at the base of the skull that helps to form the orbit of the eye.",
                                 meaning=NCIT.C12790) )
        setattr(cls, "Adjacent Organ",
                PermissibleValue(text="Adjacent Organ",
                                 description="An organ that is next to an organ of interest.",
                                 meaning=NCIT.C180347) )
        setattr(cls, "Chest wall",
                PermissibleValue(text="Chest wall",
                                 description="The total system of structures outside the lungs that move as a part of breathing; it includes all structures from the skin to the parietal pleura.",
                                 meaning=NCIT.C62484) )
        setattr(cls, "Hip/Inguinal region",
                PermissibleValue(text="Hip/Inguinal region",
                                 description="The lateral prominence of the pelvis from the waist to the thigh.",
                                 meaning=NCIT.C64193) )
        setattr(cls, "Vasculo-Nervous",
                PermissibleValue(text="Vasculo-Nervous",
                                 description="A body structure consisting of nerves traveling together with arteries, veins, and/or lymphatics.",
                                 meaning=NCIT.C74603) )
        setattr(cls, "Infraclavicular Nodes",
                PermissibleValue(text="Infraclavicular Nodes",
                                 description="A lymph node located in the area below the clavicle.",
                                 meaning=NCIT.C63705) )
        setattr(cls, "Inguinal or Femoral Nodes",
                PermissibleValue(text="Inguinal or Femoral Nodes",
                                 description="A superficial or deep lymph node located in the inguinal area.",
                                 meaning=NCIT.C32801) )
        setattr(cls, "Paraaortic Lymph Nodes",
                PermissibleValue(text="Paraaortic Lymph Nodes",
                                 description="A lymph node located adjacent to the lumbar region of the spine.",
                                 meaning=NCIT.C77643) )
        setattr(cls, "Preauricular Nodes",
                PermissibleValue(text="Preauricular Nodes",
                                 description="A lymph node located anterior to the auricle of the ear.",
                                 meaning=NCIT.C103429) )
        setattr(cls, "Supraclavicular Nodes",
                PermissibleValue(text="Supraclavicular Nodes",
                                 description="A lymph node which is located above the clavicle.",
                                 meaning=NCIT.C12903) )
        setattr(cls, "Soft Tissue, NOS",
                PermissibleValue(text="Soft Tissue, NOS",
                                 description="A general term comprising tissue that is not hardened or calcified; including muscle, fat, blood vessels, nerves, tendons, ligaments and fascia. This value should be used if the specific type of soft tissue is not specified.",
                                 meaning=NCIT.C12471) )
        setattr(cls, "Facial Region",
                PermissibleValue(text="Facial Region",
                                 description="The anterior portion of the head extending from the forehead to the chin and ear to ear. The facial structures contain the eyes, nose and mouth, cheeks and jaws.",
                                 meaning=NCIT.C13071) )
        setattr(cls, "Foot Bone",
                PermissibleValue(text="Foot Bone",
                                 description="The structure found below the ankle joint required for locomotion.",
                                 meaning=NCIT.C32622) )
        setattr(cls, "Lumbar Spine",
                PermissibleValue(text="Lumbar Spine",
                                 description="Those vertebrae between the ribs and the pelvis, L1-L5 in man.",
                                 meaning=NCIT.C69314) )
        setattr(cls, "Lymphatic Basin",
                PermissibleValue(text="Lymphatic Basin",
                                 description="A regional collection of lymph nodes that drains lymph from a specific area of the body.",
                                 meaning=NCIT.C94547) )
        setattr(cls, "Paranasal Sinus",
                PermissibleValue(text="Paranasal Sinus",
                                 description="Any one of the air-filled spaces within the ethmoid, frontal, maxillary, or sphenoid bones, which communicate with the nasal cavity.",
                                 meaning=NCIT.C12763) )

class AssessmentReasonEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AssessmentReasonEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TissueTypeEnum(EnumDefinitionImpl):

    Bone = PermissibleValue(text="Bone",
                               description="Connective tissue that forms the skeletal components of the body.",
                               meaning=NCIT.C12366)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TissueTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Soft Tissue",
                PermissibleValue(text="Soft Tissue",
                                 description="A general term comprising tissue that is not hardened or calcified; including muscle, fat, blood vessels, nerves, tendons, ligaments and fascia.",
                                 meaning=NCIT.C12471) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ClassificationStatusEnum(EnumDefinitionImpl):

    Present = PermissibleValue(text="Present",
                                     description="Being or existing in a specified place or at the specified time.",
                                     meaning=NCIT.C25626)
    Absent = PermissibleValue(text="Absent",
                                   description="Indicates a task, process or examination that has been performed and completed.",
                                   meaning=NCIT.C48190)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ClassificationStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Evaluated",
                PermissibleValue(text="Not Evaluated",
                                 description="Not all target lesions were assessed. Or not all non-target lesions were assessed.",
                                 meaning=NCIT.C103424) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Not evaluated",
                PermissibleValue(text="Not evaluated",
                                 description="Indicates a task, process or examination that has either not been initiated or not been completed.",
                                 meaning=NCIT.C49484) )

class MultiplicityEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MultiplicityEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TumorSizeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorSizeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "<0.5 cm",
                PermissibleValue(text="<0.5 cm",
                                 description="The size of the tumor is less than 0.5 centimeters.") )
        setattr(cls, "0.5-1 cm",
                PermissibleValue(text="0.5-1 cm",
                                 description="The size of the tumor is between 0.5 and 1 centimeters.") )
        setattr(cls, "1-5 cm",
                PermissibleValue(text="1-5 cm",
                                 description="The size of the tumor is between 1 and 5 centimeters.") )
        setattr(cls, ">5 cm",
                PermissibleValue(text=">5 cm",
                                 description="The size of the tumor is greater than 5 centimeters.") )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TumorVolumeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorVolumeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "<200 mL",
                PermissibleValue(text="<200 mL",
                                 description="A finding of a tumor volume that is less than 200 milliters.",
                                 meaning=NCIT.C175000) )
        setattr(cls, ">=200 mL",
                PermissibleValue(text=">=200 mL",
                                 description="A finding of a tumor volume that is equal to or greater than 200 milliters.",
                                 meaning=NCIT.C175001) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SiteWithinBoneEnum(EnumDefinitionImpl):

    Distal = PermissibleValue(text="Distal",
                                   description="Situated farthest from a point of attachment or origin, as of a limb or bone; or directed away from the midline of the body.",
                                   meaning=NCIT.C25237)
    Proximal = PermissibleValue(text="Proximal",
                                       description="Situated nearest to a point of attachment or origin.",
                                       meaning=NCIT.C25236)
    Epiphysis = PermissibleValue(text="Epiphysis",
                                         description="The shaft of a long bone, located between the two epiphyses; it is cylindrical in shape, with walls of compact bone enclosing a central marrow cavity.",
                                         meaning=NCIT.C32460)
    Metaphysis = PermissibleValue(text="Metaphysis",
                                           description="An area of a long bone located at the junction of the diaphysis and epiphysis, which harbors the epiphyseal plate in immature bones.",
                                           meaning=NCIT.C52723)
    Diaphysis = PermissibleValue(text="Diaphysis",
                                         description="The round end of the long bones.",
                                         meaning=NCIT.C32529)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SiteWithinBoneEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NodalSiteEnum(EnumDefinitionImpl):

    Cervix = PermissibleValue(text="Cervix",
                                   description="The lower part of the uterus occupying the region between the isthmus of the uterus and the vagina. It is divided into supravaginal and vaginal portions.",
                                   meaning=NCIT.C12311)
    Mediastinum = PermissibleValue(text="Mediastinum",
                                             description="A group of organs surrounded by loose connective tissue, separating the two pleural sacs, between the sternum anteriorly and the vertebral column posteriorly as well as from the thoracic inlet superiorly to the diaphragm inferiorly. The mediastinum contains the heart and pericardium, the bases of the great vessels, the trachea and bronchi, esophagus, thymus, lymph nodes, thoracic duct, phrenic and vagus nerves, and other structures and tissues.",
                                             meaning=NCIT.C12748)
    Omentum = PermissibleValue(text="Omentum",
                                     description="A fold of peritoneum originating at the stomach and supporting the viscera.",
                                     meaning=NCIT.C33209)
    Pelvis = PermissibleValue(text="Pelvis",
                                   description="The bony, basin-shaped structure formed by the hipbones and the base of the backbone supporting the lower limbs in humans.",
                                   meaning=NCIT.C12767)
    Retroperitoneum = PermissibleValue(text="Retroperitoneum",
                                                     description="The back of the abdomen where the kidneys lie and the great blood vessels run.",
                                                     meaning=NCIT.C12298)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NodalSiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ExtensionTumorTypeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ExtensionTumorTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class EExtensionSiteEnum(EnumDefinitionImpl):

    Heart = PermissibleValue(text="Heart",
                                 description="A hollow organ located slightly to the left of the middle portion of the chest. It is composed of muscle and it is divided by a septum into two sides: the right side which receives de-oxygenated blood from the body and the left side which sends newly oxygenated blood to the body. Each side is composed of two chambers: the atrium (receiving blood) and ventricle (ejecting blood).",
                                 meaning=NCIT.C12727)
    Lungs = PermissibleValue(text="Lungs",
                                 description="One of a pair of viscera occupying the pulmonary cavities of the thorax, the organs of respiration in which aeration of the blood takes place. As a rule, the right lung is slightly larger than the left and is divided into three lobes (an upper, a middle, and a lower or basal), while the left has two lobes (an upper and a lower or basal). Each lung is irregularly conical in shape, presenting a blunt upper extremity (the apex), a concave base following the curve of the diaphragm, an outer convex surface (costal surface), an inner or mediastinal surface (mediastinal surface), a thin and sharp anterior border, and a thick and rounded posterior border.",
                                 meaning=NCIT.C12468)
    Bone = PermissibleValue(text="Bone",
                               description="Connective tissue that forms the skeletal components of the body.",
                               meaning=NCIT.C12366)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="EExtensionSiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Chest Wall",
                PermissibleValue(text="Chest Wall",
                                 description="The total system of structures outside the lungs that move as a part of breathing; it includes all structures from the skin to the parietal pleura.",
                                 meaning=NCIT.C62484) )
        setattr(cls, "Soft Tissue",
                PermissibleValue(text="Soft Tissue",
                                 description="A general term comprising tissue that is not hardened or calcified; including muscle, fat, blood vessels, nerves, tendons, ligaments and fascia.",
                                 meaning=NCIT.C12471) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class DiamTypeEnum(EnumDefinitionImpl):

    Transverse = PermissibleValue(text="Transverse",
                                           description="A measure of the transaxial dimension of the tumor.",
                                           meaning=NCIT.C182199)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="DiamTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Cranial-Caudal",
                PermissibleValue(text="Cranial-Caudal",
                                 description="A measure of the craniocaudal dimension of the tumor.",
                                 meaning=NCIT.C182395) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class EffusionTypeEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="EffusionTypeEnum",
    )

class ResponseEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="ResponseEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Complete Response",
                PermissibleValue(text="Complete Response",
                                 description="The disappearance of all signs of cancer in response to treatment.",
                                 meaning=NCIT.C4870) )
        setattr(cls, "Complete Response Unconfirmed",
                PermissibleValue(text="Complete Response Unconfirmed",
                                 description="An indication that a finding of complete response to treatment has not been confirmed.",
                                 meaning=NCIT.C165198) )
        setattr(cls, "Partial Response",
                PermissibleValue(text="Partial Response",
                                 description="A finding indicating that there is a decrease in the size and the extent of tissue involvement by a malignant tumor in a patient.",
                                 meaning=NCIT.C18058) )
        setattr(cls, "Stable Disease",
                PermissibleValue(text="Stable Disease",
                                 description="Cancer that is neither decreasing nor increasing in extent or severity.",
                                 meaning=NCIT.C18213) )
        setattr(cls, "Progressive Disease",
                PermissibleValue(text="Progressive Disease",
                                 description="A clinical, pathologic, and/or molecular finding indicating that the course of a disease is worsening in terms of extent or severity.",
                                 meaning=NCIT.C35571) )

class TumorTypeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C28554) )

class DepthEnum(EnumDefinitionImpl):

    Superficial = PermissibleValue(text="Superficial",
                                             description="Of little substance or significance; involving only a surface.",
                                             meaning=NCIT.C25239)
    Deep = PermissibleValue(text="Deep",
                               description="Extending relatively far inward.",
                               meaning=NCIT.C25240)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Surface = PermissibleValue(text="Surface",
                                     description="The extended two-dimensional outer boundary of a three-dimensional object.",
                                     meaning=NCIT.C25245)
    Cortical = PermissibleValue(text="Cortical",
                                       description="The dense or compact outer layer of tissue that covers the bone.",
                                       meaning=NCIT.C52714)

    _defn = EnumDefinition(
        name="DepthEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Intra-Medullary",
                PermissibleValue(text="Intra-Medullary",
                                 description="Occurring in, or located within the spinal cord or the marrow space of a bone.",
                                 meaning=NCIT.C96266) )

class SkipMetInvolvementEnum(EnumDefinitionImpl):

    Single = PermissibleValue(text="Single",
                                   description="One metastatic area.",
                                   meaning=NCIT.C180356)
    Multiple = PermissibleValue(text="Multiple",
                                       description="More than one metastatic area.",
                                       meaning=NCIT.C180354)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SkipMetInvolvementEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MassiveChoroidalExtensionEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="MassiveChoroidalExtensionEnum",
    )

class TumorFromFoveaEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorFromFoveaEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TumorFromOpticNerveEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TumorFromOpticNerveEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class FluidFromTumorEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="FluidFromTumorEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SeedsPatternEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SeedsPatternEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SeedsStatusEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SeedsStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SeedsClassificationEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SeedsClassificationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class InvasivenessEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="InvasivenessEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NodalDeterminationEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NodalDeterminationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NodalDeterminationSourceEnum(EnumDefinitionImpl):

    Pathological = PermissibleValue(text="Pathological",
                                               description="The medical science, and specialty practice, concerned with all aspects of disease, but with special reference to the essential nature, causes, and development of abnormal conditions, as well as the structural and functional changes that result from the disease processes.")
    Clinical = PermissibleValue(text="Clinical",
                                       description="Relating to the examination and treatment of patients dependent on direct observation. The term may also refer to the institution (clinic) providing this activity.")
    NOS = PermissibleValue(text="NOS",
                             description="Not otherwise specified")
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.")

    _defn = EnumDefinition(
        name="NodalDeterminationSourceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.") )

class AnaplasiaTypeEnum(EnumDefinitionImpl):

    Diffuse = PermissibleValue(text="Diffuse",
                                     description="Widely spread; not localized or confined.",
                                     meaning=NCIT.C14175)
    Focal = PermissibleValue(text="Focal",
                                 description="Limited to a specific area.",
                                 meaning=NCIT.C28224)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AnaplasiaTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class StageSystemEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    EVANS = PermissibleValue(text="EVANS",
                                 description="A staging system for neuroblastoma proposed by Evans, based on both the site of origin and the clinical behavior of the tumor.",
                                 meaning=NCIT.C85407)
    FIGO = PermissibleValue(text="FIGO",
                               description="A set of staging terms for carcinoma developed by the International Federation of Gynecology and Obstetrics (FIGO).",
                               meaning=NCIT.C125738)
    INRGSS = PermissibleValue(text="INRGSS",
                                   description="A clinical staging system for neuroblastoma based on preoperative imaging and determined prior to any treatment, including surgery. It includes two stages of localized disease (L1 and L2) and two stages of metastatic disease (M and MS).",
                                   meaning=NCIT.C133427)
    INSS = PermissibleValue(text="INSS",
                               description="A surgicopathological staging system for neuroblastoma, based on the Evans staging system.",
                               meaning=NCIT.C85416)
    AJCC = PermissibleValue(text="AJCC",
                               description="A group formed for the purpose of developing a system of clinical staging for cancer that is acceptable to the American medical profession and is compatible with other accepted classifications.",
                               meaning=NCIT.C39315)

    _defn = EnumDefinition(
        name="StageSystemEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "AIDS-Related Kaposi Sarcoma Stage",
                PermissibleValue(text="AIDS-Related Kaposi Sarcoma Stage",
                                 description="A term that refers to the staging of AIDS-related Kaposi sarcoma according to the AIDS Clinical Trials Group system. The latter incorporates the extent of tumor (T), the status of the immune system (I), as measured by the number of CD4 cells present in the blood, and the extent of involvement within the body or systemic illness (S). Under each major heading, there are 2 subgroups: either a 0 (good risk) or a 1 (poor risk) group. (American Cancer Society)",
                                 meaning=NCIT.C134969) )
        setattr(cls, "AJCC v6 Stage",
                PermissibleValue(text="AJCC v6 Stage",
                                 description="A cancer stage defined according to the AJCC 6th edition criteria.",
                                 meaning=NCIT.C90529) )
        setattr(cls, "AJCC v7 Stage",
                PermissibleValue(text="AJCC v7 Stage",
                                 description="A cancer stage defined according to the AJCC 7th edition criteria.",
                                 meaning=NCIT.C90530) )
        setattr(cls, "AJCC v8 Stage",
                PermissibleValue(text="AJCC v8 Stage",
                                 description="A cancer stage defined according to the AJCC 8th edition criteria.",
                                 meaning=NCIT.C132248) )
        setattr(cls, "Ann Arbor",
                PermissibleValue(text="Ann Arbor",
                                 description="A lymphoma anatomic stage defined according to the Ann Arbor classification criteria.",
                                 meaning=NCIT.C141138) )
        setattr(cls, "Children's Oncology Group Liver Tumor Staging System",
                PermissibleValue(text="Children's Oncology Group Liver Tumor Staging System",
                                 description="A staging system developed by Children's Oncology Group (COG) that categorizes liver tumors based on the size and extent of the tumor.",
                                 meaning=NCIT.C177630) )
        setattr(cls, "Children's Oncology Group Neuroblastoma Risk Group Staging System",
                PermissibleValue(text="Children's Oncology Group Neuroblastoma Risk Group Staging System",
                                 description="A staging system that categorizes treatment intensity for patients with neuroblastoma on the basis of risk (prognostic) factors defined by Children's Oncology Group (COG).",
                                 meaning=NCIT.C177631) )
        setattr(cls, "Children's Oncology Group Renal Cancer Staging System",
                PermissibleValue(text="Children's Oncology Group Renal Cancer Staging System",
                                 description="A staging system developed by Children's Oncology Group (COG) that categorizes renal tumors, often Wilms tumor, based on the size and extent of the tumor.",
                                 meaning=NCIT.C177632) )
        setattr(cls, "Children's Oncology Group Retinoblastoma Risk Group Staging System",
                PermissibleValue(text="Children's Oncology Group Retinoblastoma Risk Group Staging System",
                                 description="A staging system that categorizes treatment intensity for patients with retinoblastoma on the basis of risk (prognostic) factors defined by Children's Oncology Group (COG).",
                                 meaning=NCIT.C177633) )
        setattr(cls, "Children's Oncology Group",
                PermissibleValue(text="Children's Oncology Group",
                                 description="An NCI-supported clinical cooperative group formed by the merger of the four national pediatric cancer research organizations: the Children's Cancer Group, the Intergroup Rhabdomyosarcoma Study Group, the National Wilms Tumor Study Group, and the Pediatric Oncology Group. The primary objective of the organization is to conduct clinical trials of new therapies for childhood and adolescent cancer. COG develops and coordinates clinical trials conducted at the 238 member institutions that include cancer centers of all major universities and teaching hospitals throughout the U.S. and Canada, as well as sites in Europe and Australia. COG members include over 5000 cancer researchers.",
                                 meaning=NCIT.C39353) )
        setattr(cls, "Childrens Oncology Group/National Wilms Tumor Study Group Staging System",
                PermissibleValue(text="Childrens Oncology Group/National Wilms Tumor Study Group Staging System",
                                 description="A staging system for Wilms' Tumor that is based on the postoperative, pre-chemotherapy pathological features and findings relating to the extent of tumor spread.",
                                 meaning=NCIT.C140271) )
        setattr(cls, "Enneking Staging System",
                PermissibleValue(text="Enneking Staging System",
                                 description="A staging system for malignant mesenchymal tumors that takes into account the surgical grade, local extent, and presence or absence of metastasis.",
                                 meaning=NCIT.C140258) )
        setattr(cls, "Intergroup Rhabdomyosarcoma Study Group Clinical Staging and Grouping System",
                PermissibleValue(text="Intergroup Rhabdomyosarcoma Study Group Clinical Staging and Grouping System",
                                 description="Staging and grouping for rhabdomyosarcoma that groups patients into low, intermediate, or high clinical risk groups based on: histologic type, tumor site, tumor size, and pathologic TNM. Note: this is not the TNM system described in AJCC.",
                                 meaning=NCIT.C148010) )
        setattr(cls, "International Society of Pediatric Oncology Staging System",
                PermissibleValue(text="International Society of Pediatric Oncology Staging System",
                                 description="A staging system for Wilms' Tumor that is based on the extent of tumor spread at surgery, after the patient has received neo-adjuvant chemotherapy.",
                                 meaning=NCIT.C140270) )
        setattr(cls, "Lugano Stage",
                PermissibleValue(text="Lugano Stage",
                                 description="An adult non-Hodgkin lymphoma and adult and childhood Hodgkin lymphoma stage defined according to the Lugano classification criteria.",
                                 meaning=NCIT.C141147) )
        setattr(cls, "Pediatric Oncology Group Neuroblastoma Staging System",
                PermissibleValue(text="Pediatric Oncology Group Neuroblastoma Staging System",
                                 description="A clinicopathological staging system for neuroblastoma, which places emphasis on the presence or absence of regional lymph node involvement by tumor.",
                                 meaning=NCIT.C85423) )
        setattr(cls, "PRETEXT Staging System",
                PermissibleValue(text="PRETEXT Staging System",
                                 description="A staging system designed by the International Childhood Liver Tumor Strategy Group (SIOPEL) for staging and risk stratification of liver tumors. A PRETEXT stage number is based on the number of contiguous liver sections not involved by tumor, corresponding to a rough estimate of the difficulty of the expected surgical procedure. It is used to describe tumor extent before any therapy, thus allowing more effective comparison between studies conducted by different groups.",
                                 meaning=NCIT.C141133) )
        setattr(cls, "Reese-Ellsworth Staging System",
                PermissibleValue(text="Reese-Ellsworth Staging System",
                                 description="A staging system for intraocular retinoblastoma that was developed in the 1960s, when children were treated with external beam radiation therapy. This system can help determine the likelihood of preserving the vision while the tumor is being treated. It is divided into 5 stages, and each stage predicts the potential to save the eye with external beam radiation therapy. Today, radiation therapy is reserved as a last resort to save a second eye, when all other treatments have failed. As a result, the Reese-Ellsworth classification is now rarely used.",
                                 meaning=NCIT.C123333) )
        setattr(cls, "St. Jude Stage",
                PermissibleValue(text="St. Jude Stage",
                                 description="A stage defined according to St. Jude Children's Research Hospital staging system for childhood non-Hodgkin lymphoma.",
                                 meaning=NCIT.C141216) )
        setattr(cls, "TNM Staging System",
                PermissibleValue(text="TNM Staging System",
                                 description="A system for clinicopathologic evaluation of tumors based on the extent of tumor involvement at the primary site (T, followed by a number indicating size and depth of invasion), and lymph node involvement (N) and metastasis (M) each followed by a number starting at 0 for no evident metastasis; numbers used depend on the organ involved and influence the prognosis and choice of treatment.",
                                 meaning=NCIT.C25384) )

class StageEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="StageEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Modified Chang Staging, M0",
                PermissibleValue(text="Modified Chang Staging, M0",
                                 description="A distant metastasis TNM finding indicating that there is no evidence of distant metastasis.",
                                 meaning=NCIT.C48699) )
        setattr(cls, "Modified Chang Staging, M0 / M1",
                PermissibleValue(text="Modified Chang Staging, M0 / M1",
                                 description="Patients who don't have Cytology evaluation at staging but have no evidence of disease radiologically") )
        setattr(cls, "Modified Chang Staging, M1",
                PermissibleValue(text="Modified Chang Staging, M1",
                                 description="A clinical and/or pathologic distant metastasis TNM finding indicating the spread of cancer to distant anatomic sites.",
                                 meaning=NCIT.C48700) )
        setattr(cls, "Modified Chang Staging, M+",
                PermissibleValue(text="Modified Chang Staging, M+",
                                 description="Encompasses M1-M4 of Modified Chang Staging for instances where further details are not available") )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "INSS, Stage 1",
                PermissibleValue(text="INSS, Stage 1",
                                 description="Localized tumor with complete gross excision, with or without microscopic residual disease; representative ipsilateral lymph nodes negative for tumor microscopically (i.e., nodes attached to and removed with the primary tumor may be positive).") )
        setattr(cls, "INSS, Stage 2A",
                PermissibleValue(text="INSS, Stage 2A",
                                 description="Localized tumor with incomplete gross excision; representative ipsilateral nonadherent lymph nodes negative for tumor microscopically.") )
        setattr(cls, "INSS, Stage 2B",
                PermissibleValue(text="INSS, Stage 2B",
                                 description="Localized tumor with or without complete gross excision, with ipsilateral nonadherent lymph nodes positive for tumor. Enlarged contralateral lymph nodes must be negative microscopically.") )
        setattr(cls, "INSS, Stage 3",
                PermissibleValue(text="INSS, Stage 3",
                                 description="Unresectable unilateral tumor infiltrating across the midline, with or without regional lymph node involvement; or localized unilateral tumor with contralateral regional lymph node involvement; or midline tumor with bilateral extension by infiltration (unresectable) or by lymph node involvement. The midline is defined as the vertebral column. Tumors originating on one side and crossing the midline must infiltrate to or beyond the opposite side of the vertebral column.") )
        setattr(cls, "INSS, Stage 4",
                PermissibleValue(text="INSS, Stage 4",
                                 description="Any primary tumor with dissemination to distant lymph nodes, bone, bone marrow, liver, skin, and/or other organs, except as defined for stage 4S.") )
        setattr(cls, "INSS, Stage 4S",
                PermissibleValue(text="INSS, Stage 4S",
                                 description="Localized primary tumor, as defined for stage 1, 2A, or 2B, with dissemination limited to skin, liver, and/or bone marrow (by definition limited to infants younger than 12 months). Marrow involvement should be minimal (i.e., <10% of total nucleated cells identified as malignant by bone biopsy or by bone marrow aspirate). More extensive bone marrow involvement would be considered stage 4 disease. The results of the MIBG scan, if performed, should be negative for disease in the bone marrow.") )
        setattr(cls, "FIGO, Stage 1",
                PermissibleValue(text="FIGO, Stage 1",
                                 description="A FIGO stage term that applies to gynecologic cancers. For cervical cancer, it refers to invasive cancer that is confined to the cervix; for endometrial cancer, it refers to cancer confined to the corpus uteri with no or less than one-half myometrial invasion (IA) or invasion of one-half or more of the myometrium (IB).",
                                 meaning=NCIT.C96244) )
        setattr(cls, "FIGO, Stage 2",
                PermissibleValue(text="FIGO, Stage 2",
                                 description="A FIGO stage term that applies to gynecologic cancers. For cervical cancer, it refers to cancer that invades beyond the cervix, but not to the pelvic wall or lower third of the vagina; for endometrial cancer, it refers to cancer that invades the stromal connective tissue of the cervix, but it does not extend beyond the uterus.",
                                 meaning=NCIT.C96252) )
        setattr(cls, "FIGO, Stage 3",
                PermissibleValue(text="FIGO, Stage 3",
                                 description="A FIGO stage term that applies to gynecologic cancers. For cervical cancer, it refers to cancer that extends to the pelvic wall, and/or involves the lower third of vagina, and/or causes hydronephrosis or non-functioning kidney; for endometrial cancer, FIGO stage III is subdivided into stages IIIA and IIIB; in FIGO stage IIIA, there is involvement of the serosa and/or the adnexa; for FIGO stage IIIB, there is vaginal or parametrial involvement.",
                                 meaning=NCIT.C96255) )
        setattr(cls, "FIGO, Stage 4",
                PermissibleValue(text="FIGO, Stage 4",
                                 description="A FIGO stage term that applies to gynecologic cancers. For cervical cancer, it refers to cancer that invades the mucosa of bladder or rectum, and/or extends beyond the true pelvis (FIGO stage IVA), or to cancer with distant metastases (FIGO stage IVB); for endometrial cancer, it refers to cancer that invades the bladder mucosa and/or the bowel mucosa (FIGO stage IVA), or to cancer with distant metastases (FIGO stage IVB).",
                                 meaning=NCIT.C96261) )
        setattr(cls, "COG, Stage 1",
                PermissibleValue(text="COG, Stage 1",
                                 description="Invasive cancer confined to the original anatomic site of growth without lymph node involvement.",
                                 meaning=NCIT.C27966) )
        setattr(cls, "COG, Stage 2",
                PermissibleValue(text="COG, Stage 2",
                                 description="Invasive cancer more extensive than stage I, usually involving local lymph nodes without spread to distant anatomic sites.",
                                 meaning=NCIT.C28054) )
        setattr(cls, "COG, Stage 3",
                PermissibleValue(text="COG, Stage 3",
                                 description="Locally advanced cancer that has spread to nearby organs but not to distant anatomic sites.",
                                 meaning=NCIT.C27970) )
        setattr(cls, "COG, Stage 4",
                PermissibleValue(text="COG, Stage 4",
                                 description="Cancer that has spread to distant anatomic sites beyond its original site of growth.",
                                 meaning=NCIT.C27971) )
        setattr(cls, "AJCC, Stage 0",
                PermissibleValue(text="AJCC, Stage 0",
                                 description="Stage 0 includes: pTis, N0, M0, S0. pTis: Intratubular germ cell neoplasia (carcinoma in situ). N0: regional lymph node metastasis. M0: No distant metastasis. S0: Marker study levels within normal limits. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C4523) )
        setattr(cls, "AJCC, Stage 1",
                PermissibleValue(text="AJCC, Stage 1",
                                 description="Stage I includes: pT1-4, N0, M0, SX. pT1: Tumor limited to the testis and epididymis without vascular/lymphatic invasion; tumor may invade into the tunica albuginea but not the tunica vaginalis. pT2: Tumor limited to the testis and epididymis with vascular/lymphatic invasion, or tumor extending through the tunica albuginea with involvement of the tunica vaginalis. pT3: Tumor invades the spermatic cord with or without vascular/lymphatic invasion. pT4: Tumor invades the scrotum with or without vascular/lymphatic invasion. N0: No regional lymph node metastasis. M0: No distant metastasis. SX: Marker studies not available or not performed. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C7901) )
        setattr(cls, "AJCC, Stage 1A",
                PermissibleValue(text="AJCC, Stage 1A",
                                 description="Stage IA includes: pT1, N0, M0, S0. pT1: Tumor limited to the testis and epididymis without vascular/lymphatic invasion; tumor may invade into the tunica albuginea but not the tunica vaginalis. N0: No regional lymph node metastasis. M0: No distant metastasis. S0: Marker study levels within normal limits. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6361) )
        setattr(cls, "AJCC, Stage 1B",
                PermissibleValue(text="AJCC, Stage 1B",
                                 description="Stage IB includes: (pT2, N0, M0, S0); (pT3, N0, M0, S0); (pT4, N0, M0, S0). pT2: Tumor limited to the testis and epididymis with vascular/lymphatic invasion, or tumor extending through the tunica albuginea with involvement of the tunica vaginalis. pT3: Tumor invades the spermatic cord with or without vascular/lymphatic invasion. pT4: Tumor invades the scrotum with or without vascular/lymphatic invasion. N0: No regional lymph node metastasis. M0: No distant metastasis. S0: Marker study levels within normal limits. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6362) )
        setattr(cls, "AJCC, Stage 1s",
                PermissibleValue(text="AJCC, Stage 1s",
                                 description="Stage IS includes: Any pT/TX, N0, M0, S1-3. pTX: Primary tumor cannot be assessed. N0: No regional lymph node metastasis. M0: No distant metastasis. S1: LDH less than 1.5 x N (N indicates the upper limit of normal for the LDH assay) and hCG less than 5,000 and AFP less than 1,000. S2: LDH 1.5-10 x N or hCG 5,000-50,000 or AFP 1,000-10,000. S3: LDH more than 10 x N or hCG more than 50,000 or AFP more than 10,000. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6363) )
        setattr(cls, "AJCC, Stage 2",
                PermissibleValue(text="AJCC, Stage 2",
                                 description="Stage II includes: Any pT/TX, N1-3, M0, SX. pTX: Primary tumor cannot be assessed. N1: Metastasis with a lymph node mass 2 cm or less in greatest dimension; or multiple lymph nodes, none more than 2cm in greatest dimension. N2: Metastasis with a lymph node mass more than 2 cm but not more than 5 cm in greatest dimension; or multiple lymph nodes, any one mass greater than 2 cm but not more than 5 cm in greatest dimension. N3: Metastasis with a lymph node mass more than 5 cm in greatest dimension. M0: No distant metastasis. SX: Marker studies not available or not performed. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C9073) )
        setattr(cls, "AJCC, Stage 2A",
                PermissibleValue(text="AJCC, Stage 2A",
                                 description="Stage IIA includes: (Any pT/TX, N1, M0, S0); (Any pT/TX, N1, M0, S1). TX: Testicular cancer in which the primary tumor cannot be assessed. N1: Testicular cancer with metastasis with a lymph node mass 2 cm or smaller in greatest dimension and less than or equal to five nodes positive, none larger than 2 cm in greatest dimension. M0: Testicular cancer without evidence of distant metastasis. S0: Marker study levels within normal limits. S1: LDH less than 1.5 x N and hCG (mlU/mL) less than 5,000 and AFP (ng/mL) less than 1,000. N indicates the upper limit of normal for the LDH assay. (AJCC 8th ed.)",
                                 meaning=NCIT.C6364) )
        setattr(cls, "AJCC, Stage 2B",
                PermissibleValue(text="AJCC, Stage 2B",
                                 description="Stage IIB includes: (Any pT/TX, N2, M0, S0); (Any pT/TX, N2, M0, S1). pTX: Primary tumor cannot be assessed. N2: Metastasis with a lymph node mass more than 2 cm but not more than 5 cm in greatest dimension; or multiple lymph nodes, any one mass greater than 2 cm but not more than 5 cm in greatest dimension. M0: No distant metastasis. S0: Marker study levels within normal limits. S1: LDH less than 1.5 x N (N indicates the upper limit of normal for the LDH assay) and hCG less than 5,000 and AFP less than 1,000. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6365) )
        setattr(cls, "AJCC, Stage 2C",
                PermissibleValue(text="AJCC, Stage 2C",
                                 description="Stage IIC includes: (Any pT/TX, N3, M0, S0); (Any pT/TX, N3, M0, S1). pTX: Primary tumor cannot be assessed. N3: Metastasis with a lymph node mass more than 5 cm in greatest dimension. M0: No distant metastasis. S0: Marker study levels within normal limits. S1: LDH less than 1.5 x N (N indicates the upper limit of normal for the LDH assay) and hCG less than 5,000 and AFP less than 1,000. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6366) )
        setattr(cls, "AJCC, Stage 3",
                PermissibleValue(text="AJCC, Stage 3",
                                 description="Stage III includes: Any pT/TX, Any N, M1, SX. M1: Distant metastasis. SX: Marker studies not available or not performed. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C9074) )
        setattr(cls, "AJCC, Stage 3A",
                PermissibleValue(text="AJCC, Stage 3A",
                                 description="Stage IIIA includes: (Any pT/TX, Any N, M1a, S0); (Any pT/TX, Any N, M1a, S1). M1a: Non-regional nodal or pulmonary metastasis. S0: Marker study levels within normal limits. S1: LDH less than 1.5 x N (N indicates the upper limit of normal for the LDH assay) and hCG less than 5,000 and AFP less than 1,000. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6369) )
        setattr(cls, "AJCC, Stage 3B",
                PermissibleValue(text="AJCC, Stage 3B",
                                 description="Stage IIIB includes: (Any pT/TX, N1-3, M0, S2); (Any pT/TX, Any N, M1a, S2). N1: Metastasis with a lymph node mass 2 cm or less in greatest dimension; or multiple lymph nodes, none more than 2cm in greatest dimension. N2: Metastasis with a lymph node mass more than 2 cm but not more than 5 cm in greatest dimension; or multiple lymph nodes, any one mass greater than 2 cm but not more than 5 cm in greatest dimension. N3: Metastasis with a lymph node mass more than 5 cm in greatest dimension. M0: No distant metastasis. M1a: Non-regional nodal or pulmonary metastasis. S2: LDH 1.5-10 x N (N indicates the upper limit of normal for the LDH assay) or hCG 5,000-50,000 or AFP 1,000-10,000. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6368) )
        setattr(cls, "AJCC, Stage 3C",
                PermissibleValue(text="AJCC, Stage 3C",
                                 description="Stage IIIC includes: (Any pT/TX, N1-3, M0, S3); (Any pT/TX, Any N, M1a, S3); (Any pT/TX, Any N, M1b, Any S). N1: Metastasis with a lymph node mass 2 cm or less in greatest dimension; or multiple lymph nodes, none more than 2cm in greatest dimension. N2: Metastasis with a lymph node mass more than 2 cm but not more than 5 cm in greatest dimension; or multiple lymph nodes, any one mass greater than 2 cm but not more than 5 cm in greatest dimension. N3: Metastasis with a lymph node mass more than 5 cm in greatest dimension. M0: No distant metastasis. M1a: Non-regional nodal or pulmonary metastasis. M1b: Distant metastasis other than to non-regional lymph nodes and lung. S3: LDH more than 10 x N (N indicates the upper limit of normal for the LDH assay) or hCG more than 50,000 or AFP more than 10,000. (AJCC 6th and 7th eds.)",
                                 meaning=NCIT.C6367) )
        setattr(cls, "Evans, Stage 1",
                PermissibleValue(text="Evans, Stage 1",
                                 description="The tumor is completely resected.") )
        setattr(cls, "Evans, Stage 2",
                PermissibleValue(text="Evans, Stage 2",
                                 description="Microscopic residual tumor remains after resection.") )
        setattr(cls, "Evans, Stage 3",
                PermissibleValue(text="Evans, Stage 3",
                                 description="There are no distant metastases and at least one of the following is true: (1) the tumor is either unresectable or the tumor is resected with gross residual tumor; (2) there are positive extrahepatic lymph nodes.") )
        setattr(cls, "Evans, Stage 4",
                PermissibleValue(text="Evans, Stage 4",
                                 description="There is distant metastasis, regardless of the extent of liver involvement.") )
        setattr(cls, "INRGSS, Stage L1",
                PermissibleValue(text="INRGSS, Stage L1",
                                 description="Locoregional tumor without IDRFs") )
        setattr(cls, "INRGSS, Stage L2",
                PermissibleValue(text="INRGSS, Stage L2",
                                 description="Locoregional tumor with one or more IDRFs") )
        setattr(cls, "INRGSS, Stage M",
                PermissibleValue(text="INRGSS, Stage M",
                                 description="Distant metastatic disease (except Ms)") )
        setattr(cls, "INRGSS, Stage Ms",
                PermissibleValue(text="INRGSS, Stage Ms",
                                 description="INRG Stage L1 or L2 tumor with metastatic disease confined to skin and/or liver and/or bone marrow") )
        setattr(cls, "NOS, Stage 1",
                PermissibleValue(text="NOS, Stage 1",
                                 description="Stage 1 but the staging system is not specified by the source data") )
        setattr(cls, "NOS, Stage 2",
                PermissibleValue(text="NOS, Stage 2",
                                 description="Stage 2 but the staging system is not specified by the source data") )
        setattr(cls, "NOS, Stage 3",
                PermissibleValue(text="NOS, Stage 3",
                                 description="Stage 3 but the staging system is not specified by the source data") )
        setattr(cls, "NOS, Stage 4",
                PermissibleValue(text="NOS, Stage 4",
                                 description="Stage 4 but the staging system is not specified by the source data") )
        setattr(cls, "NOS, L1",
                PermissibleValue(text="NOS, L1",
                                 description="Stage L1 but the staging system is not specified by the source data") )
        setattr(cls, "NOS, L2",
                PermissibleValue(text="NOS, L2",
                                 description="Stage L2 but the staging system is not specified by the source data") )
        setattr(cls, "NOS, M",
                PermissibleValue(text="NOS, M",
                                 description="Stage M but the staging system is not specified by the source data") )
        setattr(cls, "NOS, MS",
                PermissibleValue(text="NOS, MS",
                                 description="Stage MS but the staging system is not specified by the source data") )
        setattr(cls, "INSS, Stage 2a",
                PermissibleValue(text="INSS, Stage 2a",
                                 description="Localized tumor with incomplete gross excision; representative ipsilateral nonadherent lymph nodes negative for tumor microscopically.") )
        setattr(cls, "INSS, Stage 2b",
                PermissibleValue(text="INSS, Stage 2b",
                                 description="Localized tumor with or without complete gross excision, with ipsilateral nonadherent lymph nodes positive for tumor. Enlarged contralateral lymph nodes must be negative microscopically.") )
        setattr(cls, "INSS, Stage 4s",
                PermissibleValue(text="INSS, Stage 4s",
                                 description="Localized primary tumor, as defined for stage 1, 2A, or 2B, with dissemination limited to skin, liver, and/or bone marrow (by definition limited to infants younger than 12 months). Marrow involvement should be minimal (i.e., <10% of total nucleated cells identified as malignant by bone biopsy or by bone marrow aspirate). More extensive bone marrow involvement would be considered stage 4 disease. The results of the MIBG scan, if performed, should be negative for disease in the bone marrow.") )
        setattr(cls, "Evans, Stage I",
                PermissibleValue(text="Evans, Stage I",
                                 description="The tumor is completely resected.") )
        setattr(cls, "Evans, Stage II",
                PermissibleValue(text="Evans, Stage II",
                                 description="Microscopic residual tumor remains after resection.") )
        setattr(cls, "Evans, Stage III",
                PermissibleValue(text="Evans, Stage III",
                                 description="There are no distant metastases and at least one of the following is true: (1) the tumor is either unresectable or the tumor is resected with gross residual tumor; (2) there are positive extrahepatic lymph nodes.") )
        setattr(cls, "Evans, Stage IV",
                PermissibleValue(text="Evans, Stage IV",
                                 description="There is distant metastasis, regardless of the extent of liver involvement.") )

class AnnArborModAbEnum(EnumDefinitionImpl):

    A = PermissibleValue(text="A",
                         description="An indication of whether a record includes A-symptom data based on the Ann Arbor lymphoma classification system guidelines.",
                         meaning=NCIT.C185483)
    B = PermissibleValue(text="B",
                         description="A indication of whether a record includes B-symptom data based on the Ann Arbor lymphoma classification system guidelines.",
                         meaning=NCIT.C177585)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AnnArborModAbEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class StageSystemCategoryEnum(EnumDefinitionImpl):

    T = PermissibleValue(text="T",
                         description="Extent of the tumor")
    N = PermissibleValue(text="N",
                         description="Extent of the spread to the lymph nodes")
    M = PermissibleValue(text="M",
                         description="Presence of metastasis")
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.")

    _defn = EnumDefinition(
        name="StageSystemCategoryEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.") )

class StageTypeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="StageTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class HStageEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="HStageEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class GroupSystemEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="GroupSystemEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class GroupEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="GroupEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TnmFindingEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TnmFindingEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class IrsGroupEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="IrsGroupEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NonProtocolTimingEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NonProtocolTimingEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "After Study Completion",
                PermissibleValue(text="After Study Completion",
                                 description="The time period after the completion of the study.",
                                 meaning=NCIT.C175040) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Prior to Study",
                PermissibleValue(text="Prior to Study",
                                 description="The time period before the study.",
                                 meaning=NCIT.C175039) )

class TotalDoseUnitEnum(EnumDefinitionImpl):

    Gy = PermissibleValue(text="Gy",
                           description="A SI derived unit of absorbed radiation dose. One gray is equal to an absorbed dose of one joule per kilogram of matter, or to 100 rads.",
                           meaning=NCIT.C18063)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    CGE = PermissibleValue(text="CGE",
                             description="A unit of relative biological effectiveness of protons equivalent to 60 cobalt gamma rays.",
                             meaning=NCIT.C128269)
    cGY = PermissibleValue(text="cGY",
                             description="The metric unit of absorbed radiation dose equal to the absorption of one hundredth of joule of radiation energy per kilogram of matter.",
                             meaning=NCIT.C64693)

    _defn = EnumDefinition(
        name="TotalDoseUnitEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "mg/m2",
                PermissibleValue(text="mg/m2",
                                 meaning=NCIT.C18063) )

class TechniqueEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Brachytherapy = PermissibleValue(text="Brachytherapy",
                                                 description="A type of radiation therapy in which radioactive material is placed inside the body, into a tumor or body cavity.",
                                                 meaning=NCIT.C15195)

    _defn = EnumDefinition(
        name="TechniqueEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "EBRT, 3D Conformal",
                PermissibleValue(text="EBRT, 3D Conformal",
                                 description="A form of external beam radiation therapy (EBRT) in which doctors to sculpt radiation beams to the shape of a tumor and deliver to the tumor from several angles.") )
        setattr(cls, "EBRT, Intensity-modulated",
                PermissibleValue(text="EBRT, Intensity-modulated",
                                 description="A form of external beam radiation therapy (EBRT) in which advanced software plans a precise dose of radiation, based on tumor size, shape and location. A computer-controlled device delivers the radiation in sculpted doses that match the 3-D geometrical shape of the tumor, including concave and complex shapes. The intensity of radiation beams can be adjusted across the treatment area in fractioned, separate beams as precision accuracy") )
        setattr(cls, "EBRT, Stereotactic radiosurgery",
                PermissibleValue(text="EBRT, Stereotactic radiosurgery",
                                 description="A form of external beam radiation therapy (EBRT) in which a high dose of radiation is delivered to a small area in the brain or head from many angles.") )
        setattr(cls, "EBRT, NOS",
                PermissibleValue(text="EBRT, NOS",
                                 description="External beam radiation therapy (EBRT), subtype not otherwise specified") )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "EBRT, Intensity-Modulated",
                PermissibleValue(text="EBRT, Intensity-Modulated",
                                 description="A form of external beam radiation therapy (EBRT) in which advanced software plans a precise dose of radiation, based on tumor size, shape and location. A computer-controlled device delivers the radiation in sculpted doses that match the 3-D geometrical shape of the tumor, including concave and complex shapes. The intensity of radiation beams can be adjusted across the treatment area in fractioned, separate beams as precision accuracy") )
        setattr(cls, "EBRT, Stereotactic Radiosurgery",
                PermissibleValue(text="EBRT, Stereotactic Radiosurgery",
                                 description="A form of external beam radiation therapy (EBRT) in which a high dose of radiation is delivered to a small area in the brain or head from many angles.") )

class EnergyTypeEnum(EnumDefinitionImpl):

    Photon = PermissibleValue(text="Photon",
                                   description="A single unit of electromagnetic radiation, generally considered to be a discrete particle having no mass or charge.",
                                   meaning=NCIT.C88112)
    Proton = PermissibleValue(text="Proton",
                                   description="A type of external beam radiation therapy using a beam of protons. It has the advantage of precisely localizing the radiation dose on the targeted tissue and avoiding damage to the healthy surrounding tissues.",
                                   meaning=NCIT.C66897)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Electron = PermissibleValue(text="Electron",
                                       description="Radiation therapy using electron beam.",
                                       meaning=NCIT.C15650)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="EnergyTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MarginEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MarginEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class RtDataSourceEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="RtDataSourceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TargetVolumeEnum(EnumDefinitionImpl):

    Craniospinal = PermissibleValue(text="Craniospinal",
                                               description="Relating to the cranium and the spinal column.",
                                               meaning=NCIT.C84352)
    Focal = PermissibleValue(text="Focal",
                                 description="Limited to a specific area.",
                                 meaning=NCIT.C28224)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TargetVolumeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CgeNotreportedUnknownCgyEnum(EnumDefinitionImpl):

    CGE = PermissibleValue(text="CGE",
                             description="A unit of relative biological effectiveness of protons equivalent to 60 cobalt gamma rays.",
                             meaning=NCIT.C128269)
    cGY = PermissibleValue(text="cGY",
                             description="The metric unit of absorbed radiation dose equal to the absorption of one hundredth of joule of radiation energy per kilogram of matter.",
                             meaning=NCIT.C64693)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CgeNotreportedUnknownCgyEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class BoostTargetVolumeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="BoostTargetVolumeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TranspositionOrganEnum(EnumDefinitionImpl):

    Ovaries = PermissibleValue(text="Ovaries",
                                     description="One of the paired female reproductive glands containing the ova or germ cells; the ovary's stroma is a vascular connective tissue containing numbers of ovarian follicles enclosing the ova.",
                                     meaning=NCIT.C12404)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TranspositionOrganEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class BoostDoseUnitEnum(EnumDefinitionImpl):

    Gy = PermissibleValue(text="Gy",
                           description="A SI derived unit of absorbed radiation dose. One gray is equal to an absorbed dose of one joule per kilogram of matter, or to 100 rads.",
                           meaning=NCIT.C18063)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="BoostDoseUnitEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class IndicationEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="IndicationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ProtonDeliveryModeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Not provided or available.",
                                     meaning=NCIT.C43234)

    _defn = EnumDefinition(
        name="ProtonDeliveryModeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Reported as unknown by the data contributor.",
                                 meaning=NCIT.C17998) )

class PlaqueSizeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Not provided or available.",
                                     meaning=NCIT.C43234)

    _defn = EnumDefinition(
        name="PlaqueSizeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Reported as unknown by the data contributor.",
                                 meaning=NCIT.C17998) )

class SctTypeEnum(EnumDefinitionImpl):

    Autologous = PermissibleValue(text="Autologous",
                                           description="Stem cell transfer or transplantation in which the patient is his own donor.",
                                           meaning=NCIT.C16039)
    Allogeneic = PermissibleValue(text="Allogeneic",
                                           description="A clinical treatment in which hematopoietic stem cells (HSCs) are transferred from one genetically dissimilar individual to another.",
                                           meaning=NCIT.C46089)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SctTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class StemCellSourceEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="StemCellSourceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Bone Marrow",
                PermissibleValue(text="Bone Marrow",
                                 description="A procedure to replace diseased or pathologic bone marrow with transplanted healthy bone marrow cells.",
                                 meaning=NCIT.C15194) )
        setattr(cls, "Peripheral Blood",
                PermissibleValue(text="Peripheral Blood",
                                 description="A method of hematopoietic reconstitution utilizing stem cells harvested from the circulating blood of a patient or donor. Peripheral blood stem cell transplantation (PBSCT) is used for the treatment of certain blood disorders, following partial or complete bone marrow ablation, or following high dose chemotherapy or radiation treatment for cancer. Immature circulating blood cells, similar to stem cells in the bone marrow, are removed before treatment. The cells are then given to the patient after treatment to help the bone marrow recover and continue producing healthy blood cells. Transplantation may be autologous (the patient's own blood cells are used), allogeneic (blood cells are donated by someone else), or syngeneic (blood cells are donated by an identical twin).",
                                 meaning=NCIT.C15430) )
        setattr(cls, "Cord Blood",
                PermissibleValue(text="Cord Blood",
                                 description="A therapeutic procedure that involves the transplantation of hematopoietic stem cells collected from the umbilical cord or placenta.",
                                 meaning=NCIT.C15640) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Mixture of Stem Cells",
                PermissibleValue(text="Mixture of Stem Cells",
                                 description="A mixture of different sources of stem cells.",
                                 meaning=NCIT.C168886) )

class DonorRelationshipEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="DonorRelationshipEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Biological Sibling",
                PermissibleValue(text="Biological Sibling",
                                 description="A person's brother or sister with whom they share a genetic makeup inherited from one or both of their shared biological parents.",
                                 meaning=NCIT.C100809) )
        setattr(cls, "Biological Parent",
                PermissibleValue(text="Biological Parent",
                                 description="The male who supplied the sperm or the female who supplied the egg which resulted in one's conception.",
                                 meaning=NCIT.C166114) )
        setattr(cls, "Biological Relative",
                PermissibleValue(text="Biological Relative",
                                 description="A person related by descent rather than by marriage or law.",
                                 meaning=NCIT.C71384) )
        setattr(cls, "Biologically Unrelated",
                PermissibleValue(text="Biologically Unrelated",
                                 description="A person who is biologically unrelated to another individual.",
                                 meaning=NCIT.C130053) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ConditioningTypeEnum(EnumDefinitionImpl):

    Myeloablative = PermissibleValue(text="Myeloablative",
                                                 description="A conditioning regimen with high doses of chemotherapy or radiation to eliminate host hematopoietic stem cells prior to restitution via transplantation.",
                                                 meaning=NCIT.C131679)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ConditioningTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Reduced Intensity Conditioning/Reduced Toxicity Conditioning",
                PermissibleValue(text="Reduced Intensity Conditioning/Reduced Toxicity Conditioning",
                                 description="A method of preparation for stem cell transplant that uses less than standard doses of chemotherapy and radiation prior to the transfer of stem cells, with the goal of providing protection against graft vs. host disease, while simultaneously minimizing the toxic effects of the conditioning treatment.",
                                 meaning=NCIT.C116471) )
        setattr(cls, "Non-Myeloablative",
                PermissibleValue(text="Non-Myeloablative",
                                 description="A modification of the standard method of allogeneic hematopoietic stem cell transplantation developed to allow for the therapy to be extended to a patient population that is unable to tolerate treatment with the conventional procedure due to its toxicity.",
                                 meaning=NCIT.C62714) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Both alleles matched",
                PermissibleValue(text="Both alleles matched",
                                 description="Both alleles match for one HLA locus",
                                 meaning=NCIT.C168821) )
        setattr(cls, "One allele mismatched",
                PermissibleValue(text="One allele mismatched",
                                 description="One allele matches for one HLA locus.",
                                 meaning=NCIT.C168819) )
        setattr(cls, "Two alleles mismatched",
                PermissibleValue(text="Two alleles mismatched",
                                 description="A mismatch exists at both alleles.",
                                 meaning=NCIT.C168820) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class RecoveryTypeEnum(EnumDefinitionImpl):

    Platelets = PermissibleValue(text="Platelets",
                                         description="recovery level higher >50,000")
    Anemia = PermissibleValue(text="Anemia",
                                   description="recovery level higher Hgb >8.0 g/dL")
    Neutrophil = PermissibleValue(text="Neutrophil",
                                           description="recovery level higher >500/mm3 ")

    _defn = EnumDefinition(
        name="RecoveryTypeEnum",
    )

class RecoveryStatusEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="RecoveryStatusEnum",
    )

class RouteEnum(EnumDefinitionImpl):

    Systemic = PermissibleValue(text="Systemic",
                                       description="Immunotherapy that is disseminated throughout the body via the bloodstream.",
                                       meaning=NCIT.C173291)
    Intrathecal = PermissibleValue(text="Intrathecal",
                                             description="Immunotherapy that is administered into the cerebrospinal fluid.",
                                             meaning=NCIT.C173292)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="RouteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MedicationEnum(EnumDefinitionImpl):

    Amsacrine = PermissibleValue(text="Amsacrine",
                                         description="An aminoacridine derivative with potential antineoplastic activity. Although its mechanism of action is incompletely defined, amsacrine may intercalate into DNA and inhibit topoisomerase II, resulting in DNA double-strand breaks, arrest of the S/G2 phase of the cell cycle, and cell death. This agent's cytotoxicity is maximal during the S phase of the cell cycle when topoisomerase levels are greatest. In addition, amsacrine may induce transcription of tumor promoter p53 protein and block p53 ubiquitination and proteasomal degradation, resulting in p53-dependent tumor cell apoptosis.",
                                         meaning=NCIT.C240)
    Bortezomib = PermissibleValue(text="Bortezomib",
                                           description="A dipeptide boronic acid analogue with antineoplastic activity. Bortezomib reversibly inhibits the 26S proteasome, a large protease complex that degrades ubiquinated proteins. By blocking the targeted proteolysis normally performed by the proteasome, bortezomib disrupts various cell signaling pathways, leading to cell cycle arrest, apoptosis, and inhibition of angiogenesis. Specifically, the agent inhibits nuclear factor (NF)-kappaB, a protein that is constitutively activated in some cancers, thereby interfering with NF-kappaB-mediated cell survival, tumor growth, and angiogenesis. In vivo, bortezomib delays tumor growth and enhances the cytotoxic effects of radiation and chemotherapy.",
                                           meaning=NCIT.C1851)
    Busulfan = PermissibleValue(text="Busulfan",
                                       description="A synthetic derivative of dimethane-sulfonate with antineoplastic and cytotoxic properties. Although its mechanism of action is not fully understood, busulfan appears to act through the alkylation of DNA. Following systemic absorption of busulfan, carbonium ions are formed, resulting in DNA alkylation and DNA breaks and inhibition of DNA replication and RNA transcription. (NCI04)",
                                       meaning=NCIT.C321)
    Cladribine = PermissibleValue(text="Cladribine",
                                           description="A purine nucleoside antimetabolite analogue. Cladribine triphosphate, a phosphorylated metabolite of cladribine, incorporates into DNA, resulting in single-strand breaks in DNA, depletion of nicotinamide adenine dinucleotide (NAD) and adenosine triphosphate (ATP), and apoptosis.",
                                           meaning=NCIT.C1336)
    Clofarabine = PermissibleValue(text="Clofarabine",
                                             description="A second generation purine nucleoside analog with antineoplastic activity.",
                                             meaning=NCIT.C26638)
    Cyclophosphamide = PermissibleValue(text="Cyclophosphamide",
                                                       description="A synthetic alkylating agent chemically related to the nitrogen mustards with antineoplastic and immunosuppressive activities. In the liver, cyclophosphamide is converted to the active metabolites aldophosphamide and phosphoramide mustard, which bind to DNA, thereby inhibiting DNA replication and initiating cell death.",
                                                       meaning=NCIT.C405)
    Cytarabine = PermissibleValue(text="Cytarabine",
                                           description="An antimetabolite analogue of cytidine with a modified sugar moiety (arabinose instead of ribose).",
                                           meaning=NCIT.C408)
    Daunorubicin = PermissibleValue(text="Daunorubicin",
                                               description="An anthracycline antineoplastic antibiotic with therapeutic effects similar to those of doxorubicin. Daunorubicin exhibits cytotoxic activity through topoisomerase-mediated interaction with DNA, thereby inhibiting DNA replication and repair and RNA and protein synthesis.",
                                               meaning=NCIT.C62091)
    Dexrazoxane = PermissibleValue(text="Dexrazoxane",
                                             description="A bisdioxopiperazine with iron-chelating, chemoprotective, cardioprotective, and antineoplastic activities. After hydrolysis to an active form that is similar to ethylenediaminetetraacetic acid (EDTA), dexrazoxane chelates iron, limiting the formation of free radical-generating anthracycline-iron complexes, which may minimize anthracycline-iron complex-mediated oxidative damage to cardiac and soft tissues. This agent also inhibits the catalytic activity of topoisomerase II, which may result in tumor cell growth inhibition.",
                                             meaning=NCIT.C1333)
    Doxorubicin = PermissibleValue(text="Doxorubicin",
                                             description="An anthracycline antibiotic with antineoplastic activity. Doxorubicin, isolated from the bacterium Streptomyces peucetius var. caesius, is the hydroxylated congener of daunorubicin. Doxorubicin intercalates between base pairs in the DNA helix, thereby preventing DNA replication and ultimately inhibiting protein synthesis. Additionally, doxorubicin inhibits topoisomerase II which results in an increased and stabilized cleavable enzyme-DNA linked complex during DNA replication and subsequently prevents the ligation of the nucleotide strand after double-strand breakage. Doxorubicin also forms oxygen free radicals resulting in cytotoxicity secondary to lipid peroxidation of cell membrane lipids; the formation of oxygen free radicals also contributes to the toxicity of the anthracycline antibiotics, namely the cardiac and cutaneous vascular effects.",
                                             meaning=NCIT.C456)
    Etoposide = PermissibleValue(text="Etoposide",
                                         description="A semisynthetic derivative of podophyllotoxin, a substance extracted from the mandrake root Podophyllum peltatum. Possessing potent antineoplastic properties, etoposide binds to and inhibits topoisomerase II and its function in ligating cleaved DNA molecules, resulting in the accumulation of single- or double-strand DNA breaks, the inhibition of DNA replication and transcription, and apoptotic cell death. Etoposide acts primarily in the G2 and S phases of the cell cycle. (NCI04)",
                                         meaning=NCIT.C491)
    Fludarabine = PermissibleValue(text="Fludarabine",
                                             description="A fluorinated nucleotide antimetabolite analog of the antiviral agent vidarabine (ara-A) with antineoplastic activity.",
                                             meaning=NCIT.C1094)
    Gilteritinib = PermissibleValue(text="Gilteritinib",
                                               description="An orally bioavailable inhibitor of the receptor tyrosine kinases (RTKs) FMS-related tyrosine kinase 3 (FLT3, STK1, or FLK2), AXL (UFO or JTK11) and anaplastic lymphoma kinase (ALK or CD246), with potential antineoplastic activity. Gilteritinib binds to and inhibits both the wild-type and mutated forms of FLT3, AXL and ALK. This may result in an inhibition of FLT3, AXL, and ALK-mediated signal transduction pathways and reduces tumor cell proliferation in cancer cell types that overexpress these RTKs. FLT3, AXL and ALK, overexpressed or mutated in a variety of cancer cell types, play a key role in tumor cell growth and survival.",
                                               meaning=NCIT.C116722)
    Idarubicin = PermissibleValue(text="Idarubicin",
                                           description="A semisynthetic 4-demethoxy analogue of the antineoplastic anthracycline antibiotic daunorubicin.",
                                           meaning=NCIT.C562)
    Melphalan = PermissibleValue(text="Melphalan",
                                         description="A phenylalanine derivative of nitrogen mustard with antineoplastic activity. Melphalan alkylates DNA at the N7 position of guanine and induces DNA inter-strand cross-linkages, resulting in the inhibition of DNA and RNA synthesis and cytotoxicity against both dividing and non-dividing tumor cells.",
                                         meaning=NCIT.C633)
    Methotrexate = PermissibleValue(text="Methotrexate",
                                               description="An antimetabolite and antifolate agent with antineoplastic and immunosuppressant activities. Methotrexate binds to and inhibits the enzyme dihydrofolate reductase, resulting in inhibition of purine nucleotide and thymidylate synthesis and, subsequently, inhibition of DNA and RNA syntheses. Methotrexate also exhibits potent immunosuppressant activity although the mechanism(s) of actions is unclear.",
                                               meaning=NCIT.C642)
    Midostaurin = PermissibleValue(text="Midostaurin",
                                             description="A synthetic indolocarbazole multikinase inhibitor with potential antiangiogenic and antineoplastic activities. Midostaurin inhibits protein kinase C alpha (PKCalpha), vascular endothelial growth factor receptor 2 (VEGFR2), c-kit, platelet-derived growth factor receptor (PDGFR) and FMS-like tyrosine kinase 3 (FLT3) tyrosine kinases, which may result in disruption of the cell cycle, inhibition of proliferation, apoptosis, and inhibition of angiogenesis in susceptible tumors.",
                                             meaning=NCIT.C1872)
    Quizartinib = PermissibleValue(text="Quizartinib",
                                             description="An orally available small molecule with potential antineoplastic activity. Quizartinib selectively inhibits class III receptor tyrosine kinases, including FMS-related tyrosine kinase 3 (FLT3/STK1), colony-stimulating factor 1 receptor (CSF1R/FMS), stem cell factor receptor (SCFR/KIT), and platelet derived growth factor receptors (PDGFRs), resulting in inhibition of ligand-independent leukemic cell proliferation and apoptosis. Mutations in FLT3, resulting in constitutive activation, are the most frequent genetic alterations in acute myeloid leukemia (AML) and occur in approximately one-third of AML cases.",
                                             meaning=NCIT.C68936)
    Sorafenib = PermissibleValue(text="Sorafenib",
                                         description="A synthetic compound targeting growth signaling and angiogenesis. Sorafenib blocks the enzyme RAF kinase, a critical component of the RAF/MEK/ERK signaling pathway that controls cell division and proliferation; in addition, sorafenib inhibits the VEGFR-2/PDGFR-beta signaling cascade, thereby blocking tumor angiogenesis.",
                                         meaning=NCIT.C61948)
    Thiotepa = PermissibleValue(text="Thiotepa",
                                       description="A polyfunctional, organophosphorus alkylating agent and a stable derivative of N,N',N''-triethylenephosphoramide (TEPA), with antineoplastic activity. Upon administration, thiotepa is converted into highly reactive ethylenimine groups, which covalently bind to nucleophilic groups in DNA and demonstrate a preference for the N7 position of guanine bases. This induces crosslinking of alkylated guanine bases in double-stranded DNA, interferes with both DNA replication and cell division, and results in both the induction of apoptosis and the inhibition of cell growth.",
                                       meaning=NCIT.C875)
    Tretinoin = PermissibleValue(text="Tretinoin",
                                         description="A naturally-occurring acid of retinol. Tretinoin binds to and activates retinoic acid receptors (RARs), thereby inducing changes in gene expression that lead to cell differentiation, decreased cell proliferation, and inhibition of tumorigenesis. This agent also inhibits telomerase, resulting in telomere shortening and eventual apoptosis of some tumor cell types. The oral form of tretinoin has teratogenic and embryotoxic properties.",
                                         meaning=NCIT.C900)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Bevacizumab = PermissibleValue(text="Bevacizumab",
                                             description="A recombinant humanized monoclonal antibody directed against the vascular endothelial growth factor (VEGF), a pro-angiogenic cytokine. Bevacizumab binds to VEGF and inhibits VEGF receptor binding, thereby preventing the growth and maintenance of tumor blood vessels.",
                                             meaning=NCIT.C2039)
    Carboplatin = PermissibleValue(text="Carboplatin",
                                             description="A second-generation platinum compound with a broad spectrum of antineoplastic properties. Carboplatin contains a platinum atom complexed with two ammonia groups and a cyclobutane-dicarboxyl residue. This agent is activated intracellularly to form reactive platinum complexes that bind to nucleophilic groups such as GC-rich sites in DNA, thereby inducing intrastrand and interstrand DNA cross-links, as well as DNA-protein cross-links. These carboplatin-induced DNA and protein effects result in apoptosis and cell growth inhibition. This agent possesses tumoricidal activity similar to that of its parent compound, cisplatin, but is more stable and less toxic. (NCI04)",
                                             meaning=NCIT.C1282)
    Cisplatin = PermissibleValue(text="Cisplatin",
                                         description="An alkylating-like inorganic platinum agent (cis-diamminedichloroplatinum) with antineoplastic activity. Cisplatin forms highly reactive, charged, platinum complexes which bind to nucleophilic groups such as GC-rich sites in DNA inducing intrastrand and interstrand DNA cross-links, as well as DNA-protein cross-links. These cross-links result in apoptosis and cell growth inhibition.",
                                         meaning=NCIT.C376)
    Erlotinib = PermissibleValue(text="Erlotinib",
                                         description="A quinazoline derivative with antineoplastic properties. Competing with adenosine triphosphate, erlotinib reversibly binds to the intracellular catalytic domain of epidermal growth factor receptor (EGFR) tyrosine kinase, thereby reversibly inhibiting EGFR phosphorylation and blocking the signal transduction events and tumorigenic effects associated with EGFR activation.",
                                         meaning=NCIT.C65530)
    Gemcitabine = PermissibleValue(text="Gemcitabine",
                                             description="A broad-spectrum antimetabolite and deoxycytidine analogue with antineoplastic activity. Upon administration, gemcitabine is converted into the active metabolites difluorodeoxycytidine diphosphate (dFdCDP) and difluorodeoxycytidine triphosphate (dFdCTP) by deoxycytidine kinase. dFdCTP competes with deoxycytidine triphosphate (dCTP) and is incorporated into DNA. This locks DNA polymerase thereby resulting in "masked termination" during DNA replication. On the other hand, dFdCDP inhibits ribonucleotide reductase, thereby decreasing the deoxynucleotide pool available for DNA synthesis. The reduction in the intracellular concentration of dCTP potentiates the incorporation of dFdCTP into DNA.",
                                             meaning=NCIT.C66876)
    Ifosfamide = PermissibleValue(text="Ifosfamide",
                                           description="A synthetic analogue of the nitrogen mustard cyclophosphamide with antineoplastic activity. Ifosfamide alkylates and forms DNA crosslinks, thereby preventing DNA strand separation and DNA replication. This agent is a prodrug that must be activated through hydroxylation by hepatic microsomal enzymes. (NCI04)",
                                           meaning=NCIT.C564)
    Irinotecan = PermissibleValue(text="Irinotecan",
                                           description="A semisynthetic derivative of camptothecin, a cytotoxic, quinoline-based alkaloid extracted from the Asian tree Camptotheca acuminata. Irinotecan, a prodrug, is converted to a biologically active metabolite 7-ethyl-10-hydroxy-camptothecin (SN-38) by a carboxylesterase-converting enzyme. One thousand-fold more potent than its parent compound irinotecan, SN-38 inhibits topoisomerase I activity by stabilizing the cleavable complex between topoisomerase I and DNA, resulting in DNA breaks that inhibit DNA replication and trigger apoptotic cell death. Because ongoing DNA synthesis is necessary for irinotecan to exert its cytotoxic effects, it is classified as an S-phase-specific agent.",
                                           meaning=NCIT.C62040)
    Isotretinoin = PermissibleValue(text="Isotretinoin",
                                               description="A naturally-occurring retinoic acid with potential antineoplastic activity. Isotretinoin binds to and activates nuclear retinoic acid receptors (RARs); activated RARs serve as transcription factors that promote cell differentiation and apoptosis. This agent also exhibits immunomodulatory and anti-inflammatory responses and inhibits ornithine decarboxylase, thereby decreasing polyamine synthesis and keratinization.",
                                               meaning=NCIT.C603)
    Lomustine = PermissibleValue(text="Lomustine",
                                         description="A nitrosourea with antineoplastic activity. Lomustine alkylates and crosslinks DNA, thereby inhibiting DNA and RNA synthesis. This agent also carbamoylates DNA and proteins, resulting in inhibition of DNA and RNA synthesis and disruption of RNA processing. Lomustine is lipophilic and crosses the blood-brain barrier. (NCI04)",
                                         meaning=NCIT.C617)
    Pemetrexed = PermissibleValue(text="Pemetrexed",
                                           description="A synthetic pyrimidine-based antifolate. Pemetrexed binds to and inhibits the enzyme thymidylate synthase (TS), which catalyses the methylation of 2'-deoxyuridine-5'-monophosphate (dUMP) to 2'-deoxythymidine-5'-monophosphate (dTMP), an essential precursor in DNA synthesis.",
                                           meaning=NCIT.C61614)
    Temozolomide = PermissibleValue(text="Temozolomide",
                                               description="A triazene analog of dacarbazine with antineoplastic activity. As a cytotoxic alkylating agent, temozolomide is converted at physiologic pH to the short-lived active compound, monomethyl triazeno imidazole carboxamide (MTIC). The cytotoxicity of MTIC is due primarily to methylation of DNA at the O6 and N7 positions of guanine, resulting in inhibition of DNA replication. Unlike dacarbazine, which is metabolized to MITC only in the liver, temozolomide is metabolized to MITC at all sites. Temozolomide is administered orally and penetrates well into the central nervous system. (NCI04)",
                                               meaning=NCIT.C1244)
    Topotecan = PermissibleValue(text="Topotecan",
                                         description="A semisynthetic derivative of camptothecin, a cytotoxic, quinoline-based alkaloid extracted from the Asian tree Camptotheca acuminata. Topotecan inhibits topoisomerase I activity by stabilizing the topoisomerase I-DNA covalent complexes during S phase of cell cycle, thereby inhibiting religation of topoisomerase I-mediated single-strand DNA breaks and producing potentially lethal double-strand DNA breaks when encountered by the DNA replication machinery.",
                                         meaning=NCIT.C1413)
    Vincristine = PermissibleValue(text="Vincristine",
                                             description="A natural alkaloid isolated from the plant Vinca rosea Linn. Vincristine binds irreversibly to microtubules and spindle proteins in S phase of the cell cycle and interferes with the formation of the mitotic spindle, thereby arresting tumor cells in metaphase. This agent also depolymerizes microtubules and may also interfere with amino acid, cyclic AMP, and glutathione metabolism; calmodulin-dependent Ca++ -transport ATPase activity; cellular respiration; and nucleic acid and lipid biosynthesis. (NCI04)",
                                             meaning=NCIT.C933)
    Vismodegib = PermissibleValue(text="Vismodegib",
                                           description="An orally bioavailable, small molecule inhibitor of SMO and the Hedgehog (Hh) pathway, with potential antineoplastic activity. Upon oral administration, vismodegib targets, binds to and inhibits the cell membrane-spanning G-protein coupled receptor SMO, which may result in the suppression of Hh pathway signaling and a decrease in tumor cell proliferation and survival. SMO is activated upon binding of Hh ligand to the cell surface receptor Patched (PTCH); inappropriate activation of Hh signaling and uncontrolled cellular proliferation may be associated with SMO mutations.",
                                           meaning=NCIT.C74038)
    Vorinostat = PermissibleValue(text="Vorinostat",
                                           description="A synthetic hydroxamic acid derivative with antineoplastic activity. Vorinostat, a second generation polar-planar compound, binds to the catalytic domain of the histone deacetylases (HDACs). This allows the hydroxamic moiety to chelate zinc ion located in the catalytic pockets of HDAC, thereby inhibiting deacetylation and leading to an accumulation of both hyperacetylated histones and transcription factors. Hyperacetylation of histone proteins results in the upregulation of the cyclin-dependant kinase p21, followed by G1 arrest. Hyperacetylation of non-histone proteins such as tumor suppressor p53, alpha tubulin, and heat-shock protein 90 produces additional anti-proliferative effects. This agent also induces apoptosis and sensitizes tumor cells to cell death processes. Vorinostat crosses the blood-brain barrier.",
                                           meaning=NCIT.C1796)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Plerixafor = PermissibleValue(text="Plerixafor",
                                           description="A bicyclam with hematopoietic stem cell-mobilizing activity. Plerixafor blocks the binding of stromal cell-derived factor (SDF-1alpha) to the cellular receptor CXCR4, resulting in hematopoietic stem cell (HSC) release from bone marrow and HSC movement into the peripheral circulation.",
                                           meaning=NCIT.C1777)
    Amifostine = PermissibleValue(text="Amifostine",
                                           description="The trihydrate form of a phosphorylated aminosulfhydryl compound. After dephosphorylation of amifostine by alkaline phosphatase to an active free sulfhydryl (thiol) metabolite, the thiol metabolite binds to and detoxifies cytotoxic platinum-containing metabolites of cisplatin and scavenges free radicals induced by cisplatin and ionizing radiation. The elevated activity of this agent in normal tissues results from both the relative abundance of alkaline phosphatase in normal tissues and the greater vascularity of normal tissues compared to tumor tissues.",
                                           meaning=NCIT.C488)
    Bleomycin = PermissibleValue(text="Bleomycin",
                                         description="A mixture of glycopeptide antineoplastic antibiotics isolated from the bacterium Streptomyces verticillus. Bleomycin forms complexes with iron that reduce molecular oxygen to superoxide and hydroxyl radicals which cause single- and double-stranded breaks in DNA; these reactive oxygen species also induce lipid peroxidation, carbohydrate oxidation, and alterations in prostaglandin synthesis and degradation.",
                                         meaning=NCIT.C313)
    Dactinomycin = PermissibleValue(text="Dactinomycin",
                                               description="A chromopeptide antineoplastic antibiotic isolated from the bacterium Streptomyces parvulus. Dactinomycin intercalates between adjacent guanine-cytosine base pairs, blocking the transcription of DNA by RNA polymerase; it also causes single-strand DNA breaks, possibly via a free-radical intermediate or an interaction with topoisomerase II. (NCI04)",
                                               meaning=NCIT.C412)
    Paclitaxel = PermissibleValue(text="Paclitaxel",
                                           description="A compound extracted from the Pacific yew tree Taxus brevifolia with antineoplastic activity. Paclitaxel binds to tubulin and inhibits the disassembly of microtubules, thereby resulting in the inhibition of cell division. This agent also induces apoptosis by binding to and blocking the function of the apoptosis inhibitor protein Bcl-2 (B-cell Leukemia 2). (NCI04)",
                                           meaning=NCIT.C1411)
    Vinblastine = PermissibleValue(text="Vinblastine",
                                             description="A natural alkaloid isolated from the plant Vinca rosea Linn. Vinblastine binds to tubulin and inhibits microtubule formation, resulting in disruption of mitotic spindle assembly and arrest of tumor cells in the M phase of the cell cycle. This agent may also interfere with amino acid, cyclic AMP, and glutathione metabolism; calmodulin-dependent Ca++ -transport ATPase activity; cellular respiration; and nucleic acid and lipid biosynthesis. (NCI04)",
                                             meaning=NCIT.C930)
    Bendamustine = PermissibleValue(text="Bendamustine",
                                               description="A bifunctional mechlorethamine derivative with alkylating and antimetabolite activities. Although the exact mechanism of action of bendamustine is unknown, this agent appears to alkylate and crosslink macromolecules, resulting in DNA, RNA and protein synthesis inhibition, and eventually the induction of apoptosis.",
                                               meaning=NCIT.C73261)
    Carmustine = PermissibleValue(text="Carmustine",
                                           description="An antineoplastic nitrosourea. Carmustine alkylates and cross-links DNA during all phases of the cell cycle, resulting in disruption of DNA function, cell cycle arrest, and apoptosis. This agent also carbamoylates proteins, including DNA repair enzymes, resulting in an enhanced cytotoxic effect. Carmustine is highly lipophilic and crosses the blood-brain barrier readily. (NCI04)",
                                           meaning=NCIT.C349)
    Dacarbazine = PermissibleValue(text="Dacarbazine",
                                             description="A triazene derivative with antineoplastic activity. Dacarbazine alkylates and cross-links DNA during all phases of the cell cycle, resulting in disruption of DNA function, cell cycle arrest, and apoptosis. (NCI04)",
                                             meaning=NCIT.C411)
    Dexamethasone = PermissibleValue(text="Dexamethasone",
                                                 description="A synthetic adrenal corticosteroid with potent anti-inflammatory properties. In addition to binding to specific nuclear steroid receptors, dexamethasone also interferes with NF-kB activation and apoptotic pathways. This agent lacks the salt-retaining properties of other related adrenal hormones. (NCI04)",
                                                 meaning=NCIT.C422)
    Etopophos = PermissibleValue(text="Etopophos",
                                         description="A phosphate salt of a semisynthetic derivative of podophyllotoxin. Etoposide binds to the enzyme topoisomerase II, inducing double-strand DNA breaks, inhibiting DNA repair, and resulting in decreased DNA synthesis and tumor cell proliferation. Cells in the S and G2 phases of the cell cycle are most sensitive to this agent. (NCI04)",
                                         meaning=NCIT.C1093)
    Nivolumab = PermissibleValue(text="Nivolumab",
                                         description="A fully human immunoglobulin (Ig) G4 monoclonal antibody directed against the negative immunoregulatory human cell surface receptor programmed death-1 (PD-1, PCD-1) with immune checkpoint inhibitory and antineoplastic activities. Upon administration, nivolumab binds to and blocks the activation of PD-1, an immunoglobulin superfamily (IgSF) transmembrane protein, by its ligands programmed cell death ligand 1 (PD-L1), which is overexpressed on certain cancer cells, and programmed cell death ligand 2 (PD-L2), which is primarily expressed on antigen-presenting cells (APCs). This results in the activation of T-cells and cell-mediated immune responses against tumor cells. Activated PD-1 negatively regulates T-cell activation and plays a key role in tumor evasion from host immunity.",
                                         meaning=NCIT.C68814)
    Pembroluzimab = PermissibleValue(text="Pembroluzimab",
                                                 description="A humanized monoclonal immunoglobulin (Ig) G4 antibody directed against human cell surface receptor PD-1 (programmed death-1 or programmed cell death-1) with potential immune checkpoint inhibitory and antineoplastic activities. Upon administration, pembrolizumab binds to PD-1, an inhibitory signaling receptor expressed on the surface of activated T cells, and blocks the binding to and activation of PD-1 by its ligands, which results in the activation of T-cell-mediated immune responses against tumor cells. The ligands for PD-1 include programmed cell death ligand 1 (PD-L1), overexpressed on certain cancer cells, and programmed cell death ligand 2 (PD-L2), which is primarily expressed on APCs. Activated PD-1 negatively regulates T-cell activation and plays a key role in in tumor evasion from host immunity.",
                                                 meaning=NCIT.C106432)
    Prednisone = PermissibleValue(text="Prednisone",
                                           description="A synthetic glucocorticoid with anti-inflammatory and immunomodulating properties. After cell surface receptor attachment and cell entry, prednisone enters the nucleus where it binds to and activates specific nuclear receptors, resulting in an altered gene expression and inhibition of proinflammatory cytokine production. This agent also decreases the number of circulating lymphocytes, induces cell differentiation, and stimulates apoptosis in sensitive tumor cell populations.",
                                           meaning=NCIT.C770)
    Procarbazine = PermissibleValue(text="Procarbazine",
                                               description="A methylhydrazine derivative with antineoplastic and mutagenic activities. Although the exact mode of cytotoxicity has not been elucidated, procarbazine, after metabolic activation, appears to inhibit the trans-methylation of methionine into transfer RNA (t-RNA), thereby preventing protein synthesis and consequently DNA and RNA synthesis. This agent may also undergo auto-oxidation, resulting in the formation of cytotoxic free radicals which damage DNA through an alkylation reaction.",
                                               meaning=NCIT.C62072)
    Venoreline = PermissibleValue(text="Venoreline",
                                           description="A semisynthetic vinca alkaloid. Vinorelbine binds to tubulin and prevents formation of the mitotic spindle, resulting in the arrest of tumor cell growth in metaphase. This agent may also interfere with amino acid, cyclic AMP. and glutathione metabolism; calmodulin-dependent Ca++ -transport ATPase activity; cellular respiration; and nucleic acid and lipid biosynthesis.",
                                           meaning=NCIT.C1275)
    Erythropoeitin = PermissibleValue(text="Erythropoeitin",
                                                   description="Erythropoietin (193 aa, ~21 kDa) is encoded by the human EPO gene. This protein plays a role in both erythropoiesis and the maintenance of red blood cell volume.",
                                                   meaning=NCIT.C20429)
    Filgrastim = PermissibleValue(text="Filgrastim",
                                           description="A recombinant, non-glycosylated cytokine which is chemically identical to or similar to the endogenous cytokine human granulocyte colony-stimulating factor (G-CSF) isoform B, with immunomodulating activity. Filgrastim binds to and activates G-CSF receptors with the same biological activity and stability as the endogenous cytokine, thereby controlling the production, differentiation, and function of neutrophilic granulocyte progenitors.",
                                           meaning=NCIT.C1474)
    Morphine = PermissibleValue(text="Morphine",
                                       description="An opiate alkaloid isolated from the plant Papaver somniferum and produced synthetically. Morphine binds to and activates specific opiate receptors (delta, mu and kappa), each of which are involved in controlling different brain functions. In the central nervous and gastrointestinal systems, this agent exhibits widespread effects including analgesia, anxiolysis, euphoria, sedation, respiratory depression, and gastrointestinal system smooth muscle contraction. (NCI04)",
                                       meaning=NCIT.C62051)
    Gabapentin = PermissibleValue(text="Gabapentin",
                                           description="A synthetic analogue of the neurotransmitter gamma-aminobutyric acid with anticonvulsant activity. Although its exact mechanism of action is unknown, gabapentin appears to inhibit excitatory neuron activity. This agent also exhibits analgesic properties. (NCI04)",
                                           meaning=NCIT.C1108)
    Cabozantinib = PermissibleValue(text="Cabozantinib",
                                               description="An orally bioavailable, small molecule receptor tyrosine kinase (RTK) inhibitor with potential antineoplastic activity. Cabozantinib strongly binds to and inhibits several RTKs, which are often overexpressed in a variety of cancer cell types, including hepatocyte growth factor receptor (MET), RET (rearranged during transfection), vascular endothelial growth factor receptor types 1 (VEGFR-1), 2 (VEGFR-2), and 3 (VEGFR-3), mast/stem cell growth factor (KIT), FMS-like tyrosine kinase 3 (FLT-3), TIE-2 (TEK tyrosine kinase, endothelial), tropomyosin-related kinase B (TRKB) and AXL. This may result in an inhibition of both tumor growth and angiogenesis, and eventually lead to tumor regression.",
                                               meaning=NCIT.C52200)
    Denosumab = PermissibleValue(text="Denosumab",
                                         description="A fully human monoclonal antibody directed against the receptor activator of nuclear factor kappa beta ligand (RANKL) with antiosteoclast activity. Denosumab specifically binds to RANKL and blocks the interaction of RANKL with RANK, a receptor located on osteoclast cell surfaces, resulting in inhibition of osteoclast activity, a decrease in bone resorption, and a potential increase in bone mineral density. RANKL, a protein expressed by osteoblastic cells, plays an important role in osteoclastic differentiation and activation.",
                                         meaning=NCIT.C61313)
    Dinutuximab = PermissibleValue(text="Dinutuximab",
                                             description="A chimeric mouse/human monoclonal antibody with potential antineoplastic activity. Dinutuximab binds to the ganglioside GD2 and induces antibody-dependent cell-mediated cytotoxicity and complement-dependent cytotoxicity against GD2-expressing tumor cells. GD2 is overexpressed in malignant melanoma, neuroblastoma, osteosarcoma, and small cell carcinoma of the lung.",
                                             meaning=NCIT.C1570)
    Docetaxel = PermissibleValue(text="Docetaxel",
                                         description="A semi-synthetic, second-generation taxane derived from a compound found in the European yew tree, Taxus baccata. Docetaxel displays potent and broad antineoplastic properties; it binds to and stabilizes tubulin, thereby inhibiting microtubule disassembly which results in cell- cycle arrest at the G2/M phase and cell death. This agent also inhibits pro-angiogenic factors such as vascular endothelial growth factor (VEGF) and displays immunomodulatory and pro-inflammatory properties by inducing various mediators of the inflammatory response. Docetaxel has been studied for use as a radiation-sensitizing agent. (NCI04)",
                                         meaning=NCIT.C1526)
    Glembatumumab = PermissibleValue(text="Glembatumumab",
                                                 description="A human monoclonal antibody against transmembrane glycoprotein non-metastatic melanoma protein B (GPNMB). Glembatumumab binds to GPNMB on cancer cells, but alone does not appear to inhibit cancer cell growth. However, this antibody could be utilized to deliver a conjugated cytotoxic agent to GPNMB-expressing tumor cells. GPNMB, overexpressed on the surface of various cancer cells, plays a key role in cancer cell proliferation.",
                                                 meaning=NCIT.C84520)
    Interferon = PermissibleValue(text="Interferon",
                                           description="Human interferons have been classified into 3 groups: alpha, beta, and gamma. Both alpha- and beta-IFNs, previously designated type I, are acid-stable, but they differ immunologically and in regard to some biologic and physiochemical properties. The IFNs produced by virus-stimulated leukocytes (leukocyte IFNs) are predominantly of the alpha type. Those produced by lymphoblastoid cells are about 90% alpha and 10% beta. Induced fibroblasts produce mainly or exclusively the beta type. The alpha- and beta-IFNs differ widely in amino acid sequence. The gamma or immune IFNs, which are produced by T lymphocytes in response to mitogens or to antigens to which they are sensitized, are acid-labile and serologically distinct from alpha- and beta-IFNs. (from OMIM 147570)",
                                           meaning=NCIT.C20493)
    Mifamurtide = PermissibleValue(text="Mifamurtide",
                                             description="A liposomal formulation containing a muramyl dipeptide (MDP) analogue with potential immunomodulatory and antineoplastic activities. Muramyl tripeptide phosphatidylethanolamine (MTP-PE), a derivative of the mycobacterial cell wall component MDP, activates both monocytes and macrophages. Activated macrophages secrete cytokines and induce the recruitment and activation of other immune cells, which may result in indirect tumoricidal effects. Liposomal encapsulation of MTP-PE prolongs its half-life and enhances tissue targeting.",
                                             meaning=NCIT.C1394)
    Regorafenib = PermissibleValue(text="Regorafenib",
                                             description="The anhydrous form of regorafenib, an orally bioavailable small molecule with potential antiangiogenic and antineoplastic activities. Regorafenib binds to and inhibits vascular endothelial growth factor receptors (VEGFRs) 2 and 3, and Ret, Kit, PDGFR and Raf kinases, which may result in the inhibition of tumor angiogenesis and tumor cell proliferation. VEGFRs are receptor tyrosine kinases that play important roles in tumor angiogenesis; the receptor tyrosine kinases RET, KIT, and PDGFR, and the serine/threonine-specific Raf kinase are involved in tumor cell signaling.",
                                             meaning=NCIT.C78204)

    _defn = EnumDefinition(
        name="MedicationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Arsenic Trioxide",
                PermissibleValue(text="Arsenic Trioxide",
                                 description="A small-molecule arsenic compound with antineoplastic activity. The mechanism of action of arsenic trioxide is not completely understood. This agent causes damage to or degradation of the promyelocytic leukemia protein/retinoic acid receptor-alpha (PML/RARa) fusion protein; induces apoptosis in acute promyelocytic leukemia (APL) cells and in many other tumor cell types; promotes cell differentiation and suppresses cell proliferation in many different tumor cell types; and is pro-angiogenic. (NCI04)",
                                 meaning=NCIT.C1005) )
        setattr(cls, "Daunorubicin (Liposomal)",
                PermissibleValue(text="Daunorubicin (Liposomal)",
                                 description="A liposome-encapsulated form of the citrate salt of the anthracycline antineoplastic antibiotic daunorubicin. Daunorubicin intercalates into DNA and interacts with topoisomerase II, thereby inhibiting DNA replication and repair and RNA and protein synthesis. Liposomal delivery of doxorubicin citrate improves drug penetration into tumors and decreases drug clearance, thereby increasing the duration of therapeutic drug effects.",
                                 meaning=NCIT.C2213) )
        setattr(cls, "Daunorubicin and Cytarabine (Liposomal)",
                PermissibleValue(text="Daunorubicin and Cytarabine (Liposomal)",
                                 description="A liposomal formulation containing a fixed combination of the antineoplastic agents cytarabine and daunorubicin in a 5:1 molar ratio. Liposome-encapsulated daunorubicin-cytarabine has been designed to provide optimal delivery of a specific ratio of cytarabine to daunorubicin, one that has been shown to be synergistic in vitro. The antimetabolite cytarabine competes with cytidine for incorporation into DNA, inhibiting DNA synthesis. This agent also inhibits DNA polymerase, resulting in a decrease in DNA replication and repair. Daunorubicin, an intercalator and a topoisomerase II inhibitor, prevents DNA replication and inhibits protein synthesis. This agent also generates oxygen free radicals, resulting in the cytotoxic lipid peroxidation of cell membrane lipids.",
                                 meaning=NCIT.C67504) )
        setattr(cls, "Gemtuzumab Ozogamicin",
                PermissibleValue(text="Gemtuzumab Ozogamicin",
                                 description="A recombinant, humanized anti-CD33 monoclonal antibody attached to the cytotoxic antitumor antibiotic calicheamicin. In this conjugate, the antibody binds to and is internalized by tumor cells expressing CD33 antigen (a sialic acid-dependent glycoprotein commonly found on the surface of leukemic blasts), thereby delivering the attached calicheamicin to CD33-expressing tumor cells. Calicheamicin binds to the minor groove of DNA, causing double strand DNA breaks and resulting in inhibition of DNA synthesis. (NCI04)",
                                 meaning=NCIT.C1806) )
        setattr(cls, "Hydrocortisone Sodium Succinate",
                PermissibleValue(text="Hydrocortisone Sodium Succinate",
                                 description="The sodium salt of hydrocortisone succinate with glucocorticoid property. Hydrocortisone sodium succinate is chemically similar to the endogenous hormone that stimulates anti-inflammatory and immunosuppressive activities, in addition to exhibiting minor mineralocorticoid effects. This agent binds to intracellular glucocorticoid receptors and is translocated into the nucleus, where it initiates the transcription of glucocorticoid-responsive genes, such as various cytokines and lipocortins. Lipocortins inhibit phospholipase A2, thereby blocking the release of arachidonic acid from membrane phospholipids and preventing the synthesis of prostaglandins and leukotrienes, both potent mediators of inflammation.",
                                 meaning=NCIT.C1819) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Etoposide Phosphate",
                PermissibleValue(text="Etoposide Phosphate",
                                 description="A phosphate salt of a semisynthetic derivative of podophyllotoxin. Etoposide binds to the enzyme topoisomerase II, inducing double-strand DNA breaks, inhibiting DNA repair, and resulting in decreased DNA synthesis and tumor cell proliferation. Cells in the S and G2 phases of the cell cycle are most sensitive to this agent. (NCI04)",
                                 meaning=NCIT.C1093) )
        setattr(cls, "Sodium Thiosulfate",
                PermissibleValue(text="Sodium Thiosulfate",
                                 description="A water soluble salt and reducing agent that reacts with oxidizing agents.  Although its exact mechanism of action is unknown, thiosulfate likely provides an exogenous source of sulfur, thereby hastening the detoxification of cyanide through the enzyme rhodanese (thiosulfate cyanide sulfurtransferase) which converts cyanide to the relatively nontoxic, excretable thiocyanate ion. In addition, this agent neutralizes the reactive alkylating species of nitrogen mustard, thereby decreasing skin toxicity related to nitrogen mustard extravasation. (NCI04)",
                                 meaning=NCIT.C1230) )
        setattr(cls, "Brentuximab Vedotin",
                PermissibleValue(text="Brentuximab Vedotin",
                                 description="An antibody-drug conjugate (ADC) directed against the tumor necrosis factor (TNF) receptor CD30 with potential antineoplastic activity. Brentuximab vedotin is generated by conjugating the chimeric anti-CD30 monoclonal antibody SGN-30 to the cytotoxic agent monomethyl auristatin E (MMAE) via a valine-citrulline peptide linker. Upon administration and internalization by CD30-positive tumor cells, brentuximab vedotin undergoes enzymatic cleavage, releasing MMAE into the cytosol; MMAE binds to tubulin and inhibits tubulin polymerization, which may result in G2/M phase arrest and tumor cell apoptosis. Transiently activated during lymphocyte activation, CD30 (tumor necrosis factor receptor superfamily, member 8;TNFRSF8) may be constitutively expressed in hematologic malignancies including Hodgkin lymphoma and some T-cell non-Hodgkin lymphomas. The linkage system in brentuximab vedotin is highly stable in plasma, resulting in cytotoxic specificity for CD30-positive cells.",
                                 meaning=NCIT.C66944) )
        setattr(cls, "Nitrogen Mustard",
                PermissibleValue(text="Nitrogen Mustard",
                                 description="A synthetic agent related to sulphur mustard with antineoplastic and immunosuppressive properties. Nitrogen mustard (a member of a family of chemotherapy agents including cyclophosphamide and chlorambucil) is an irritant and carcinogenic agent metabolized to a highly reactive ethylene immonium derivative; the ethylene immonium derivative alkylates DNA and inhibits DNA replication. This agent also exhibits lympholytic properties. (NCI04)",
                                 meaning=NCIT.C62056) )
        setattr(cls, "Systemic Corticosteroid",
                PermissibleValue(text="Systemic Corticosteroid",
                                 description="Treatment with corticosteroids via a delivery method that will affect the entire body (oral, intramuscular, intravenous).",
                                 meaning=NCIT.C122080) )
        setattr(cls, "Topical Corticosteroid",
                PermissibleValue(text="Topical Corticosteroid",
                                 description="Any synthetic steroid derivative exhibiting the same function as the naturally occurring corticosteroid hormone, formulated for topical application. Topical corticosteroids are applied to the skin where it exerts its effect, however, corticosteroids can be absorbed systemically after being applied locally. Topical corticosteroids are mainly used for the localized treatment of inflammation of the skin and help relieve symptoms such as itching, swelling and redness.",
                                 meaning=NCIT.C29505) )
        setattr(cls, "Non-Corticosteroid Immunosuppressive Agent",
                PermissibleValue(text="Non-Corticosteroid Immunosuppressive Agent",
                                 description="An immunosuppressive agent that is not a corticosteroid.",
                                 meaning=NCIT.C185652) )
        setattr(cls, "PEG-filgrastim",
                PermissibleValue(text="PEG-filgrastim",
                                 description="A long-acting pegylated form of a recombinant therapeutic agent which is chemically identical to or similar to an endogenous human granulocyte colony-stimulating factor (G-CSF). Produced endogenously by monocytes, fibroblasts, and endothelial cells, G-CSF binds to and activates specific cell surface receptors, stimulating neutrophil progenitor proliferation and differentiation and selected neutrophil functions. Conjugation of the cytokine with a branched polyethylene glycol molecule (pegylation) significantly increases its therapeutic half-life. (NCI04)",
                                 meaning=NCIT.C1854) )
        setattr(cls, "Thyroid Hormone Replacement",
                PermissibleValue(text="Thyroid Hormone Replacement",
                                 description="The sodium salt of levothyroxine, a synthetic levoisomer of thyroxine (T4) that is similar to the endogenous hormone produced by the thyroid gland. In peripheral tissues, levothyroxine is deiodinated by 5'-deiodinase to form triiodothyronine (T3). T3 enters the cell and binds to nuclear thyroid hormone receptors; the activated hormone-receptor complex in turn triggers gene expression and produces proteins required in the regulation of cellular respiration; thermogenesis; cellular growth and differentiation; and the metabolism of proteins, carbohydrates and lipids. T3 also exhibits cardiostimulatory effects.",
                                 meaning=NCIT.C888) )
        setattr(cls, "Zoledronic Acid",
                PermissibleValue(text="Zoledronic Acid",
                                 description="A synthetic imidazole bisphosphonate analog of pyrophosphate with anti-bone-resorption activity. A third-generation bisphosphonate, zoledronic acid binds to hydroxyapatite crystals in the bone matrix, slowing their dissolution and inhibiting the formation and aggregation of these crystals. This agent also inhibits farnesyl pyrophosphate synthase, an enzyme involved in terpenoid biosynthesis. Inhibition of this enzyme prevents the biosynthesis of isoprenoid lipids, donor substrates of farnesylation and geranylgeranylation during the post-translational modification of small GTPase signalling proteins, which are important in the process of osteoclast turnover. Decreased bone turnover and stabilization of the bone matrix contribute to the analgesic effect of zoledronic acid with respect to painful osteoblastic tumors. The agent also reduces serum calcium concentrations associated with hypercalcemia.",
                                 meaning=NCIT.C1699) )

class AdministrationStatusEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AdministrationStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Medication Administered",
                PermissibleValue(text="Medication Administered",
                                 description="An indication that medication was administered.",
                                 meaning=NCIT.C173298) )
        setattr(cls, "Medication Not Administered",
                PermissibleValue(text="Medication Not Administered",
                                 description="An indication that medication was not administered.",
                                 meaning=NCIT.C173299) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NonProtocolReasonEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NonProtocolReasonEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Prevention of Adverse Event",
                PermissibleValue(text="Prevention of Adverse Event",
                                 description="Practices or interventions to prevent an adverse event.",
                                 meaning=NCIT.C185654) )
        setattr(cls, "Stem Cell Mobilization",
                PermissibleValue(text="Stem Cell Mobilization",
                                 description="Therapy to cause release of stem cells from the bone marrow into the peripheral blood circulation for the purpose of collection.",
                                 meaning=NCIT.C62604) )
        setattr(cls, "Treatment for Adverse Event",
                PermissibleValue(text="Treatment for Adverse Event",
                                 description="Treatment administered to patients experiencing adverse events.",
                                 meaning=NCIT.C88082) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ConcomitantReasonEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ConcomitantReasonEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Treatment for Adverse Event",
                PermissibleValue(text="Treatment for Adverse Event",
                                 description="Treatment administered to patients experiencing adverse events.",
                                 meaning=NCIT.C88082) )
        setattr(cls, "Prevention of Adverse Event",
                PermissibleValue(text="Prevention of Adverse Event",
                                 description="Practices or interventions to prevent an adverse event.",
                                 meaning=NCIT.C185654) )
        setattr(cls, "Stem Cell Mobilization",
                PermissibleValue(text="Stem Cell Mobilization",
                                 description="Therapy to cause release of stem cells from the bone marrow into the peripheral blood circulation for the purpose of collection.",
                                 meaning=NCIT.C62604) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class RouteDetailEnum(EnumDefinitionImpl):

    Parenteral = PermissibleValue(text="Parenteral",
                                           description="Administration of a substance by some means other than through the gastrointestinal tract: usually through injection, infusion, or implantation. Predominantly, the drug action is systemic, but in some cases, it is confined to local area.",
                                           meaning=NCIT.C38291)
    Oral = PermissibleValue(text="Oral",
                               description="The introduction of a substance to the mouth or into the gastrointestinal tract by the way of the mouth, usually for systemic action. It is the most common, convenient, and usually the safest and least expensive route of drug administration, but it uses the most complicated pathway to the tissues and bioavailability varies. The disadvantages of method are hepatic first pass metabolism and enzymatic degradation of the drug within the gastrointestinal tract. This prohibits oral administration of certain classes of drugs especially peptides and proteins.",
                               meaning=NCIT.C38288)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="RouteDetailEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NormalizationBasisEnum(EnumDefinitionImpl):

    Weight = PermissibleValue(text="Weight",
                                   description="The weight of a subject.",
                                   meaning=NCIT.C81328)
    BSA = PermissibleValue(text="BSA",
                             description="A measure of the 2-dimensional extent of the body surface (i.e., the skin). Body surface area (BSA) can be calculated by mathematical formula or from a chart that relates height to weight. BSA is often an important factor in dosing.",
                             meaning=NCIT.C25157)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NormalizationBasisEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Flat/Fixed",
                PermissibleValue(text="Flat/Fixed",
                                 description="An indication that normalization was at a fixed or flat basis.",
                                 meaning=NCIT.C186692) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AdministrationSiteEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AdministrationSiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ProductEnum(EnumDefinitionImpl):

    RBC = PermissibleValue(text="RBC",
                             description="Red blood cells remaining after separating plasma from human blood, or collected by apheresis.",
                             meaning=NCIT.C133280)
    Platelets = PermissibleValue(text="Platelets",
                                         description="Platelets collected from a single donor and suspended in a specified volume of original plasma.",
                                         meaning=NCIT.C133278)
    WBC = PermissibleValue(text="WBC",
                             description="White blood cells intended as source material for further manufacturing use.",
                             meaning=NCIT.C133281)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="ProductEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ProductProcessingEnum(EnumDefinitionImpl):

    Apheresis = PermissibleValue(text="Apheresis",
                                         description="A procedure that collects a component of the peripheral blood while returning the rest to the donor.",
                                         meaning=NCIT.C15191)
    Random = PermissibleValue(text="Random",
                                   description="Governed by or depending on chance; lacking any definite plan or order or purpose.",
                                   meaning=NCIT.C60702)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ProductProcessingEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ProcedureEnum(EnumDefinitionImpl):

    Biopsy = PermissibleValue(text="Biopsy",
                                   description="The removal of tissue specimens or fluid from the living body for microscopic examination, performed to establish a diagnosis.",
                                   meaning=NCIT.C15189)
    Surgery = PermissibleValue(text="Surgery",
                                     description="A diagnostic or treatment procedure performed by manual and/or instrumental means, often involving an incision and the removal or replacement of a diseased organ or tissue; of or relating to or involving or used in surgery or requiring or amenable to treatment by surgery.",
                                     meaning=NCIT.C15329)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="ProcedureEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Fine Needle Aspiration",
                PermissibleValue(text="Fine Needle Aspiration",
                                 description="The removal of tissue or fluid with a thin needle for examination under a microscope.",
                                 meaning=NCIT.C15361) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Experimental Procedure",
                PermissibleValue(text="Experimental Procedure",
                                 description="A diagnostic or treatment procedure performed by manual and/or instrumental means, often involving an incision and the removal or replacement of a diseased organ or tissue; of or relating to or involving or used in surgery or requiring or amenable to treatment by surgery.",
                                 meaning=NCIT.C15329) )

class ExtentEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Equivocal = PermissibleValue(text="Equivocal",
                                         description="A laboratory test result that indicates that a specific disease, condition, or attribute being assessed is not clearly present or absent.",
                                         meaning=NCIT.C178921)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="ExtentEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Gross Total",
                PermissibleValue(text="Gross Total",
                                 description="Surgical removal of an entire visible tumor, with no obvious tumor detected on post-operative evaluation; microscopic residual disease may be present.",
                                 meaning=NCIT.C131672) )
        setattr(cls, "Partial Resection",
                PermissibleValue(text="Partial Resection",
                                 description="Surgical removal of a part of a tumor; some portion of the tumor is detectable on post-operative evaluation.",
                                 meaning=NCIT.C131680) )
        setattr(cls, "Subtotal Resection",
                PermissibleValue(text="Subtotal Resection",
                                 description="Surgical removal of a part of a lesion; some portion of the lesion is detectable on post-operative evaluation.",
                                 meaning=NCIT.C131680) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Complete Resection",
                PermissibleValue(text="Complete Resection",
                                 description="Complete clearance of the tumor with histologically proved negative margins.",
                                 meaning=NCIT.C175027) )

class OutcomeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="OutcomeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class HydrocephalusEnum(EnumDefinitionImpl):

    Papilledema = PermissibleValue(text="Papilledema",
                                             description="Swelling around the optic disc, usually due to increased intracranial pressure or pressure on the optic nerve by a tumor.",
                                             meaning=NCIT.C3307)
    No = PermissibleValue(text="No",
                           description="The non-affirmative response to a question.",
                           meaning=NCIT.C49487)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="HydrocephalusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class CsfDiversionEnum(EnumDefinitionImpl):

    No = PermissibleValue(text="No",
                           description="The non-affirmative response to a question.",
                           meaning=NCIT.C49487)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="CsfDiversionEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Shunt, NOS",
                PermissibleValue(text="Shunt, NOS",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649) )
        setattr(cls, "Ventriculoperitoneal Shunt",
                PermissibleValue(text="Ventriculoperitoneal Shunt",
                                 description="A therapeutic procedure that involves the placement of a tube in one of the ventricles of the brain to allow for drainage of cerebrospinal fluid (CSF) into the peritoneal cavity. It is used to relieve hydrocephalus.",
                                 meaning=NCIT.C168483) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SurgeryTypeLimbEnum(EnumDefinitionImpl):

    Amputation = PermissibleValue(text="Amputation",
                                           description="The surgical removal of all or part of a limb or other appendage.",
                                           meaning=NCIT.C15179)
    Excision = PermissibleValue(text="Excision",
                                       description="The surgical removal of a tumor, often as part of a biopsy and with healthy margins.",
                                       meaning=NCIT.C15232)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SurgeryTypeLimbEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Limb-salvage",
                PermissibleValue(text="Limb-salvage",
                                 description="A procedure to avoid amputation of an arm or leg.",
                                 meaning=NCIT.C16042) )
        setattr(cls, "Wide Resection",
                PermissibleValue(text="Wide Resection",
                                 description="Surgery to cut out the cancer and some healthy tissue around it.",
                                 meaning=NCIT.C94441) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MarginsEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MarginsEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "R0 - Complete Resection, Negative Margins",
                PermissibleValue(text="R0 - Complete Resection, Negative Margins",
                                 description="No detectable presence of residual tumor after treatment",
                                 meaning=NCIT.C139578) )
        setattr(cls, "R1 - Complete Resection, Positive Margins",
                PermissibleValue(text="R1 - Complete Resection, Positive Margins",
                                 description="Presence of microscopic residual tumor after treatment.",
                                 meaning=NCIT.C139579) )
        setattr(cls, "R2 - Gross Residual Disease",
                PermissibleValue(text="R2 - Gross Residual Disease",
                                 description="Presence of macroscopic residual tumor after treatment.",
                                 meaning=NCIT.C139580) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SurgicalComplicationsEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="SurgicalComplicationsEnum",
    )

class BiopsyTypeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="BiopsyTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Core Needle Biopsy",
                PermissibleValue(text="Core Needle Biopsy",
                                 description="The removal of a tissue sample using a needle with a relatively large diameter, for microscopic examination.",
                                 meaning=NCIT.C15680) )
        setattr(cls, "Incisional Biopsy",
                PermissibleValue(text="Incisional Biopsy",
                                 description="A surgical procedure in which part of a tumor is removed for microscopic examination.",
                                 meaning=NCIT.C15386) )
        setattr(cls, "Excisional Biopsy",
                PermissibleValue(text="Excisional Biopsy",
                                 description="A surgical procedure in which an entire tumor is removed for microscopic examination.",
                                 meaning=NCIT.C15385) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SurgeryTypeAmputationEnum(EnumDefinitionImpl):

    Disarticulation = PermissibleValue(text="Disarticulation",
                                                     description="The surgical separation of bones at a joint.",
                                                     meaning=NCIT.C175012)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SurgeryTypeAmputationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Amputation - Through Involved Bone",
                PermissibleValue(text="Amputation - Through Involved Bone",
                                 description="The surgical removal of all or part of a limb or other appendage.",
                                 meaning=NCIT.C15179) )
        setattr(cls, "Amputation - Proximal to Involved Bone",
                PermissibleValue(text="Amputation - Proximal to Involved Bone",
                                 description="A procedure to avoid amputation of an arm or leg.",
                                 meaning=NCIT.C16042) )
        setattr(cls, "Internal Hemipelvectomy",
                PermissibleValue(text="Internal Hemipelvectomy",
                                 description="Unilateral removal of the pelvic girdle by resecting the innominate bone while preserving the ipsilateral limb.",
                                 meaning=NCIT.C175013) )
        setattr(cls, "External Hemipelvectomy",
                PermissibleValue(text="External Hemipelvectomy",
                                 description="Unilateral removal of the pelvic girdle by resection of the innominate bone plus amputation of the ipsilateral limb.",
                                 meaning=NCIT.C175014) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SurgeryTypeLimbSalvageEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SurgeryTypeLimbSalvageEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Intra-Articular Resection",
                PermissibleValue(text="Intra-Articular Resection",
                                 description="A resection performed within a joint.",
                                 meaning=NCIT.C175015) )
        setattr(cls, "Extra-Articular Resection",
                PermissibleValue(text="Extra-Articular Resection",
                                 description="A resection that is done outside the joint.",
                                 meaning=NCIT.C175016) )
        setattr(cls, "Intercalary Resection",
                PermissibleValue(text="Intercalary Resection",
                                 description="A resection of a diaphyseal segment with the goal of preserving adjacent joints. This may include portions of the metaphysis and/or epiphysis depending on the extent of disease.",
                                 meaning=NCIT.C175017) )
        setattr(cls, "Internal Hemipelvectomy",
                PermissibleValue(text="Internal Hemipelvectomy",
                                 description="Unilateral removal of the pelvic girdle by resecting the innominate bone while preserving the ipsilateral limb.",
                                 meaning=NCIT.C175013) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ReconstructionTypeEnum(EnumDefinitionImpl):

    Endoprosthetic = PermissibleValue(text="Endoprosthetic",
                                                   description="An artificial device inserted to replace a missing part.",
                                                   meaning=NCIT.C175018)
    Arthrodesis = PermissibleValue(text="Arthrodesis",
                                             description="Surgical fixation or immobilization of a joint, performed to allow bones to fuse or join together.",
                                             meaning=NCIT.C52007)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ReconstructionTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Osteoarticular Allograft",
                PermissibleValue(text="Osteoarticular Allograft",
                                 description="Grafting bone and cartilage that has been obtained from an individual of the same species as the intended recipient.",
                                 meaning=NCIT.C175019) )
        setattr(cls, "Intercalary Allograft",
                PermissibleValue(text="Intercalary Allograft",
                                 description="Grafting a segment of long bone that is obtained from an individual of the same species as the intended recipient.",
                                 meaning=NCIT.C175020) )
        setattr(cls, "Allograft-Prosthetic",
                PermissibleValue(text="Allograft-Prosthetic",
                                 description="Grafting a composite of an allograft and a prosthetic device.",
                                 meaning=NCIT.C175021) )
        setattr(cls, "Non-Vascularized Autograft",
                PermissibleValue(text="Non-Vascularized Autograft",
                                 description="Harvesting a graft from the intended recipient that has no attached blood supply.",
                                 meaning=NCIT.C175022) )
        setattr(cls, "Vascularized Autograft",
                PermissibleValue(text="Vascularized Autograft",
                                 description="Harvesting a graft from the intended recipient that has attached blood supply.",
                                 meaning=NCIT.C175023) )
        setattr(cls, "Allograft + Vascularized Autograft",
                PermissibleValue(text="Allograft + Vascularized Autograft",
                                 description="The combination of a bone graft from a donor of the same species and a graft from the intended recipient that has attached arteries and veins.",
                                 meaning=NCIT.C175024) )
        setattr(cls, "Vascularized Autograft Endoprosthetic Composite",
                PermissibleValue(text="Vascularized Autograft Endoprosthetic Composite",
                                 description="The combination of a graft from the intended recipient that has attached arteries and veins and a prosthetic device intended for implant.",
                                 meaning=NCIT.C175025) )
        setattr(cls, "No Reconstruction",
                PermissibleValue(text="No Reconstruction",
                                 description="There was no surgical reconstruction performed.",
                                 meaning=NCIT.C175026) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Allograft and Vascularized Autograft",
                PermissibleValue(text="Allograft and Vascularized Autograft",
                                 description="The combination of a bone graft from a donor of the same species and a graft from the intended recipient that has attached arteries and veins.",
                                 meaning=NCIT.C175024) )

class ProcedureExtentEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ProcedureExtentEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Gross Total",
                PermissibleValue(text="Gross Total",
                                 description="Surgical removal of an entire visible tumor, with no obvious tumor detected on post-operative evaluation; microscopic residual disease may be present.",
                                 meaning=NCIT.C131672) )
        setattr(cls, "Complete Resection",
                PermissibleValue(text="Complete Resection",
                                 description="Complete clearance of the tumor with histologically proved negative margins.",
                                 meaning=NCIT.C175027) )
        setattr(cls, "Partial Resection",
                PermissibleValue(text="Partial Resection",
                                 description="Surgical removal of a part of a tumor; some portion of the tumor is detectable on post-operative evaluation.",
                                 meaning=NCIT.C131680) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MetLungMgmtEnum(EnumDefinitionImpl):

    Thoracotomy = PermissibleValue(text="Thoracotomy",
                                             description="A surgical procedure in which an large incision is made into the chest wall, for the purpose of accessing organs inside the thoracic cavity.",
                                             meaning=NCIT.C15337)
    Sternotomy = PermissibleValue(text="Sternotomy",
                                           description="Incision into or through the sternum.",
                                           meaning=NCIT.C25220)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Pneumonectomy = PermissibleValue(text="Pneumonectomy",
                                                 description="A lymph node located in the area below the clavicle.",
                                                 meaning=NCIT.C63705)
    Lobectomy = PermissibleValue(text="Lobectomy",
                                         description="Surgical removal of a lobe of an organ.",
                                         meaning=NCIT.C15272)

    _defn = EnumDefinition(
        name="MetLungMgmtEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Video-Assisted Thoroscopic Surgery",
                PermissibleValue(text="Video-Assisted Thoroscopic Surgery",
                                 description="Thoracic surgery that is aided by the use of a video camera.",
                                 meaning=NCIT.C63704) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Wedge Resection",
                PermissibleValue(text="Wedge Resection",
                                 description="Surgical removal of a triangular wedge shaped section of tissue.",
                                 meaning=NCIT.C51690) )

class LocalizationTechniqueEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="LocalizationTechniqueEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Navigation and Robotics",
                PermissibleValue(text="Navigation and Robotics",
                                 description="A surgical technique that uses a specially designed robotic system to aid with the surgical procedure.",
                                 meaning=NCIT.C140885) )
        setattr(cls, "Indocyanine Green (ICG) Fluorescence Angiography",
                PermissibleValue(text="Indocyanine Green (ICG) Fluorescence Angiography",
                                 description="A diagnostic imaging procedure to examine blood flow and associated pathology using intravenous indocyanine green dye.",
                                 meaning=NCIT.C175030) )
        setattr(cls, "Methylene Blue Dye Marking",
                PermissibleValue(text="Methylene Blue Dye Marking",
                                 description="The use of methylene blue, a commonly used stain to enhance tissue specimens viewed under a microscope.",
                                 meaning=NCIT.C175031) )
        setattr(cls, "Wire Localization",
                PermissibleValue(text="Wire Localization",
                                 description="A procedure involving the use of a wire for the localization of a usually non-palpable breast lesion that needs to be surgically removed.",
                                 meaning=NCIT.C91832) )
        setattr(cls, "None",
                PermissibleValue(text="None",
                                 description="No person or thing, nobody, not any.",
                                 meaning=NCIT.C41132) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NumberNodesEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NumberNodesEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Single Lymph Node",
                PermissibleValue(text="Single Lymph Node",
                                 description="One lymph node affected.",
                                 meaning=NCIT.C185519) )
        setattr(cls, "Multiple Lymph Nodes",
                PermissibleValue(text="Multiple Lymph Nodes",
                                 description="More than one lymph node affected.",
                                 meaning=NCIT.C185518) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ProcedurePurposeEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ProcedurePurposeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Initial Diagnostic Procedure",
                PermissibleValue(text="Initial Diagnostic Procedure",
                                 description="The first procedure to diagnose a condition.",
                                 meaning=NCIT.C185527) )
        setattr(cls, "Second Look Surgery to Attempt Total Resection",
                PermissibleValue(text="Second Look Surgery to Attempt Total Resection",
                                 description="A biopsy to check for possible recurrence of disease.",
                                 meaning=NCIT.C185528) )
        setattr(cls, "Biopsy of Distant Site for Staging",
                PermissibleValue(text="Biopsy of Distant Site for Staging",
                                 description="The first procedure to diagnose a condition.",
                                 meaning=NCIT.C185527) )
        setattr(cls, "Diagnostic Biopsy for Possible Recurrence",
                PermissibleValue(text="Diagnostic Biopsy for Possible Recurrence",
                                 description="A second attempt to perform a total resection.",
                                 meaning=NCIT.C185534) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AmputationTypeEnum(EnumDefinitionImpl):

    Disarticulation = PermissibleValue(text="Disarticulation",
                                                     description="The surgical separation of bones at a joint.",
                                                     meaning=NCIT.C175012)
    Rotationplasty = PermissibleValue(text="Rotationplasty",
                                                   description="A surgical procedure used to treat malignant bone tumors near the knee in which the bottom of the femur and the upper tibia are surgically removed and the lower leg is rotated 180 degrees and re-attached to the femur. The foot and ankle then function as a substitute knee joint allowing for comparable stability to a below-the-knee amputation when placed in a prosthetic.",
                                                   meaning=NCIT.C180346)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AmputationTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Amputation - Through Involved Bone",
                PermissibleValue(text="Amputation - Through Involved Bone",
                                 description="The surgical removal of all or part of a limb or other appendage.",
                                 meaning=NCIT.C15179) )
        setattr(cls, "Amputation - Proximal to Involved Bone",
                PermissibleValue(text="Amputation - Proximal to Involved Bone",
                                 description="A procedure to avoid amputation of an arm or leg.",
                                 meaning=NCIT.C16042) )
        setattr(cls, "Internal Hemipelvectomy",
                PermissibleValue(text="Internal Hemipelvectomy",
                                 description="Unilateral removal of the pelvic girdle by resecting the innominate bone while preserving the ipsilateral limb.",
                                 meaning=NCIT.C175013) )
        setattr(cls, "External Hemipelvectomy",
                PermissibleValue(text="External Hemipelvectomy",
                                 description="Unilateral removal of the pelvic girdle by resection of the innominate bone plus amputation of the ipsilateral limb.",
                                 meaning=NCIT.C175014) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ResectionTypeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ResectionTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Craniofacial Resection",
                PermissibleValue(text="Craniofacial Resection",
                                 description="A surgical procedure to remove part of the craniofacial structure.",
                                 meaning=NCIT.C180345) )
        setattr(cls, "Resection with Reconstruction",
                PermissibleValue(text="Resection with Reconstruction",
                                 description="A surgical procedure to remove a diseased area and to reconstruct the area resected.",
                                 meaning=NCIT.C180342) )
        setattr(cls, "Resection without Reconstruction",
                PermissibleValue(text="Resection without Reconstruction",
                                 description="A surgical procedure to remove a diseased area without reconstruction of the area resected.",
                                 meaning=NCIT.C180343) )
        setattr(cls, "Intra-Articular Resection",
                PermissibleValue(text="Intra-Articular Resection",
                                 description="A resection performed within a joint.",
                                 meaning=NCIT.C175015) )
        setattr(cls, "Extra-Articular Resection",
                PermissibleValue(text="Extra-Articular Resection",
                                 description="A resection that is done outside the joint.",
                                 meaning=NCIT.C175016) )
        setattr(cls, "Axial Skeleton Resection",
                PermissibleValue(text="Axial Skeleton Resection",
                                 description="A surgical procedure to remove part of the axial skeleton.",
                                 meaning=NCIT.C180344) )
        setattr(cls, "Intercalary Resection",
                PermissibleValue(text="Intercalary Resection",
                                 description="A resection of a diaphyseal segment with the goal of preserving adjacent joints. This may include portions of the metaphysis and/or epiphysis depending on the extent of disease.",
                                 meaning=NCIT.C175017) )
        setattr(cls, "Internal Hemipelvectomy",
                PermissibleValue(text="Internal Hemipelvectomy",
                                 description="Unilateral removal of the pelvic girdle by resecting the innominate bone while preserving the ipsilateral limb.",
                                 meaning=NCIT.C175013) )
        setattr(cls, "Not reported",
                PermissibleValue(text="Not reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class HemipelvectomyTypeEnum(EnumDefinitionImpl):

    Internal = PermissibleValue(text="Internal",
                                       description="Unilateral removal of the pelvic girdle by resecting the innominate bone while preserving the ipsilateral limb.",
                                       meaning=NCIT.C175013)
    External = PermissibleValue(text="External",
                                       description="Unilateral removal of the pelvic girdle by resection of the innominate bone plus amputation of the ipsilateral limb.",
                                       meaning=NCIT.C175014)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="HemipelvectomyTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class HemipelvectomySiteEnum(EnumDefinitionImpl):

    Ilium = PermissibleValue(text="Ilium",
                                 description="The broad, dorsal, upper, and widest of the three principal bones composing either half of the pelvis.",
                                 meaning=NCIT.C32765)
    Ischium = PermissibleValue(text="Ischium",
                                     description="The most posterior and ventral bone making up the pelvis.",
                                     meaning=NCIT.C32884)
    Sacrum = PermissibleValue(text="Sacrum",
                                   description="The triangular bone, made up of 5 fused bones of the spine, located in the lower area of the spine between the fifth lumbar vertebra and the coccyx.",
                                   meaning=NCIT.C33508)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="HemipelvectomySiteEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Para-Acetabulum",
                PermissibleValue(text="Para-Acetabulum",
                                 description="The area around the acetabulum.",
                                 meaning=NCIT.C186705) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class IntraopAdjuvantEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="IntraopAdjuvantEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Navigation and Robotics",
                PermissibleValue(text="Navigation and Robotics",
                                 description="A surgical technique that uses a specially designed robotic system to aid with the surgical procedure.",
                                 meaning=NCIT.C140885) )
        setattr(cls, "Indocyanine Green (ICG) Fluorescence Angiography",
                PermissibleValue(text="Indocyanine Green (ICG) Fluorescence Angiography",
                                 description="A diagnostic imaging procedure to examine blood flow and associated pathology using intravenous indocyanine green dye.",
                                 meaning=NCIT.C175030) )
        setattr(cls, "Methylene Blue Dye Marking",
                PermissibleValue(text="Methylene Blue Dye Marking",
                                 description="The use of methylene blue, a commonly used stain to enhance tissue specimens viewed under a microscope.",
                                 meaning=NCIT.C175031) )
        setattr(cls, "Wire Localization",
                PermissibleValue(text="Wire Localization",
                                 description="A procedure involving the use of a wire for the localization of a usually non-palpable breast tumor that needs to be surgically removed.",
                                 meaning=NCIT.C91832) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class LaserTypeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="LaserTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class LaserPowerEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="LaserPowerEnum",
    )

class LaserDurationEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="LaserDurationEnum",
    )

class ModificationEnum(EnumDefinitionImpl):

    Substitution = PermissibleValue(text="Substitution",
                                               description="The act of putting one thing or person in the place of another.",
                                               meaning=NCIT.C54071)
    Discontinued = PermissibleValue(text="Discontinued",
                                               description="To stop or end, permanently or temporarily.",
                                               meaning=NCIT.C25484)
    Delayed = PermissibleValue(text="Delayed",
                                     description="Time during which some action is awaited; inactivity resulting in something being put off until a later time; the state of being slower or later.",
                                     meaning=NCIT.C25476)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ModificationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Dose Reduction",
                PermissibleValue(text="Dose Reduction",
                                 description="An indication that a medication schedule was modified by subtraction, either by changing the frequency, strength or amount.    ",
                                 meaning=NCIT.C49505) )
        setattr(cls, "New Agent Addition",
                PermissibleValue(text="New Agent Addition",
                                 description="The addition of a new drug to a treatment.    ",
                                 meaning=NCIT.C185633) )
        setattr(cls, "Not Given",
                PermissibleValue(text="Not Given",
                                 description="There was no excuse provided.",
                                 meaning=NCIT.C106487) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ModificationBasisEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ModificationBasisEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Per Protocol",
                PermissibleValue(text="Per Protocol",
                                 description="Subject is receiving treatment based on protocol.    ",
                                 meaning=NCIT.C181023) )
        setattr(cls, "Clinical Indication",
                PermissibleValue(text="Clinical Indication",
                                 description="Signs and/or symptoms leading a practitioner to recommend a particular clinical intervention.    ",
                                 meaning=NCIT.C185637) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ReasonEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ReasonEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Hematologic Toxicity",
                PermissibleValue(text="Hematologic Toxicity",
                                 description="A treatment designed to reduce or prevent damage to the hematologic system due to adverse events from other drug therapies.",
                                 meaning=NCIT.C15474) )
        setattr(cls, "Non-Hematologic Toxicity",
                PermissibleValue(text="Non-Hematologic Toxicity",
                                 description="A toxicity that impairs or damages other than the hematologic system.    ",
                                 meaning=NCIT.C185641) )
        setattr(cls, "Surgical Complications",
                PermissibleValue(text="Surgical Complications",
                                 description="A disease or disorder that occurs during, soon after or as a result of a surgical procedure.",
                                 meaning=NCIT.C164157) )
        setattr(cls, "Scheduling Issues",
                PermissibleValue(text="Scheduling Issues",
                                 description="A problem scheduling an event.    ",
                                 meaning=NCIT.C1685642) )
        setattr(cls, "Drug Not Available",
                PermissibleValue(text="Drug Not Available",
                                 description="A particular drug is unavailable.    ",
                                 meaning=NCIT.C185643) )
        setattr(cls, "Subject Non-Compliance",
                PermissibleValue(text="Subject Non-Compliance",
                                 description="Failure of a patient to follow medical advice, take medication as directed, or adhere to a prescribed course of treatment.",
                                 meaning=NCIT.C91752) )
        setattr(cls, "Pre-Existing Organ Dysfunction",
                PermissibleValue(text="Pre-Existing Organ Dysfunction",
                                 description="Organ dysfunction that was present prior to evaluation.    ",
                                 meaning=NCIT.C185644) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ToxicityDetailEnum(EnumDefinitionImpl):

    Infection = PermissibleValue(text="Infection",
                                         description="The invasion of an organism's body tissues by disease-causing agents and their multiplication, as well as the reaction by the host to these organisms and/or toxins that the organisms produce.",
                                         meaning=NCIT.C128320)
    Mucositis = PermissibleValue(text="Mucositis",
                                         description="Inflammation of the mucous membranes.",
                                         meaning=NCIT.C115965)
    Neutropenia = PermissibleValue(text="Neutropenia",
                                             description="A decrease in the number of neutrophils in the peripheral blood.",
                                             meaning=NCIT.C80520)
    Thrombocytopenia = PermissibleValue(text="Thrombocytopenia",
                                                       description="A laboratory test result indicating that there is an abnormally small number of platelets in the circulating blood.",
                                                       meaning=NCIT.C3408)
    Neuropathy = PermissibleValue(text="Neuropathy",
                                           description="A disorder affecting the cranial nerves or the peripheral nervous system. It manifests with pain, tingling, numbness, and muscle weakness. It may be the result of physical injury, toxic substances, viral diseases, diabetes, renal failure, cancer, and drugs.",
                                           meaning=NCIT.C4731)
    Rashes = PermissibleValue(text="Rashes",
                                   description="Any change in the skin which affects its appearance or texture. A rash may be localized to one part of the body, or affect all the skin. Rashes may cause the skin to change color, itch, become warm, bumpy, dry, cracked or blistered, swell and may be painful.    ",
                                   meaning=NCIT.C39594)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="ToxicityDetailEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Allergic Reaction",
                PermissibleValue(text="Allergic Reaction",
                                 description="An immune response that occurs following re-exposure to an innocuous antigen, and that requires the presence of existing antibodies against that antigen. This response involves the binding of IgE to mast cells, and may worsen with repeated exposures.",
                                 meaning=NCIT.C114476) )
        setattr(cls, "Renal Toxicity",
                PermissibleValue(text="Renal Toxicity",
                                 description="Toxicity that impairs or damages the kidney. This condition is often caused by the administration of a pharmaceutical agent that causes damage to the kidney.",
                                 meaning=NCIT.C115459) )
        setattr(cls, "Hepatic Toxicity",
                PermissibleValue(text="Hepatic Toxicity",
                                 description="Toxicity that impairs or damages the liver.    ",
                                 meaning=NCIT.C185645) )
        setattr(cls, "Cardiac Toxicity",
                PermissibleValue(text="Cardiac Toxicity",
                                 description="Toxicity that impairs or damages the heart. This condition is often caused by the administration of a pharmaceutical agent that initiates a poisonous or toxic response in cardiac tissue.",
                                 meaning=NCIT.C27994) )
        setattr(cls, "Pulmonary Toxicity",
                PermissibleValue(text="Pulmonary Toxicity",
                                 description="Toxicity that impairs or damages the lung(s). This condition is often caused by the administration of a pharmaceutical agent that causes damage to the lungs.",
                                 meaning=NCIT.C177374) )
        setattr(cls, "GI Toxicity",
                PermissibleValue(text="GI Toxicity",
                                 description="Toxicity that impairs or damages the gastrointestinal system.    ",
                                 meaning=NCIT.C185646) )
        setattr(cls, "Endocrine Toxicity",
                PermissibleValue(text="Endocrine Toxicity",
                                 description="Indicates that a toxicity adverse effect has been experienced during endocrine drug treatment.",
                                 meaning=NCIT.C138163) )
        setattr(cls, "Musculoskeletal Toxicity",
                PermissibleValue(text="Musculoskeletal Toxicity",
                                 description="A toxicity that impairs or damages the musculoskeletal system.",
                                 meaning=NCIT.C185647) )
        setattr(cls, "Psychiatric Toxicity",
                PermissibleValue(text="Psychiatric Toxicity",
                                 description="Toxicity that develops due to the administration of psychiatric medications.    ",
                                 meaning=NCIT.C185648) )

class BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum(EnumDefinitionImpl):

    Bendamustine = PermissibleValue(text="Bendamustine",
                                               description="A bifunctional mechlorethamine derivative with alkylating and antimetabolite activities. Although the exact mechanism of action of bendamustine is unknown, this agent appears to alkylate and crosslink macromolecules, resulting in DNA, RNA and protein synthesis inhibition, and eventually the induction of apoptosis.",
                                               meaning=NCIT.C73261)
    Bleomycin = PermissibleValue(text="Bleomycin",
                                         description="A mixture of glycopeptide antineoplastic antibiotics isolated from the bacterium Streptomyces verticillus. Bleomycin forms complexes with iron that reduce molecular oxygen to superoxide and hydroxyl radicals which cause single- and double-stranded breaks in DNA; these reactive oxygen species also induce lipid peroxidation, carbohydrate oxidation, and alterations in prostaglandin synthesis and degradation.",
                                         meaning=NCIT.C313)
    Busulfan = PermissibleValue(text="Busulfan",
                                       description="A synthetic derivative of dimethane-sulfonate with antineoplastic and cytotoxic properties. Although its mechanism of action is not fully understood, busulfan appears to act through the alkylation of DNA. Following systemic absorption of busulfan, carbonium ions are formed, resulting in DNA alkylation and DNA breaks and inhibition of DNA replication and RNA transcription. (NCI04)",
                                       meaning=NCIT.C321)
    Carboplatin = PermissibleValue(text="Carboplatin",
                                             description="A second-generation platinum compound with a broad spectrum of antineoplastic properties. Carboplatin contains a platinum atom complexed with two ammonia groups and a cyclobutane-dicarboxyl residue. This agent is activated intracellularly to form reactive platinum complexes that bind to nucleophilic groups such as GC-rich sites in DNA, thereby inducing intrastrand and interstrand DNA cross-links, as well as DNA-protein cross-links. These carboplatin-induced DNA and protein effects result in apoptosis and cell growth inhibition. This agent possesses tumoricidal activity similar to that of its parent compound, cisplatin, but is more stable and less toxic. (NCI04)",
                                             meaning=NCIT.C1282)
    Carmustine = PermissibleValue(text="Carmustine",
                                           description="An antineoplastic nitrosourea. Carmustine alkylates and cross-links DNA during all phases of the cell cycle, resulting in disruption of DNA function, cell cycle arrest, and apoptosis. This agent also carbamoylates proteins, including DNA repair enzymes, resulting in an enhanced cytotoxic effect. Carmustine is highly lipophilic and crosses the blood-brain barrier readily. (NCI04)",
                                           meaning=NCIT.C349)
    Cisplatin = PermissibleValue(text="Cisplatin",
                                         description="An alkylating-like inorganic platinum agent (cis-diamminedichloroplatinum) with antineoplastic activity. Cisplatin forms highly reactive, charged, platinum complexes which bind to nucleophilic groups such as GC-rich sites in DNA inducing intrastrand and interstrand DNA cross-links, as well as DNA-protein cross-links. These cross-links result in apoptosis and cell growth inhibition.",
                                         meaning=NCIT.C376)
    Cyclophosphamide = PermissibleValue(text="Cyclophosphamide",
                                                       description="A synthetic alkylating agent chemically related to the nitrogen mustards with antineoplastic and immunosuppressive activities. In the liver, cyclophosphamide is converted to the active metabolites aldophosphamide and phosphoramide mustard, which bind to DNA, thereby inhibiting DNA replication and initiating cell death.",
                                                       meaning=NCIT.C405)
    Cytarabine = PermissibleValue(text="Cytarabine",
                                           description="An antimetabolite analogue of cytidine with a modified sugar moiety (arabinose instead of ribose). Cytarabine is converted to the triphosphate form within the cell and then competes with cytidine for incorporation into DNA. Because the arabinose sugar sterically hinders the rotation of the molecule within DNA, DNA replication ceases, specifically during the S phase of the cell cycle. This agent also inhibits DNA polymerase, resulting in a decrease in DNA replication and repair. (NCI04)",
                                           meaning=NCIT.C408)
    Dacarbazine = PermissibleValue(text="Dacarbazine",
                                             description="A triazene derivative with antineoplastic activity. Dacarbazine alkylates and cross-links DNA during all phases of the cell cycle, resulting in disruption of DNA function, cell cycle arrest, and apoptosis. (NCI04)",
                                             meaning=NCIT.C411)
    Dexamethasone = PermissibleValue(text="Dexamethasone",
                                                 description="A synthetic adrenal corticosteroid with potent anti-inflammatory properties. In addition to binding to specific nuclear steroid receptors, dexamethasone also interferes with NF-kB activation and apoptotic pathways. This agent lacks the salt-retaining properties of other related adrenal hormones. (NCI04)",
                                                 meaning=NCIT.C422)
    Doxorubicin = PermissibleValue(text="Doxorubicin",
                                             description="An anthracycline antibiotic with antineoplastic activity. Doxorubicin, isolated from the bacterium Streptomyces peucetius var. caesius, is the hydroxylated congener of daunorubicin. Doxorubicin intercalates between base pairs in the DNA helix, thereby preventing DNA replication and ultimately inhibiting protein synthesis. Additionally, doxorubicin inhibits topoisomerase II which results in an increased and stabilized cleavable enzyme-DNA linked complex during DNA replication and subsequently prevents the ligation of the nucleotide strand after double-strand breakage. Doxorubicin also forms oxygen free radicals resulting in cytotoxicity secondary to lipid peroxidation of cell membrane lipids; the formation of oxygen free radicals also contributes to the toxicity of the anthracycline antibiotics, namely the cardiac and cutaneous vascular effects.",
                                             meaning=NCIT.C456)
    Etoposide = PermissibleValue(text="Etoposide",
                                         description="A semisynthetic derivative of podophyllotoxin, a substance extracted from the mandrake root Podophyllum peltatum. Possessing potent antineoplastic properties, etoposide binds to and inhibits topoisomerase II and its function in ligating cleaved DNA molecules, resulting in the accumulation of single- or double-strand DNA breaks, the inhibition of DNA replication and transcription, and apoptotic cell death. Etoposide acts primarily in the G2 and S phases of the cell cycle. (NCI04)",
                                         meaning=NCIT.C491)
    Fludarabine = PermissibleValue(text="Fludarabine",
                                             description="A fluorinated nucleotide antimetabolite analog of the antiviral agent vidarabine (ara-A) with antineoplastic activity. Administered parenterally as a phosphate salt, fludarabine phosphate is rapidly dephosphorylated to 2-fluoro-ara-A and then phosphorylated intracellularly by deoxycytidine kinase to the active triphosphate, 2-fluoro-ara-ATP. This metabolite may inhibit DNA polymerase alpha, ribonucleotide reductase and DNA primase, thereby interrupting DNA synthesis and inhibiting tumor cell growth. (NCI04)",
                                             meaning=NCIT.C1094)
    Gemcitabine = PermissibleValue(text="Gemcitabine",
                                             description="A broad-spectrum antimetabolite and deoxycytidine analogue with antineoplastic activity. Upon administration, gemcitabine is converted into the active metabolites difluorodeoxycytidine diphosphate (dFdCDP) and difluorodeoxycytidine triphosphate (dFdCTP) by deoxycytidine kinase. dFdCTP competes with deoxycytidine triphosphate (dCTP) and is incorporated into DNA. This locks DNA polymerase thereby resulting in "masked termination" during DNA replication. On the other hand, dFdCDP inhibits ribonucleotide reductase, thereby decreasing the deoxynucleotide pool available for DNA synthesis. The reduction in the intracellular concentration of dCTP potentiates the incorporation of dFdCTP into DNA.",
                                             meaning=NCIT.C66876)
    Ifosfamide = PermissibleValue(text="Ifosfamide",
                                           description="A synthetic analogue of the nitrogen mustard cyclophosphamide with antineoplastic activity. Ifosfamide alkylates and forms DNA crosslinks, thereby preventing DNA strand separation and DNA replication. This agent is a prodrug that must be activated through hydroxylation by hepatic microsomal enzymes. (NCI04)",
                                           meaning=NCIT.C564)
    Melphalan = PermissibleValue(text="Melphalan",
                                         description="A phenylalanine derivative of nitrogen mustard with antineoplastic activity. Melphalan alkylates DNA at the N7 position of guanine and induces DNA inter-strand cross-linkages, resulting in the inhibition of DNA and RNA synthesis and cytotoxicity against both dividing and non-dividing tumor cells.",
                                         meaning=NCIT.C633)
    Methotrexate = PermissibleValue(text="Methotrexate",
                                               description="An antimetabolite and antifolate agent with antineoplastic and immunosuppressant activities. Methotrexate binds to and inhibits the enzyme dihydrofolate reductase, resulting in inhibition of purine nucleotide and thymidylate synthesis and, subsequently, inhibition of DNA and RNA syntheses. Methotrexate also exhibits potent immunosuppressant activity although the mechanism(s) of actions is unclear.",
                                               meaning=NCIT.C642)
    Nivolumab = PermissibleValue(text="Nivolumab",
                                         description="A fully human immunoglobulin (Ig) G4 monoclonal antibody directed against the negative immunoregulatory human cell surface receptor programmed death-1 (PD-1, PCD-1) with immune checkpoint inhibitory and antineoplastic activities. Upon administration, nivolumab binds to and blocks the activation of PD-1, an immunoglobulin superfamily (IgSF) transmembrane protein, by its ligands programmed cell death ligand 1 (PD-L1), which is overexpressed on certain cancer cells, and programmed cell death ligand 2 (PD-L2), which is primarily expressed on antigen-presenting cells (APCs). This results in the activation of T-cells and cell-mediated immune responses against tumor cells. Activated PD-1 negatively regulates T-cell activation and plays a key role in tumor evasion from host immunity.",
                                         meaning=NCIT.C68814)
    Pembrolizumab = PermissibleValue(text="Pembrolizumab",
                                                 description="A humanized monoclonal immunoglobulin (Ig) G4 antibody directed against human cell surface receptor PD-1 (programmed death-1 or programmed cell death-1) with potential immune checkpoint inhibitory and antineoplastic activities. Upon administration, pembrolizumab binds to PD-1, an inhibitory signaling receptor expressed on the surface of activated T cells, and blocks the binding to and activation of PD-1 by its ligands, which results in the activation of T-cell-mediated immune responses against tumor cells. The ligands for PD-1 include programmed cell death ligand 1 (PD-L1), overexpressed on certain cancer cells, and programmed cell death ligand 2 (PD-L2), which is primarily expressed on APCs. Activated PD-1 negatively regulates T-cell activation and plays a key role in in tumor evasion from host immunity.",
                                                 meaning=NCIT.C106432)
    Prednisone = PermissibleValue(text="Prednisone",
                                           description="A synthetic glucocorticoid with anti-inflammatory and immunomodulating properties. After cell surface receptor attachment and cell entry, prednisone enters the nucleus where it binds to and activates specific nuclear receptors, resulting in an altered gene expression and inhibition of proinflammatory cytokine production. This agent also decreases the number of circulating lymphocytes, induces cell differentiation, and stimulates apoptosis in sensitive tumor cell populations.",
                                           meaning=NCIT.C770)
    Procarbazine = PermissibleValue(text="Procarbazine",
                                               description="A methylhydrazine derivative with antineoplastic and mutagenic activities. Although the exact mode of cytotoxicity has not been elucidated, procarbazine, after metabolic activation, appears to inhibit the trans-methylation of methionine into transfer RNA (t-RNA), thereby preventing protein synthesis and consequently DNA and RNA synthesis. This agent may also undergo auto-oxidation, resulting in the formation of cytotoxic free radicals which damage DNA through an alkylation reaction.",
                                               meaning=NCIT.C62072)
    Thiotepa = PermissibleValue(text="Thiotepa",
                                       description="A polyfunctional, organophosphorus alkylating agent and a stable derivative of N,N',N''-triethylenephosphoramide (TEPA), with antineoplastic activity. Upon administration, thiotepa is converted into highly reactive ethylenimine groups, which covalently bind to nucleophilic groups in DNA and demonstrate a preference for the N7 position of guanine bases. This induces crosslinking of alkylated guanine bases in double-stranded DNA, interferes with both DNA replication and cell division, and results in both the induction of apoptosis and the inhibition of cell growth.",
                                       meaning=NCIT.C875)
    Vinorelbine = PermissibleValue(text="Vinorelbine",
                                             description="A semisynthetic vinca alkaloid. Vinorelbine binds to tubulin and prevents formation of the mitotic spindle, resulting in the arrest of tumor cell growth in metaphase. This agent may also interfere with amino acid, cyclic AMP. and glutathione metabolism; calmodulin-dependent Ca++ -transport ATPase activity; cellular respiration; and nucleic acid and lipid biosynthesis.",
                                             meaning=NCIT.C1275)
    Vinblastine = PermissibleValue(text="Vinblastine",
                                             description="A natural alkaloid isolated from the plant Vinca rosea Linn. Vinblastine binds to tubulin and inhibits microtubule formation, resulting in disruption of mitotic spindle assembly and arrest of tumor cells in the M phase of the cell cycle. This agent may also interfere with amino acid, cyclic AMP, and glutathione metabolism; calmodulin-dependent Ca++ -transport ATPase activity; cellular respiration; and nucleic acid and lipid biosynthesis. (NCI04)",
                                             meaning=NCIT.C930)
    Vincristine = PermissibleValue(text="Vincristine",
                                             description="A natural alkaloid isolated from the plant Vinca rosea Linn. Vincristine binds irreversibly to microtubules and spindle proteins in S phase of the cell cycle and interferes with the formation of the mitotic spindle, thereby arresting tumor cells in metaphase. This agent also depolymerizes microtubules and may also interfere with amino acid, cyclic AMP, and glutathione metabolism; calmodulin-dependent Ca++ -transport ATPase activity; cellular respiration; and nucleic acid and lipid biosynthesis. (NCI04)",
                                             meaning=NCIT.C933)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Brentuximab Vedotin",
                PermissibleValue(text="Brentuximab Vedotin",
                                 description="An antibody-drug conjugate (ADC) directed against the tumor necrosis factor (TNF) receptor CD30 with potential antineoplastic activity. Brentuximab vedotin is generated by conjugating the chimeric anti-CD30 monoclonal antibody SGN-30 to the cytotoxic agent monomethyl auristatin E (MMAE) via a valine-citrulline peptide linker. Upon administration and internalization by CD30-positive tumor cells, brentuximab vedotin undergoes enzymatic cleavage, releasing MMAE into the cytosol; MMAE binds to tubulin and inhibits tubulin polymerization, which may result in G2/M phase arrest and tumor cell apoptosis. Transiently activated during lymphocyte activation, CD30 (tumor necrosis factor receptor superfamily, member 8;TNFRSF8) may be constitutively expressed in hematologic malignancies including Hodgkin lymphoma and some T-cell non-Hodgkin lymphomas. The linkage system in brentuximab vedotin is highly stable in plasma, resulting in cytotoxic specificity for CD30-positive cells.",
                                 meaning=NCIT.C66944) )
        setattr(cls, "Etoposide Phosphate",
                PermissibleValue(text="Etoposide Phosphate",
                                 description="A phosphate salt of a semisynthetic derivative of podophyllotoxin. Etoposide binds to the enzyme topoisomerase II, inducing double-strand DNA breaks, inhibiting DNA repair, and resulting in decreased DNA synthesis and tumor cell proliferation. Cells in the S and G2 phases of the cell cycle are most sensitive to this agent. (NCI04)",
                                 meaning=NCIT.C1093) )
        setattr(cls, "Nitrogen Mustard",
                PermissibleValue(text="Nitrogen Mustard",
                                 description="A synthetic agent related to sulphur mustard with antineoplastic and immunosuppressive properties. Nitrogen mustard (a member of a family of chemotherapy agents including cyclophosphamide and chlorambucil) is an irritant and carcinogenic agent metabolized to a highly reactive ethylene immonium derivative; the ethylene immonium derivative alkylates DNA and inhibits DNA replication. This agent also exhibits lympholytic properties. (NCI04)",
                                 meaning=NCIT.C62056) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SampleSourceEnum(EnumDefinitionImpl):

    Blood = PermissibleValue(text="Blood",
                                 description="Blood that has not been separated into its various components; blood that has not been modified except for the addition of an anticoagulant.",
                                 meaning=NCIT.C41067)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SampleSourceEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Bone Marrow",
                PermissibleValue(text="Bone Marrow",
                                 description="The tissue occupying the spaces of bone. It consiRMS of blood vessel sinuses and a network of hematopoietic cells which give rise to the red cells, white cells, and megakaryocytes.",
                                 meaning=NCIT.C12431) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MolecularMarkersEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MolecularMarkersEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "inv(16)(p13q22)",
                PermissibleValue(text="inv(16)(p13q22)",
                                 description="A chromosomal inversion that involves chromosome 16. It is associated with the development of acute myeloid leukemia CBFB-MYH11, acute myelomonocytic leukemia with abnormal eosinophils, and granulocytic sarcoma.",
                                 meaning=NCIT.C36373) )
        setattr(cls, "t(16;16)(p13.1;q22)",
                PermissibleValue(text="t(16;16)(p13.1;q22)",
                                 description="A chromosomal translocation that involves chromosome 16. It is often associated with the development of acute myeloid leukemia CBFB-MYH11, acute myelomonocytic leukemia with abnormal eosinophils, and granulocytic sarcoma.",
                                 meaning=NCIT.C27759) )
        setattr(cls, "t(15;17)(q24;q21)",
                PermissibleValue(text="t(15;17)(q24;q21)",
                                 description="A chromosomal translocation associated with creation of a fusion between the PML and RARA genes. It is seen in variants of acute promyelocytic leukemia.",
                                 meaning=NCIT.C27758) )
        setattr(cls, "t(9;11)(p22;q23) / MLL-MLLT3(AF9)",
                PermissibleValue(text="t(9;11)(p22;q23) / MLL-MLLT3(AF9)",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p21.3) of chromosome 9 and the long arm (q23.3) of chromosome 11. It is associated with the development of acute myeloid leukemia with the MLLT3-MLL fusion gene transcript.",
                                 meaning=NCIT.C36370) )
        setattr(cls, "t(10;11)(p12;q23) / MLL-MLLT10(AF10)",
                PermissibleValue(text="t(10;11)(p12;q23) / MLL-MLLT10(AF10)",
                                 description="A cytogenetic abnormality that refers to the translocation of chromosome 10p12 with chromosome 11q23. It is associated with acute myeloid leukemia in childhood.",
                                 meaning=NCIT.C132102) )
        setattr(cls, "t(10;11)(p11.2;q23)",
                PermissibleValue(text="t(10;11)(p11.2;q23)",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p11.2) of chromosome 10 and the long arm (q23) of chromosome 11. It is associated with KMT2A (MLL)/ABI1 fusions and acute myeloid leukemia.",
                                 meaning=NCIT.C168758) )
        setattr(cls, "t(1;11)(q21;q23) / MLL-MLLT11(AF1Q)",
                PermissibleValue(text="t(1;11)(q21;q23) / MLL-MLLT11(AF1Q)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q21) of chromosome 1 and the long arm (q23) of chromosome 11. It is associated with KMT2A (MLL)/MLLT11 (AF1Q) fusions, acute myeloid leukemia and some cases of acute lymphoblastic leukemia.",
                                 meaning=NCIT.C168759) )
        setattr(cls, "t(4;11)(q21;q23) / MLL-MLLT2(AF4)",
                PermissibleValue(text="t(4;11)(q21;q23) / MLL-MLLT2(AF4)",
                                 description="A chromosomal abnormality consisting of the translocation of 4q21 with 11q23.",
                                 meaning=NCIT.C36365) )
        setattr(cls, "t(6;11)(q27;q23) / MLL-MLLT4(AF6)",
                PermissibleValue(text="t(6;11)(q27;q23) / MLL-MLLT4(AF6)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q27) of chromosome 6 and the long arm (q23) of chromosome 11. It is associated with the development of de novo acute myeloid leukemia.",
                                 meaning=NCIT.C36610) )
        setattr(cls, "t(6;9)(p23;q34) DEK/NUP214",
                PermissibleValue(text="t(6;9)(p23;q34) DEK/NUP214",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p23) of chromosome 6 and the long arm (q34.1) of chromosome 9. It is associated with DEK/NUP214 fusions, acute myeloid leukemia and myelodysplastic syndromes.",
                                 meaning=NCIT.C36532) )
        setattr(cls, "t(11;19)(q23;p13) (MLL-ENL)/(MLL-ELL)",
                PermissibleValue(text="t(11;19)(q23;p13) (MLL-ENL)/(MLL-ELL)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 11 and the short arm (p13) of chromosome 19. It is associated with KMT2A (MLL) fusions, including those with MLLT1 (ENL) and ELL, and acute myeloid leukemia.",
                                 meaning=NCIT.C168764) )
        setattr(cls, "t(11;19)(q23;p13.1) (MLL-ELL)",
                PermissibleValue(text="t(11;19)(q23;p13.1) (MLL-ELL)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 11 and the short arm (p13.1) of chromosome 19. It is associated with the development of acute myeloid leukemia with variant MLL translocations and topoisomerase II inhibitor-related acute myeloid leukemia.",
                                 meaning=NCIT.C36371) )
        setattr(cls, "t(11;19)(q23;p13.3) (MLL-ENL)",
                PermissibleValue(text="t(11;19)(q23;p13.3) (MLL-ENL)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23.3) of chromosome 11 and the short arm (p13.3) of chromosome 19. It is associated with KMT2A (MLL)/MLLT1 (ENL) fusions and acute myeloid leukemia.",
                                 meaning=NCIT.C36372) )
        setattr(cls, "MLL Other partner",
                PermissibleValue(text="MLL Other partner",
                                 description="A chromosomal abnormality consisting of the translocation of genetic material from any one of several chromosomes to the 11q23.3 region, resulting in an MLL gene rearrangement.",
                                 meaning=NCIT.C36517) )
        setattr(cls, "t(11;17)(AF17)",
                PermissibleValue(text="t(11;17)(AF17)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 11 and the long arm (q12-21) of chromosome 19. It is associated with KMT2A (MLL) fusions, including those with MLLT6 (AF17), and acute myeloid leukemia.",
                                 meaning=NCIT.C168760) )
        setattr(cls, "t(8;16)MOZ/CBP",
                PermissibleValue(text="t(8;16)MOZ/CBP",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p11.2) of chromosome 8 and the short arm (p13.3) of chromosome 16. It is associated with KAT6A/CREBBP fusions and acute myeloid leukemia.",
                                 meaning=NCIT.C167194) )
        setattr(cls, "Monosomy 7",
                PermissibleValue(text="Monosomy 7",
                                 description="A chromosomal abnormality consisting of the absence of one of the copies of chromosome 7 in somatic cells.",
                                 meaning=NCIT.C36411) )
        setattr(cls, "Monosomy 5",
                PermissibleValue(text="Monosomy 5",
                                 description="A cytogenetic aneuploidy abnormality that refers to the presence of one chromosome 5 only. It is associated with the development of refractory anemia with excess blasts, refractory anemia with multilineage dysplasia, and refractory anemia with multilineage dysplasia and ringed sideroblasts.",
                                 meaning=NCIT.C36523) )
        setattr(cls, "Trisomy 8",
                PermissibleValue(text="Trisomy 8",
                                 description="A chromosomal abnormality consisting of the presence of a third copy of chromosome 8 in somatic cells.",
                                 meaning=NCIT.C36396) )
        setattr(cls, "der.12p",
                PermissibleValue(text="der.12p",
                                 description="A cytogenetic abnormality involving the rearrangement of two or more other chromosomes with the short arm of chromosome 12 (12p).",
                                 meaning=NCIT.C173542) )
        setattr(cls, "t(2;12)",
                PermissibleValue(text="t(2;12)",
                                 description="A cytogenetic abnormality that involves a translocation between chromosomes 2 and 12.",
                                 meaning=NCIT.C173543) )
        setattr(cls, "t(5;11)(q35;p15) NSD1/NUP98",
                PermissibleValue(text="t(5;11)(q35;p15) NSD1/NUP98",
                                 description="A cytogenetic abnormality that refers to the translocation of chromosome 11p15 with chromosome 5q35. It results in the formation of NUP98/NSD1 fusion gene. It is associated with the development of acute myeloid leukemia with t(5;11)(q35;p15); NUP98-NSD1.",
                                 meaning=NCIT.C131503) )
        setattr(cls, "t(7;12)(q36;p13) HLXB9(MNX1)/ETV6(TEL)",
                PermissibleValue(text="t(7;12)(q36;p13) HLXB9(MNX1)/ETV6(TEL)",
                                 description="A chromosomal translocation involving the ETV6 gene on chromosome 12p13 and HLXB9 gene on chromosome 7q36.",
                                 meaning=NCIT.C122689) )
        setattr(cls, "t(9;22)(q34;q11.2) ABL/BCR",
                PermissibleValue(text="t(9;22)(q34;q11.2) ABL/BCR",
                                 description="A translocation between chromosomes 9 and 22 that is associated with the Philadelphia chromosome.",
                                 meaning=NCIT.C13271) )
        setattr(cls, "inv(3)(q21;q21.2)",
                PermissibleValue(text="inv(3)(q21;q21.2)",
                                 description="A cytogenetic abnormality that refers to a paracentric inversion involving breakpoints on the long (q23.1 and q26.2) of chromosome 3. It is associated with acute myeloid leukemia.",
                                 meaning=NCIT.C36407) )
        setattr(cls, "t(3;3)(q21;q26.2)",
                PermissibleValue(text="t(3;3)(q21;q26.2)",
                                 description="A cytogenetic abnormality that refers to the translocation where both breakpoints are on the long arm (q23.1 and q26.2) of chromosome 3. It is associated with acute myeloid leukemia.",
                                 meaning=NCIT.C36406) )
        setattr(cls, "t(3;12)(q23;p12.3)(ETV6/EVI1)",
                PermissibleValue(text="t(3;12)(q23;p12.3)(ETV6/EVI1)",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q23) of chromosome 3 and the shot arm (p12.3) of chromosome 12. It is associated with ETV6/MECOM (EVI1) fusions, myeloproliferative disorders, myelodysplastic syndromes and acute myelogenous leukemia.",
                                 meaning=NCIT.C168766) )
        setattr(cls, "del(5q)(5q31-q32)",
                PermissibleValue(text="del(5q)(5q31-q32)",
                                 description="A cytogenetic abnormality that refers to deletion of chromosome bands 31-32 on the long arm of chromosome 5.",
                                 meaning=NCIT.C168769) )
        setattr(cls, "t(1;22)(RBM15-MKL1)",
                PermissibleValue(text="t(1;22)(RBM15-MKL1)",
                                 description="A cytogenetic abnormality that refers to the translocation of the short arm (p13.3) of chromosome 1 and the long arm (q13.1) of chromosome 22. It is associated with RBM15/MRTFA (MKL1) fusions and acute megakaryocytic leukemia.",
                                 meaning=NCIT.C36417) )
        setattr(cls, "del(13q) (13q 14 - 21)",
                PermissibleValue(text="del(13q) (13q 14 - 21)",
                                 description="A cytogenetic abnormality that refers to deletion of chromosome bands 14-21 on the long arm of chromosome 13.",
                                 meaning=NCIT.C168770) )
        setattr(cls, "del(17p)",
                PermissibleValue(text="del(17p)",
                                 description="A cytogenetic abnormality that refers to the loss of all or part of the short arm of chromosome 17 (17p).",
                                 meaning=NCIT.C36499) )
        setattr(cls, "Any MLL rearrangement",
                PermissibleValue(text="Any MLL rearrangement",
                                 description="A molecular abnormality indicating rearrangement of the MLL (KMT2A) gene.",
                                 meaning=NCIT.C122623) )
        setattr(cls, "non-KMT2A MLLT10",
                PermissibleValue(text="non-KMT2A MLLT10",
                                 description="An indication that a cytogenetic rearrangement involving MLLT10 but not involving KMT2A was detected in a sample.",
                                 meaning=NCIT.C168771) )
        setattr(cls, "inv(16)(p13.3q24.3)/CBFA2T3-GLIS2",
                PermissibleValue(text="inv(16)(p13.3q24.3)/CBFA2T3-GLIS2",
                                 description="A pericentric chromosomal inversion that involves chromosome 16. It is associated with CBFA2T3/GLIS2 fusions and pediatric acute megakaryoblastic leukemia.",
                                 meaning=NCIT.C167195) )
        setattr(cls, "t(11;15)(p15;q35)/NUP98/JARID1A",
                PermissibleValue(text="t(11;15)(p15;q35)/NUP98/JARID1A",
                                 description="A cytogenetic abnormality that refers to the translocation of chromosome 11p15 with chromosome 15q35. It results in the formation of NUP98/JARID1A fusion gene. It is associated with the development of acute myeloid leukemia with t(11;15)(p15;q35); NUP98-JARID1A.",
                                 meaning=NCIT.C131505) )
        setattr(cls, "t(16;21)(q24;q22)RUNX1-CBFA2T3",
                PermissibleValue(text="t(16;21)(q24;q22)RUNX1-CBFA2T3",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q24) of chromosome 16 and the long arm (q22) of chromosome 22. It is associated with RUNX1/CBFA2T3 fusions, myelodysplastic syndromes and acute myeloid leukemia.",
                                 meaning=NCIT.C168773) )
        setattr(cls, "t(3;5)(q25;q34)NPM1/MLF1",
                PermissibleValue(text="t(3;5)(q25;q34)NPM1/MLF1",
                                 description="A cytogenetic abnormality that refers to the translocation of the long arm (q25) of chromosome 3 and the long arm (q34) of chromosome 5. It is associated with the development of acute myeloid leukemia arising from myelodysplastic syndrome, acute myeloid leukemia with multilineage dysplasia, and acute myeloid leukemia with myelodysplasia-related changes.",
                                 meaning=NCIT.C36415) )
        setattr(cls, "t(16;21)(p11;q22)FUS/ERG",
                PermissibleValue(text="t(16;21)(p11;q22)FUS/ERG",
                                 description="A chromosomal translocation involving the FUS gene on chromosome 16p11 and the ERG gene on chromosome 21q22.",
                                 meaning=NCIT.C36616) )
        setattr(cls, "NPM1 mutation",
                PermissibleValue(text="NPM1 mutation",
                                 description="Mutation of the nucleophosmin gene. It is seen in acute myeloid leukemias usually associated with a normal karyotype.",
                                 meaning=NCIT.C82429) )
        setattr(cls, "CEBPA mutation - monoallelic",
                PermissibleValue(text="CEBPA mutation - monoallelic",
                                 description="The presence of mutations in only one allele of the CEBPA gene.",
                                 meaning=NCIT.C168774) )
        setattr(cls, "CEBPA mutation - biallelic",
                PermissibleValue(text="CEBPA mutation - biallelic",
                                 description="The presence of mutations in both alleles of the CEBPA gene.",
                                 meaning=NCIT.C157569) )
        setattr(cls, "CEBPA mutation - mutation unspecified",
                PermissibleValue(text="CEBPA mutation - mutation unspecified",
                                 description="Mutation of the CEBPA gene encoding CCAAT/enhancer binding protein alpha. It is seen in acute myeloid leukemias usually associated with a normal karyotype.",
                                 meaning=NCIT.C38372) )
        setattr(cls, "FLT3 internal tandem duplication",
                PermissibleValue(text="FLT3 internal tandem duplication",
                                 description="A genetic abnormality that arises from duplications of the juxtamembrane portion of the gene and results in constitutive activation of the FLT3 receptor tyrosine kinase protein in early hematopoietic progenitor cells. It is associated with acute myelogenous leukemia where it appears to correlate with a poor prognosis.",
                                 meaning=NCIT.C67494) )
        setattr(cls, "FLT3-TKD",
                PermissibleValue(text="FLT3-TKD",
                                 description="Single nucleotide mutations in the tyrosine kinase domain encoded by the human FLT3 gene that are associated with acute myeloid leukemia and poor prognosis.",
                                 meaning=NCIT.C67495) )
        setattr(cls, "WT1 mutation",
                PermissibleValue(text="WT1 mutation",
                                 description="A change in the nucleotide sequence of the WT1 gene.",
                                 meaning=NCIT.C146726) )
        setattr(cls, "CKIT mutation - ex17",
                PermissibleValue(text="CKIT mutation - ex17",
                                 description="A molecular genetic abnormality indicating the presence of a mutation in exon 17 of the KIT gene located within 4q11-q12.",
                                 meaning=NCIT.C116396) )
        setattr(cls, "CKIT mutation - ex8",
                PermissibleValue(text="CKIT mutation - ex8",
                                 description="A molecular genetic abnormality indicating the presence of a mutation in exon 8 of the KIT gene located within 4q11-q12.",
                                 meaning=NCIT.C128660) )
        setattr(cls, "CKIT mutation - unspecified",
                PermissibleValue(text="CKIT mutation - unspecified",
                                 description="A molecular genetic abnormality that refers to mutation of the c-kit (CD117) proto-oncogene. It is associated with the development of gastrointestinal stromal tumor and gastrointestinal autonomic nerve tumor. It has also been described in acute myeloid leukemias, dysgerminomas, and seminomas.",
                                 meaning=NCIT.C39712) )
        setattr(cls, "GATA1 mutation",
                PermissibleValue(text="GATA1 mutation",
                                 description="A change in the nucleotide sequence of the GATA1 gene.",
                                 meaning=NCIT.C82340) )
        setattr(cls, "RUNX1 mutation",
                PermissibleValue(text="RUNX1 mutation",
                                 description="A change in the nucleotide sequence of the RUNX1 gene.",
                                 meaning=NCIT.C38362) )
        setattr(cls, "PTPN11 mutation",
                PermissibleValue(text="PTPN11 mutation",
                                 description="Mutation of the protein tyrosine phosphatase, non-receptor type 11 gene. It is seen in cases of juvenile myelomonocytic leukemia.",
                                 meaning=NCIT.C82612) )
        setattr(cls, "N-RAS mutation",
                PermissibleValue(text="N-RAS mutation",
                                 description="A change in the structure of the NRAS gene.",
                                 meaning=NCIT.C41381) )
        setattr(cls, "K-RAS mutation",
                PermissibleValue(text="K-RAS mutation",
                                 description="A change in the nucleotide sequence of the KRAS gene.",
                                 meaning=NCIT.C41361) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ResponseCategoryEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ResponseCategoryEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Overall Response",
                PermissibleValue(text="Overall Response",
                                 description="An assessment of the overall response of the disease to the therapy.",
                                 meaning=NCIT.C96613) )
        setattr(cls, "Bone Marrow Response",
                PermissibleValue(text="Bone Marrow Response",
                                 description="The response of the bone marrow to the treatment.",
                                 meaning=NCIT.C173307) )
        setattr(cls, "CNS Response",
                PermissibleValue(text="CNS Response",
                                 description="The response of the central nervous system to treatment.",
                                 meaning=NCIT.C168952) )
        setattr(cls, "Myeloid Sarcoma Response",
                PermissibleValue(text="Myeloid Sarcoma Response",
                                 description="The response of the myeloid sarcoma to the treatment.",
                                 meaning=NCIT.C168965) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Non-Target Lesions",
                PermissibleValue(text="Non-Target Lesions",
                                 description="A qualitative or quantitative measurement of the response of a non-target lesion(s) to the therapy.",
                                 meaning=NCIT.C94535) )
        setattr(cls, "Target Lesions",
                PermissibleValue(text="Target Lesions",
                                 description="A qualitative or quantitative measurement of the response of a target lesion(s) to the therapy.",
                                 meaning=NCIT.C94534) )

class BmAnalysisMethodAtResponseEnum(EnumDefinitionImpl):

    Morphology = PermissibleValue(text="Morphology",
                                           description="A light microscopic finding that describes the cellular characteristics and architectural patterns of cell populations in a tissue sample.",
                                           meaning=NCIT.C35867)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="BmAnalysisMethodAtResponseEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Flow Cytometry",
                PermissibleValue(text="Flow Cytometry",
                                 description="A technique for counting, examining and sorting microscopic particles suspended in a stream of fluid.",
                                 meaning=NCIT.C16585) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ResponseMethodEnum(EnumDefinitionImpl):

    Biopsy = PermissibleValue(text="Biopsy",
                                   description="The removal of cells or tissues for examination by a pathologist. The pathologist may study the tissue under a microscope or perform other tests on the cells or tissue. There are many different types of biopsy procedures. The most common types include: (1) incisional biopsy, in which only a sample of tissue is removed; (2) excisional biopsy, in which an entire lump or suspicious area is removed; and (3) needle biopsy, in which a sample of tissue or fluid is removed with a needle.",
                                   meaning=NCIT.C15189)
    Cytology = PermissibleValue(text="Cytology",
                                       description="The light microscopic study of normal and abnormal cells in fine needle aspirates (FNAs), body cavity fluids, and smears.",
                                       meaning=NCIT.C16491)
    MRI = PermissibleValue(text="MRI",
                             description="Imaging that uses radiofrequency waves and a strong magnetic field rather than x-rays to provide detailed pictures of internal organs and tissues. The technique is valuable for the diagnosis of many pathologic conditions, including cancer, heart and vascular disease, stroke, and joint and musculoskeletal disorders.",
                             meaning=NCIT.C16809)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Imaging = PermissibleValue(text="Imaging",
                                     description="Any technology or method that aids in the visualization of any biological process, cell, tissue or organ for use in screening, diagnosis, surgical procedures or therapy.",
                                     meaning=NCIT.C17369)
    Pathology = PermissibleValue(text="Pathology",
                                         description="The medical science, and specialty practice, concerned with all aspects of disease, but with special reference to the essential nature, causes, and development of abnormal conditions, as well as the structural and functional changes that result from the disease processes. Informally used to mean the result of such an examination.",
                                         meaning=NCIT.C18189)
    PET = PermissibleValue(text="PET",
                             description="A technique for measuring the gamma radiation produced by collisions of electrons and positrons (anti-electrons) within living tissue. In positron emission tomography (PET), a subject is given a dose of a positron-emitting radionuclide attached to a metabolically active substance (for example, 2-fluoro-2-deoxy-D-glucose (FDG), which is similar to a naturally occurring sugar, glucose, with the addition of a radioactive fluorine atom). When living tissue containing the positron emitter is bombarded by electrons, gamma radiation produced by collisions of electrons and positrons is detected by a scanner, revealing in fine detail the tissue location of the metabolically-active substance administered.",
                             meaning=NCIT.C17007)
    Gallium = PermissibleValue(text="Gallium",
                                     description="An element with atomic symbol Ga, atomic number 31, and atomic weight 69.7. A rare silvery (usually trivalent) metallic element; brittle at low temperatures but liquid above room temperature; occurs in trace amounts in bauxite and zinc ores.",
                                     meaning=NCIT.C66798)
    CT = PermissibleValue(text="CT",
                           description="A method of examining structures within the body by scanning them with X rays and using a computer to construct a series of cross-sectional scans along a single axis.",
                           meaning=NCIT.C17204)
    Ultrasound = PermissibleValue(text="Ultrasound",
                                           description="High frequency sound, generally with a frequency greater than 20,000 Hz.",
                                           meaning=NCIT.C64384)

    _defn = EnumDefinition(
        name="ResponseMethodEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Physical Examination",
                PermissibleValue(text="Physical Examination",
                                 description="A systemic evaluation of the body and its functions using visual inspection, palpation, percussion and auscultation. The purpose is to determine the presence or absence of physical signs of disease or abnormality for an individual's health assessment.",
                                 meaning=NCIT.C20989) )
        setattr(cls, "Surgical Resection",
                PermissibleValue(text="Surgical Resection",
                                 description="The surgical removal of an organ or a part of an organ.",
                                 meaning=NCIT.C158758) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Tumor Marker",
                PermissibleValue(text="Tumor Marker",
                                 description="A substance present in or produced by a tumor or by the host, that can be used for differentiating neoplastic from normal tissue based on measurements in body fluids, secretions, cells, and/or tissues. Markers are used in diagnosis, staging and prognosis of cancer, provide an estimation of tumor burden, and serve for monitoring effects of therapy, detecting recurrence, localization of tumors, and screening in general populations.",
                                 meaning=NCIT.C17220) )
        setattr(cls, "PET-CT",
                PermissibleValue(text="PET-CT",
                                 description="An imaging technique that utilizes positron emission tomography and computed tomography in a single machine.",
                                 meaning=NCIT.C103512) )
        setattr(cls, "PET-MRI",
                PermissibleValue(text="PET-MRI",
                                 description="An imaging technique that utilizes positron emission tomography and magnetic resonance imaging in a single machine.",
                                 meaning=NCIT.C103514) )
        setattr(cls, "X-Ray",
                PermissibleValue(text="X-Ray",
                                 description="A radiographic procedure using the emission of x-rays to form an image of the structure penetrated by the radiation.",
                                 meaning=NCIT.C38101) )
        setattr(cls, "Bone Scan",
                PermissibleValue(text="Bone Scan",
                                 description="A nuclear imaging method used to evaluate pathological bone metabolism.",
                                 meaning=NCIT.C17646) )
        setattr(cls, "Bone Marrow Biopsy",
                PermissibleValue(text="Bone Marrow Biopsy",
                                 description="A biopsy involving the removal of a core tissue containing bone spicules and hematopoietic elements embedded in the marrow stroma. This procedure is done in the hip area mainly for the diagnosis and evaluation of neoplastic and non-neoplastic hematopoietic disorders (e.g. anemias, leukemias, lymphomas) and the evaluation of the spread of solid tumors (e.g. carcinomas, sarcomas) and lymphomas for therapeutic purposes.",
                                 meaning=NCIT.C15193) )
        setattr(cls, "Not Applicable",
                PermissibleValue(text="Not Applicable",
                                 description="Determination of a value is not relevant in the current context.",
                                 meaning=NCIT.C48660) )

class ResponseSystemEnum(EnumDefinitionImpl):

    iRANO = PermissibleValue(text="iRANO",
                                 description="Response assessment criteria for the evaluation of patients undergoing immunotherapy for the treatment of malignant glioma. These recommendations integrate guidance for the determination and confirmation of tumor progression based on the response assessment in neuro-oncology (RANO) working group and the immune-related response criteria (irRC).",
                                 meaning=NCIT.C131131)
    RANO = PermissibleValue(text="RANO",
                               description="An update to the MacDonald criteria for assessing disease progression and treatment response in glioblastoma multiforme (GBM).",
                               meaning=NCIT.C114879)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    RECIST = PermissibleValue(text="RECIST",
                                   description="Standard parameters to be used when documenting response of solid tumors to treatment; a set of published rules that define when cancer patients improve ("respond"), stay the same ("stable"), or worsen ("progression") during treatments. (from www.recist.com)",
                                   meaning=NCIT.C49164)
    WHO = PermissibleValue(text="WHO",
                             description="A United Nations agency established to coordinate international health activities and to help governments improve health services.",
                             meaning=NCIT.C75419)
    Choi = PermissibleValue(text="Choi",
                               description="A composite set of criteria developed by Choi et al. using imaging techniques in the evaluation of gastrointestinal stromal tumors response to imatinib mesylate treatment. These criteria integrate changes in tumor size and tumor density.",
                               meaning=NCIT.C122394)
    mRECIST = PermissibleValue(text="mRECIST",
                                     description="Modified RECIST criteria for assessment of response in malignant pleural mesothelioma. (Byrne MJ, Nowak AK. Modified RECIST criteria for assessment of response in malignant pleural mesothelioma. Ann Oncol. 2004 Feb;15(2):257-60.)",
                                     meaning=NCIT.C126031)
    PERCIST = PermissibleValue(text="PERCIST",
                                     description="From RECIST to PERCIST: Evolving considerations for PET response criteria in solid tumors. (Wahl RL, Jacene H, Kasamon Y, Lodge MA. From RECIST to PERCIST: Evolving considerations for PET response criteria in solid tumors. J Nucl Med. 2009 May;50 Suppl 1:122S-50S.)",
                                     meaning=NCIT.C126039)

    _defn = EnumDefinition(
        name="ResponseSystemEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NeurologicalStatusEnum(EnumDefinitionImpl):

    Deterioration = PermissibleValue(text="Deterioration",
                                                 description="A symptom or state of reduced quality or strength.",
                                                 meaning=NCIT.C25751)
    Improved = PermissibleValue(text="Improved",
                                       description="A subjective response indicating that something improved.",
                                       meaning=NCIT.C125459)
    Stable = PermissibleValue(text="Stable",
                                   description="Subject to little fluctuation; showing little if any change.",
                                   meaning=NCIT.C30103)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NeurologicalStatusEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NecrosisEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NecrosisEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "<= 90% Necrosis",
                PermissibleValue(text="<= 90% Necrosis",
                                 description="Less than or equal to 90% necrosis.",
                                 meaning=NCIT.C180353) )
        setattr(cls, "> 90% Necrosis",
                PermissibleValue(text="> 90% Necrosis",
                                 description="Greater than 90% necrosis.",
                                 meaning=NCIT.C180348) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class InterimResponseEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="InterimResponseEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Rapid Early Response (Adequate)",
                PermissibleValue(text="Rapid Early Response (Adequate)",
                                 description="An evaluation prior to the completion of therapy that the individual is responding rapidly to therapy.",
                                 meaning=NCIT.C185658) )
        setattr(cls, "Slow Early Response (Inadequate)",
                PermissibleValue(text="Slow Early Response (Inadequate)",
                                 description="An evaluation prior to the completion of therapy that the individual is responding slowly to therapy.",
                                 meaning=NCIT.C185659) )
        setattr(cls, "Progressive Disease",
                PermissibleValue(text="Progressive Disease",
                                 description="A clinical, pathologic, and/or molecular finding indicating that the course of a disease is worsening in terms of extent or severity.",
                                 meaning=NCIT.C35571) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TxPriorResponseEnum(EnumDefinitionImpl):

    Chemotherapy = PermissibleValue(text="Chemotherapy",
                                               description="The use of synthetic or naturally-occurring chemicals for the treatment of diseases.",
                                               meaning=NCIT.C15632)
    Chemoradiotherapy = PermissibleValue(text="Chemoradiotherapy",
                                                         description="Chemotherapy combined with immunotherapy. Chemotherapy uses different drugs to kill or slow the growth of cancer cells; immunotherapy uses treatments to stimulate or restore the ability of the immune system to fight cancer.",
                                                         meaning=NCIT.C94251)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TxPriorResponseEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MicroscopicChangeTypeEnum(EnumDefinitionImpl):

    Infarction = PermissibleValue(text="Infarction",
                                           description="A localized pathological necrosis of tissue resulting from obstruction of the blood supply usually by a thrombus, an embolus, or vascular torsion.",
                                           meaning=NCIT.C25738)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MicroscopicChangeTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Coagulative Necrosis",
                PermissibleValue(text="Coagulative Necrosis",
                                 description="Ischemic tissue necrosis characterized by the preservation of the architectural pattern and a necrotic ghost appearance of the cells.",
                                 meaning=NCIT.C39608) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MicroscopicChangePctEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MicroscopicChangePctEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class MacroscopicChangeTypeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="MacroscopicChangeTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AeCodeSystemEnum(EnumDefinitionImpl):

    CTCAE = PermissibleValue(text="CTCAE",
                                 description="A standard terminology developed to report adverse events occurring in cancer clinical trials. Common terminology criteria for adverse events (CTCAE) are used in study adverse event summaries and Investigational New Drug reports to the Food and Drug Administration. The CTCAE contain a grading scale for each adverse event term representing the severity of the event.",
                                 meaning=NCIT.C49704)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AeCodeSystemEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class GradeEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="GradeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Grade 1",
                PermissibleValue(text="Grade 1",
                                 description="An experience that is usually transient, and requires no special treatment or intervention. The event does not generally interfere with usual daily activities. Includes transient laboratory test alterations.",
                                 meaning=NCIT.C41338) )
        setattr(cls, "Grade 2",
                PermissibleValue(text="Grade 2",
                                 description="An experience that is alleviated with simple therapeutic treatments. The event impacts usual daily activities. Includes laboratory test alterations indicating injury, but without long-term risk.",
                                 meaning=NCIT.C41339) )
        setattr(cls, "Grade 3",
                PermissibleValue(text="Grade 3",
                                 description="An adverse event experience that requires intensive therapeutic intervention and interrupts usual daily activities.",
                                 meaning=NCIT.C41340) )
        setattr(cls, "Grade 4",
                PermissibleValue(text="Grade 4",
                                 description="Any adverse event that places the patient, in the view of the initial reporter, at immediate risk of death from the adverse event as it occurred, i.e., it does not include an adverse experience that, had it occurred in a more severe form, might have caused death.",
                                 meaning=NCIT.C41337) )
        setattr(cls, "Grade 5",
                PermissibleValue(text="Grade 5",
                                 description="The termination of life associated with an adverse event.",
                                 meaning=NCIT.C48275) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "CTCAE, Grade 1",
                PermissibleValue(text="CTCAE, Grade 1",
                                 description="An experience that is usually transient, and requires no special treatment or intervention. The event does not generally interfere with usual daily activities. Includes transient laboratory test alterations.",
                                 meaning=NCIT.C41338) )
        setattr(cls, "CTCAE, Grade 2",
                PermissibleValue(text="CTCAE, Grade 2",
                                 description="An experience that is alleviated with simple therapeutic treatments. The event impacts usual daily activities. Includes laboratory test alterations indicating injury, but without long-term risk.",
                                 meaning=NCIT.C41339) )
        setattr(cls, "CTCAE, Grade 3",
                PermissibleValue(text="CTCAE, Grade 3",
                                 description="An adverse event experience that requires intensive therapeutic intervention and interrupts usual daily activities.",
                                 meaning=NCIT.C41340) )
        setattr(cls, "CTCAE, Grade 4",
                PermissibleValue(text="CTCAE, Grade 4",
                                 description="Any adverse event that places the patient, in the view of the initial reporter, at immediate risk of death from the adverse event as it occurred, i.e., it does not include an adverse experience that, had it occurred in a more severe form, might have caused death.",
                                 meaning=NCIT.C41337) )
        setattr(cls, "CTCAE, Grade 5",
                PermissibleValue(text="CTCAE, Grade 5",
                                 description="The termination of life associated with an adverse event.",
                                 meaning=NCIT.C48275) )

class GradeSystemEnum(EnumDefinitionImpl):

    CTCAE = PermissibleValue(text="CTCAE",
                                 description="A standard terminology developed to report adverse events occurring in cancer clinical trials. Common terminology criteria for adverse events (CTCAE) are used in study adverse event summaries and Investigational New Drug reports to the Food and Drug Administration. The CTCAE contain a grading scale for each adverse event term representing the severity of the event.",
                                 meaning=NCIT.C49704)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="GradeSystemEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Balis Neuropathy Scale",
                PermissibleValue(text="Balis Neuropathy Scale",
                                 description="An instrument used to grade neurotoxicity occurring in children on a 0-4 scale, where the higher number indicates worse neuropathy.",
                                 meaning=NCIT.C178081) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "European Society for Blood and Marrow Transplantation (EBMT)",
                PermissibleValue(text="European Society for Blood and Marrow Transplantation (EBMT)",
                                 description="A non-profit organization established in 1974 to allow scientiRMS and physicians involved in clinical bone marrow transplantations to share experiences and develop co-operative studies.",
                                 meaning=NCIT.C168842) )

class AttributionEnum(EnumDefinitionImpl):

    Definite = PermissibleValue(text="Definite",
                                       description="Definite adverse event attribution to study product or procedure is established when there is a clear-cut temporal association between product or procedure administration and adverse event, and no other possible cause is present.",
                                       meaning=NCIT.C41356)
    Probable = PermissibleValue(text="Probable",
                                       description="Definite adverse event attribution to study product or procedure is established when there is a clear-cut temporal association between product or procedure administration and adverse event, and no other possible cause is present.",
                                       meaning=NCIT.C41356)
    Possible = PermissibleValue(text="Possible",
                                       description="Possible adverse event relationship to study product or procedure is defined when there is less clear temporal association between product or procedure administration and adverse event, and other etiologies of the event are also possible.",
                                       meaning=NCIT.C41359)
    Unlikely = PermissibleValue(text="Unlikely",
                                       description="A characteristic used to qualify the adverse event as unlikely related to the medical intervention. According to WHO causality assessment criteria of suspected adverse reactions it is applicable to a clinical event, including laboratory test abnormality, with a temporal relationship to the medical intervention which makes a causal relationship improbable, and in which other interventions or underlying disease provide plausible explanations.",
                                       meaning=NCIT.C53257)
    Unrelated = PermissibleValue(text="Unrelated",
                                         description="A characteristic used to qualify the adverse event as clearly not related to the medical intervention.",
                                         meaning=NCIT.C53256)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AttributionEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AvnJointEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AvnJointEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Ankle (distal tibia, intrinsic ankle bones)",
                PermissibleValue(text="Ankle (distal tibia, intrinsic ankle bones)",
                                 description="A gliding joint between the distal ends of the tibia and fibula and the proximal end of the talus.",
                                 meaning=NCIT.C32078) )
        setattr(cls, "Elbow (distal humerus, proximal radius, proximal ulna)",
                PermissibleValue(text="Elbow (distal humerus, proximal radius, proximal ulna)",
                                 description="A type of hinge joint located between the forearm and upper arm.",
                                 meaning=NCIT.C32497) )
        setattr(cls, "Heel (calcaneus)",
                PermissibleValue(text="Heel (calcaneus)",
                                 description="The rounded back part of the foot below the ankle and behind the arch.",
                                 meaning=NCIT.C161381) )
        setattr(cls, "Hip (proximal femur)",
                PermissibleValue(text="Hip (proximal femur)",
                                 description="A ball-and-socket joint between the head of the femur and the acetabulum.",
                                 meaning=NCIT.C32742) )
        setattr(cls, "Knee (distal femur, proximal tibia)",
                PermissibleValue(text="Knee (distal femur, proximal tibia)",
                                 description="A joint connecting the lower part of the femur with the upper part of the tibia. The lower part of the femur and the upper part of the tibia are attached to each other by ligaments. Other structures of the knee joint include the upper part of the fibula, located below and parallel to the tibia, and the patella which moves as the knee bends.",
                                 meaning=NCIT.C32898) )
        setattr(cls, "Shoulder (proximal humerus)",
                PermissibleValue(text="Shoulder (proximal humerus)",
                                 description="The region of the body between the neck and the upper arm.",
                                 meaning=NCIT.C25203) )
        setattr(cls, "Wrist (distal radius, distal ulna, intrinsic wrist bones)",
                PermissibleValue(text="Wrist (distal radius, distal ulna, intrinsic wrist bones)",
                                 description="A joint between the distal end of the radius and the proximal row of carpal bones.",
                                 meaning=NCIT.C33894) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class BilateralLeftMidlineNotreportedRightUnknownEnum(EnumDefinitionImpl):

    Left = PermissibleValue(text="Left",
                               description="A finding indicating the tumor location is on the left side of the specimen.",
                               meaning=NCIT.C160200)
    Right = PermissibleValue(text="Right",
                                 description="A finding indicating the tumor location is on the right side of the specimen.",
                                 meaning=NCIT.C160199)
    Bilateral = PermissibleValue(text="Bilateral",
                                         description="A finding indicating the tumor location is on the both sides of the specimen.",
                                         meaning=NCIT.C160201)
    Midline = PermissibleValue(text="Midline",
                                     description="A finding indicating the tumor location is on the midline of the specimen.",
                                     meaning=NCIT.C162614)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C162615)

    _defn = EnumDefinition(
        name="BilateralLeftMidlineNotreportedRightUnknownEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AvnMethodEnum(EnumDefinitionImpl):

    CT = PermissibleValue(text="CT",
                           description="A method of examining structures within the body by scanning them with X rays and using a computer to construct a series of cross-sectional scans along a single axis.",
                           meaning=NCIT.C17204)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AvnMethodEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Bone Scan",
                PermissibleValue(text="Bone Scan",
                                 description="A nuclear imaging method used to evaluate pathological bone metabolism.",
                                 meaning=NCIT.C17646) )
        setattr(cls, "MRI (NMR)",
                PermissibleValue(text="MRI (NMR)",
                                 description="Imaging that uses radiofrequency waves and a strong magnetic field rather than x-rays to provide detailed pictures of internal organs and tissues. The technique is valuable for the diagnosis of many pathologic conditions, including cancer, heart and vascular disease, stroke, and joint and musculoskeletal disorders.",
                                 meaning=NCIT.C16809) )
        setattr(cls, "X-ray",
                PermissibleValue(text="X-ray",
                                 description="A radiographic procedure using the emission of x-rays to form an image of the structure penetrated by the radiation.",
                                 meaning=NCIT.C38101) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class OrthopedicProcedureEnum(EnumDefinitionImpl):

    Chondroplasty = PermissibleValue(text="Chondroplasty",
                                                 description="An outpatient procedure to repair damaged cartilage in the knee.",
                                                 meaning=NCIT.C178090)
    Osteotomy = PermissibleValue(text="Osteotomy",
                                         description="Surgical cutting or removal of bone.",
                                         meaning=NCIT.C51903)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="OrthopedicProcedureEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Arthroplasty, Hemi/Resurfacing",
                PermissibleValue(text="Arthroplasty, Hemi/Resurfacing",
                                 description="The trimming and capping of the joint head with ceramic, metal or plastic components and the removal of damaged bone and cartilage within the socket and replacement with a metal shell.",
                                 meaning=NCIT.C178086) )
        setattr(cls, "Arthroplasty, Total",
                PermissibleValue(text="Arthroplasty, Total",
                                 description="The removal of the joint head and neck, and replacement with ceramic, metal or plastic components and the removal of damaged bone and cartilage within the socket and replacement with a metal shell.",
                                 meaning=NCIT.C178087) )
        setattr(cls, "Bone Graft, Free Vascularized",
                PermissibleValue(text="Bone Graft, Free Vascularized",
                                 description="Bone grafts that have their own blood supply.",
                                 meaning=NCIT.C178088) )
        setattr(cls, "Bone Graft, Nonvascularized",
                PermissibleValue(text="Bone Graft, Nonvascularized",
                                 description="Bone grafts without a blood supply.",
                                 meaning=NCIT.C178089) )
        setattr(cls, "Core Decompression",
                PermissibleValue(text="Core Decompression",
                                 description="A surgical procedure in which areas of dead bone are drilled to increase blood flow, slow or stop tissue destruction and decrease pressure.",
                                 meaning=NCIT.C157826) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AePathogenEnum(EnumDefinitionImpl):

    Bacteria = PermissibleValue(text="Bacteria",
                                       description="Unicellular, prokaryotic organisms that reproduce by cell division and usually have cell walls; can be shaped like spheres, rods or spirals and can be found in virtually any environment.",
                                       meaning=NCIT.C14187)
    Virus = PermissibleValue(text="Virus",
                                 description="An infectious agent which consists of two parts, genetic material and a protein coat. These organisms lack independent metabolism, and they must infect the cells of other types of organisms to reproduce. Most viruses are capable of passing through fine filters that retain bacteria, and are not visible through a light microscope.",
                                 meaning=NCIT.C14283)
    Fungus = PermissibleValue(text="Fungus",
                                   description="A kingdom of eukaryotic, heterotrophic organisms that live as saprobes or parasites, including mushrooms, yeasts, smuts, molds, etc. They reproduce either sexually or asexually, and have life cycles that range from simple to complex. Filamentous fungi refer to those that grow as multicellular colonies (mushrooms and molds).",
                                   meaning=NCIT.C14209)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AePathogenEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class InfectionClassificationEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="InfectionClassificationEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Clinically Documented",
                PermissibleValue(text="Clinically Documented",
                                 description="Documentation supporting direct medical treatment or testing.",
                                 meaning=NCIT.C178092) )
        setattr(cls, "Microbiologically Documented Non-Sterile Site",
                PermissibleValue(text="Microbiologically Documented Non-Sterile Site",
                                 description="Documentation that supports the site was microbiologically non-sterile.",
                                 meaning=NCIT.C178093) )
        setattr(cls, "Microbiologically Documented Sterile Site",
                PermissibleValue(text="Microbiologically Documented Sterile Site",
                                 description="Documentation that supports the site was microbiologically sterile.",
                                 meaning=NCIT.C178094) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AdverseEventEnum(EnumDefinitionImpl):

    Infection = PermissibleValue(text="Infection",
                                         description="The invasion of an organism's body tissues by disease-causing agents and their multiplication, as well as the reaction by the host to these organisms and/or toxins that the organisms produce.",
                                         meaning=NCIT.C128320)
    Typhlitis = PermissibleValue(text="Typhlitis",
                                         description="Inflammation of the cecum, usually accompanied by neutropenia.",
                                         meaning=NCIT.C38043)
    Hyperbilirubinemia = PermissibleValue(text="Hyperbilirubinemia",
                                                           description="Abnormally high level of bilirubin in the blood. Excess bilirubin is associated with jaundice.",
                                                           meaning=NCIT.C27088)
    Hemorrhage = PermissibleValue(text="Hemorrhage",
                                           description="The flow of blood from a ruptured blood vessel.",
                                           meaning=NCIT.C26791)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Neuropathy = PermissibleValue(text="Neuropathy",
                                           description="A disorder affecting the cranial nerves or the peripheral nervous system. It manifests with pain, tingling, numbness, and muscle weakness. It may be the result of physical injury, toxic substances, viral diseases, diabetes, renal failure, cancer, and drugs.",
                                           meaning=NCIT.C4731)
    Ototoxicity = PermissibleValue(text="Ototoxicity",
                                             description="Damage to the inner ear as a result of exposure to drugs or chemicals.",
                                             meaning=NCIT.C66929)
    Mucositis = PermissibleValue(text="Mucositis",
                                         description="Inflammation of the mucous membranes.",
                                         meaning=NCIT.C115965)
    Neutropenia = PermissibleValue(text="Neutropenia",
                                             description="A decrease in the number of neutrophils in the peripheral blood.",
                                             meaning=NCIT.C80520)
    Thrombocytopenia = PermissibleValue(text="Thrombocytopenia",
                                                       description="A laboratory test result indicating that there is an abnormally small number of platelets in the circulating blood.",
                                                       meaning=NCIT.C3408)
    Rashes = PermissibleValue(text="Rashes",
                                   description="Any change in the skin which affects its appearance or texture. A rash may be localized to one part of the body, or affect all the skin. Rashes may cause the skin to change color, itch, become warm, bumpy, dry, cracked or blistered, swell and may be painful.",
                                   meaning=NCIT.C39594)
    Fatigue = PermissibleValue(text="Fatigue",
                                     description="Overall tiredness and lack of energy.",
                                     meaning=NCIT.C3036)

    _defn = EnumDefinition(
        name="AdverseEventEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Left Ventricular Systolic Dysfunction",
                PermissibleValue(text="Left Ventricular Systolic Dysfunction",
                                 description="The degree of impairment of the left cardiac ventricle to contract efficiently. (ACC)",
                                 meaning=NCIT.C64251) )
        setattr(cls, "Sinusoidal Obstruction Syndrome",
                PermissibleValue(text="Sinusoidal Obstruction Syndrome",
                                 description="A disorder characterized by inflammation and damage of the hepatic sinusoidal endothelial cells of the hepatic venules that leads to venular occlusion and hepatocellular necrosis. It is most often a conditioning-related toxicity that results as a complication of hematopoietic stem cell transplantation (HSCT). It has also been described in populations of individuals who have ingested pyrrolizidine plant alkaloids. The clinical signs and symptoms include hyperbilirubinemia, hepatomegaly, and fluid retention.",
                                 meaning=NCIT.C26793) )
        setattr(cls, "Multi Organ Failure",
                PermissibleValue(text="Multi Organ Failure",
                                 description="Complete impairment of two or more organs or organ systems.",
                                 meaning=NCIT.C75568) )
        setattr(cls, "Neurotoxicity Syndrome",
                PermissibleValue(text="Neurotoxicity Syndrome",
                                 description="A group of neurologic disorders caused by damage to the nervous system following exposure to pharmacologic, biologic, and chemical agents. Examples of neurotoxins include chemotherapy agents, radiation treatment, heavy metals, pesticides, and food additives.",
                                 meaning=NCIT.C27961) )
        setattr(cls, "Graft Versus Host Disease",
                PermissibleValue(text="Graft Versus Host Disease",
                                 description="A reaction, which may be fatal, in an immunocompromised subject (host) who has received an antigenically incompatible tissue transplant (graft) from an immunocompetent donor. The reaction is secondary to the activation of the transplanted cells against those host tissues that express an antigen not expressed by the donor, and is seen most commonly following bone marrow transplantation; acute disease is seen after 5-40 days, and chronic disease occurs weeks to months after transplantation.",
                                 meaning=NCIT.C3063) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Treatment, NOS",
                PermissibleValue(text="Treatment, NOS",
                                 description="Inflammation of the cecum, usually accompanied by neutropenia.",
                                 meaning=NCIT.C38043) )
        setattr(cls, "Renal Toxicity",
                PermissibleValue(text="Renal Toxicity",
                                 description="Toxicity that impairs or damages the kidney. This condition is often caused by the administration of a pharmaceutical agent that causes damage to the kidney.",
                                 meaning=NCIT.C115459) )
        setattr(cls, "Pulmonary Toxicity",
                PermissibleValue(text="Pulmonary Toxicity",
                                 description="Toxicity that impairs or damages the lung(s). This condition is often caused by the administration of a pharmaceutical agent that causes damage to the lungs.",
                                 meaning=NCIT.C177374) )
        setattr(cls, "Allergic reaction",
                PermissibleValue(text="Allergic reaction",
                                 description="An immune response that occurs following re-exposure to an innocuous antigen, and that requires the presence of existing antibodies against that antigen. This response involves the binding of IgE to mast cells, and may worsen with repeated exposures.",
                                 meaning=NCIT.C114476) )
        setattr(cls, "Hepatic Toxicity",
                PermissibleValue(text="Hepatic Toxicity",
                                 description="Toxicity that impairs or damages the liver.",
                                 meaning=NCIT.C185645) )
        setattr(cls, "Cardiac Toxicity",
                PermissibleValue(text="Cardiac Toxicity",
                                 description="Toxicity that impairs or damages the heart. This condition is often caused by the administration of a pharmaceutical agent that initiates a poisonous or toxic response in cardiac tissue.",
                                 meaning=NCIT.C27994) )
        setattr(cls, "GI toxicity",
                PermissibleValue(text="GI toxicity",
                                 description="Toxicity that impairs or damages the gastrointestinal system.",
                                 meaning=NCIT.C185646) )
        setattr(cls, "Endocrine toxicity",
                PermissibleValue(text="Endocrine toxicity",
                                 description="Indicates that a toxicity adverse effect has been experienced during endocrine drug treatment.",
                                 meaning=NCIT.C138163) )
        setattr(cls, "Musculoskeletal toxicity",
                PermissibleValue(text="Musculoskeletal toxicity",
                                 description="A toxicity that impairs or damages the musculoskeletal system.",
                                 meaning=NCIT.C185647) )

class InterventionEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="InterventionEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "ACE-Inhibitor",
                PermissibleValue(text="ACE-Inhibitor",
                                 description="Any substance that inhibits angiotensin-converting enzyme (ACE), an enzyme that catalyzes the conversion of angiotensin I to angiotensin II. Inhibition of ACE results in a reduction in angiotensin II and angiotensin II-induced aldosterone secretion, causing vasodilation and natriuresis.",
                                 meaning=NCIT.C247) )
        setattr(cls, "Ionotropic Support",
                PermissibleValue(text="Ionotropic Support",
                                 description="An agent used to modify the strength of the contraction of the heart muscle.",
                                 meaning=NCIT.C168966) )
        setattr(cls, "Heart Transplant",
                PermissibleValue(text="Heart Transplant",
                                 description="A surgical procedure in which a damaged heart is removed and replaced by another heart from a suitable donor.",
                                 meaning=NCIT.C15246) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class GvhdAcuityEnum(EnumDefinitionImpl):

    Acute = PermissibleValue(text="Acute",
                                 description="A syndrome of immunologically mediated tissue damage that may occur following an allogeneic transplant, usually affecting the skin, liver, and GI tract. The onset is usually within one hundred days of transplantation or immunologic manipulation.",
                                 meaning=NCIT.C4980)
    Chronic = PermissibleValue(text="Chronic",
                                     description="A syndrome of immunologically mediated tissue damage that may occur following an allogeneic transplant, and may affect multiple organs with manifestations similar to autoimmune diseases. The onset is usually within three years of transplantation or immunologic manipulation.",
                                     meaning=NCIT.C4981)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="GvhdAcuityEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class GvhdOrganEnum(EnumDefinitionImpl):

    Skin = PermissibleValue(text="Skin",
                               description="An organ that constitutes the external surface of the body. It consiRMS of the epidermis, dermis, and skin appendages.",
                               meaning=NCIT.C12470)
    Liver = PermissibleValue(text="Liver",
                                 description="A triangular-shaped organ located under the diaphragm in the right hypochondrium. It is the largest internal organ of the body, weighting up to 2 kg. Metabolism and bile secretion are its main functions. It is composed of cells which have the ability to regenerate.",
                                 meaning=NCIT.C12392)
    Lung = PermissibleValue(text="Lung",
                               description="One of a pair of viscera occupying the pulmonary cavities of the thorax, the organs of respiration in which aeration of the blood takes place. As a rule, the right lung is slightly larger than the left and is divided into three lobes (an upper, a middle, and a lower or basal), while the left has two lobes (an upper and a lower or basal). Each lung is irregularly conical in shape, presenting a blunt upper extremity (the apex), a concave base following the curve of the diaphragm, an outer convex surface (costal surface), an inner or mediastinal surface (mediastinal surface), a thin and sharp anterior border, and a thick and rounded posterior border.",
                               meaning=NCIT.C12468)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="GvhdOrganEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Gastrointestinal Tract",
                PermissibleValue(text="Gastrointestinal Tract",
                                 description="The upper gastrointestinal (GI) tract is comprised of mouth, pharynx, esophagus and stomach while the lower GI tract consiRMS of intestines and anus. The primary function of the GI tract is to ingest, digest, absorb and ultimately excrete food stuff.",
                                 meaning=NCIT.C34082) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AeOutcomeEnum(EnumDefinitionImpl):

    Recovered = PermissibleValue(text="Recovered",
                                         description="One of the possible results of an adverse event outcome where the subject recuperated and is free of any pathological conditions resulting from the prior disease or injury.",
                                         meaning=NCIT.C85257)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AeOutcomeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Death, Contributory",
                PermissibleValue(text="Death, Contributory",
                                 description="Any adverse event contributing to the cause of death.",
                                 meaning=NCIT.C168948) )
        setattr(cls, "Death, Noncontributory",
                PermissibleValue(text="Death, Noncontributory",
                                 description="The adverse event did not directly contribute to the death of the subject.",
                                 meaning=NCIT.C173315) )
        setattr(cls, "Not Yet Recovered",
                PermissibleValue(text="Not Yet Recovered",
                                 description="One of the possible results of an adverse event outcome that indicates that the event has not improved or recuperated.",
                                 meaning=NCIT.C49494) )
        setattr(cls, "Recovered with Sequelae",
                PermissibleValue(text="Recovered with Sequelae",
                                 description="One of the possible results of an adverse event outcome where the subject recuperated but retained pathological conditions resulting from the prior disease or injury.",
                                 meaning=NCIT.C49495) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ConfirmedNotreportedSuspectedUnknownEnum(EnumDefinitionImpl):

    Confirmed = PermissibleValue(text="Confirmed",
                                         description="Having been established or verified.",
                                         meaning=NCIT.C25458)
    Suspected = PermissibleValue(text="Suspected",
                                         description="Believed likely.",
                                         meaning=NCIT.C71458)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ConfirmedNotreportedSuspectedUnknownEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class NoNotreportedUnknownYesEnum(EnumDefinitionImpl):

    Yes = PermissibleValue(text="Yes",
                             description="The affirmative response to a question.",
                             meaning=NCIT.C49488)
    No = PermissibleValue(text="No",
                           description="The non-affirmative response to a question.",
                           meaning=NCIT.C49487)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="NoNotreportedUnknownYesEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class AbsentNotreportedPresentUnknownEnum(EnumDefinitionImpl):

    Present = PermissibleValue(text="Present",
                                     description="Being or existing in a specified place or at the specified time.",
                                     meaning=NCIT.C25626)
    Absent = PermissibleValue(text="Absent",
                                   description="Not existing in a specified place at a specified time.",
                                   meaning=NCIT.C48190)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="AbsentNotreportedPresentUnknownEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class SmnFieldEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="SmnFieldEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "In XRT field",
                PermissibleValue(text="In XRT field",
                                 description="Within the confines of the radiation field.",
                                 meaning=NCIT.C175045) )
        setattr(cls, "Out of XRT field",
                PermissibleValue(text="Out of XRT field",
                                 description="Outside the confines of the radiation field.",
                                 meaning=NCIT.C175046) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "In XRT Field",
                PermissibleValue(text="In XRT Field",
                                 description="Within the confines of the radiation field.",
                                 meaning=NCIT.C175045) )
        setattr(cls, "Margin of XRT Field",
                PermissibleValue(text="Margin of XRT Field",
                                 description="The outer aspect of the x-ray therapy field.",
                                 meaning=NCIT.C185695) )
        setattr(cls, "Out of XRT Field",
                PermissibleValue(text="Out of XRT Field",
                                 description="Outside the confines of the radiation field.",
                                 meaning=NCIT.C175046) )

class SmnEnum(EnumDefinitionImpl):

    Leukemia = PermissibleValue(text="Leukemia",
                                       description="A malignant (clonal) hematologic disorder, involving hematopoietic stem cells and characterized by the presence of primitive or atypical myeloid or lymphoid cells in the bone marrow and the blood. Leukemias are classified as acute or chronic based on the degree of cellular differentiation and the predominant cell type present. Leukemia is usually associated with anemia, fever, hemorrhagic episodes, and splenomegaly. Common leukemias include acute myeloid leukemia, chronic myelogenous leukemia, acute lymphoblastic or precursor lymphoblastic leukemia, and chronic lymphocytic leukemia. Treatment is vital to patient survival; untreated, the natural course of acute leukemias is normally measured in weeks or months, while that of chronic leukemias is more often measured in months or years.",
                                       meaning=NCIT.C3161)
    Sarcoma = PermissibleValue(text="Sarcoma",
                                     description="A usually aggressive malignant neoplasm of the soft tissue or bone. It arises from muscle, fat, fibrous tissue, bone, cartilage, and blood vessels. Sarcomas occur in both children and adults. The prognosis depends largely on the degree of differentiation (grade) of the neoplasm. Representative subtypes are liposarcoma, leiomyosarcoma, osteosarcoma, and chondrosarcoma.",
                                     meaning=NCIT.C9118)
    Carcinoma = PermissibleValue(text="Carcinoma",
                                         description="A malignant tumor arising from epithelial cells. Carcinomas that arise from glandular epithelium are called adenocarcinomas, those that arise from squamous epithelium are called squamous cell carcinomas, and those that arise from transitional epithelium are called transitional cell carcinomas. Morphologically, the malignant epithelial cells may display abnormal mitotic figures, anaplasia, and necrosis. Carcinomas are graded by the degree of cellular differentiation as well, moderately, or poorly differentiated. Carcinomas invade the surrounding tissues and tend to metastasize to other anatomic sites. Lung carcinoma, skin carcinoma, breast carcinoma, colon carcinoma, and prostate carcinoma are the most frequently seen carcinomas.",
                                         meaning=NCIT.C2916)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    Glioblastoma = PermissibleValue(text="Glioblastoma",
                                               description="The most malignant astrocytic tumor (WHO grade 4). It is composed of poorly differentiated neoplastic astrocytes and is characterized by the presence of cellular polymorphism, nuclear atypia, brisk mitotic activity, vascular thrombosis, microvascular proliferation, and necrosis. It typically affects adults and is preferentially located in the cerebral hemispheres. (Adapted from WHO)",
                                               meaning=NCIT.C3058)
    Osteosarcoma = PermissibleValue(text="Osteosarcoma",
                                               description="A usually aggressive malignant bone-forming mesenchymal neoplasm, predominantly affecting adolescents and young adults. It usually involves bones and less frequently extraosseous sites. It often involves the long bones (particularly distal femur, proximal tibia, and proximal humerus). Pain with or without a palpable mass is the most frequent clinical symptom. It may spread to other anatomic sites, particularly the lungs.",
                                               meaning=NCIT.C9145)
    Melanoma = PermissibleValue(text="Melanoma",
                                       description="A malignant, usually aggressive tumor composed of atypical, neoplastic melanocytes. Most often, melanomas arise in the skin (cutaneous melanomas) and include the following histologic subtypes: superficial spreading melanoma, nodular melanoma, acral lentiginous melanoma, and lentigo maligna melanoma. Cutaneous melanomas may arise from acquired or congenital melanocytic or dysplastic nevi. Melanomas may also arise in other anatomic sites including the gastrointestinal system, eye, urinary tract, and reproductive system. Melanomas frequently metastasize to lymph nodes, liver, lungs, and brain.",
                                       meaning=NCIT.C3224)

    _defn = EnumDefinition(
        name="SmnEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "Low Grade Glioma",
                PermissibleValue(text="Low Grade Glioma",
                                 description="A grade I or grade II glioma arising from the central nervous system. This category includes pilocytic astrocytoma, diffuse astrocytoma, subependymal giant cell astrocytoma, ependymoma, oligodendroglioma, oligoastrocytoma, and angiocentric glioma.",
                                 meaning=NCIT.C132067) )
        setattr(cls, "Soft Tissue Sarcoma",
                PermissibleValue(text="Soft Tissue Sarcoma",
                                 description="A malignant neoplasm arising from muscle tissue, adipose tissue, blood vessels, fibrous tissue, or other supportive tissues excluding the bones.",
                                 meaning=NCIT.C9306) )
        setattr(cls, "Not Applicable",
                PermissibleValue(text="Not Applicable",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class ProMeasuresEnum(EnumDefinitionImpl):

    Unknown = PermissibleValue(text="Unknown",
                                     description="Reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)
    SAM = PermissibleValue(text="SAM",
                             description="A patient reported outcome measure that refelects the physical, emotional, social, financial well being and sexuality of individuals with sarcoma.",
                             meaning=NCIT.C186690)
    GRC = PermissibleValue(text="GRC",
                             description="A scale designed to quantify a patient's improvement or deterioration over time during the clinical course of a condition.",
                             meaning=NCIT.C186691)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="ProMeasuresEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Fact NTX",
                PermissibleValue(text="Fact NTX",
                                 description="A questionnaire tool to assess the neurotoxic effects of cancer therapy.",
                                 meaning=NCIT.C177378) )
        setattr(cls, "PedsQL Multi-Dimensional Fatigue Scale",
                PermissibleValue(text="PedsQL Multi-Dimensional Fatigue Scale",
                                 description="An 18 item component of the Pediatric Quality of Life Inventory is a generic symptom-specific instrument to measure fatigue in pediatric patients ages 2-18 comprised of General Fatigue, Sleep/Rest Fatigue, and Cognitive Fatigue domains.",
                                 meaning=NCIT.C131369) )
        setattr(cls, "PedsQL 4.0 Generic Core Scale",
                PermissibleValue(text="PedsQL 4.0 Generic Core Scale",
                                 description="Child self-report and parent proxy report scales developed to measure health-related quality of life issues in children and adolescents aged 2-18.",
                                 meaning=NCIT.C177379) )
        setattr(cls, "AYA-HEARS",
                PermissibleValue(text="AYA-HEARS",
                                 description="A questionnaire designed to measure hearing loss or problems experienced by patients who have received treatment for cancer.",
                                 meaning=NCIT.C131878) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )
        setattr(cls, "PROMIS Global",
                PermissibleValue(text="PROMIS Global",
                                 description="A 10 question instrument designed provide an efficient way of gathering general perceptions of health.",
                                 meaning=NCIT.C103253) )
        setattr(cls, "PROMIS Fatigue Short Form",
                PermissibleValue(text="PROMIS Fatigue Short Form",
                                 description="A self-report tool that evaluates fatigue over a range of symptoms, from mild subjective feelings of tiredness to an overwhelming, debilitating, and sustained sense of exhaustion that likely decreases one's ability to execute daily activities and function normally in family or social roles. The fatigue short form is generic rather than disease specific and assesses fatigue over the past seven days.",
                                 meaning=NCIT.C129493) )
        setattr(cls, "PRO-CTCAE",
                PermissibleValue(text="PRO-CTCAE",
                                 description="A library of items for patient self-reporting of symptoms and side effects associated with cancer treatment trials.",
                                 meaning=NCIT.C103843) )
        setattr(cls, "PEDPRO-CTCAE",
                PermissibleValue(text="PEDPRO-CTCAE",
                                 description="A measurement system that characterized the frequency, severity, interference,and presence/absence of symptomatic toxicities that include pain, fatigue, nausea, and cutaneous side effects such as rash and hand-foot syndrome, all toxicities that can be meaningfully reported from the patient prespective. The pediatric module permits self-reporting by children and adolescents ages 7-17 years.",
                                 meaning=NCIT.C186439) )
        setattr(cls, "TESS Lower Extremity",
                PermissibleValue(text="TESS Lower Extremity",
                                 description="A self-administered questionnaire designed to assess physical disability for patients undergoing lower limb salvage sugery for musculoskeletal tumors.",
                                 meaning=NCIT.C121218) )
        setattr(cls, "EORTC QLQ-C30",
                PermissibleValue(text="EORTC QLQ-C30",
                                 description="A scale used both for the subjective scoring of a person's overall health, and for their quality of life, that ranges from 1: Very Poor to 7: Excellent.",
                                 meaning=NCIT.C120497) )
        setattr(cls, "TESS Upper Extremity",
                PermissibleValue(text="TESS Upper Extremity",
                                 description="A self-administered questionnaire designed to assess physical disability for patients undergoing upper limb salvage surgery for musculoskeletal tumors.",
                                 meaning=NCIT.C121219) )

class ProMeasurementTypeEnum(EnumDefinitionImpl):

    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Not known, observed, recorded; or reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="ProMeasurementTypeEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Health Profile",
                PermissibleValue(text="Health Profile",
                                 description="Measures a person's perceptions of the social impact of oral disorders on their well-being; measures self-reported dysfunction, discomfort and disability attributed to oral conditions.",
                                 meaning=NCIT.C62359) )
        setattr(cls, "Health Utility",
                PermissibleValue(text="Health Utility",
                                 description="A patient reported outcomes tool that reflects the level of physical, mental, and social functioning associated with a particular health state.",
                                 meaning=NCIT.C185674) )
        setattr(cls, "Symptom Scale",
                PermissibleValue(text="Symptom Scale",
                                 description="A patient reported questionnaire composed of rating scales developed to measure the degree of distress experienced by the patient for specific symptoms.",
                                 meaning=NCIT.C124147) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C432234) )

class RatersEnum(EnumDefinitionImpl):

    Subject = PermissibleValue(text="Subject",
                                     description="A matter or an individual that is observed, analyzed, examined, investigated, experimented upon, or/and treated in the course of a particular study.",
                                     meaning=NCIT.C41189)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Not known, observed, recorded; or reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="RatersEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Parent/Guardian",
                PermissibleValue(text="Parent/Guardian",
                                 description="The parent and or the guardian of the individual.",
                                 meaning=NCIT.C185701) )
        setattr(cls, "Subject and Parent/Guardian",
                PermissibleValue(text="Subject and Parent/Guardian",
                                 description="The subject and the parent and/or guardian.",
                                 meaning=NCIT.C185702) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C43234) )

class TimePointEnum(EnumDefinitionImpl):

    Baseline = PermissibleValue(text="Baseline",
                                       description="A starting point to which things may be compared.",
                                       meaning=NCIT.C25213)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)
    Unknown = PermissibleValue(text="Unknown",
                                     description="Not known, observed, recorded; or reported as unknown by the data contributor.",
                                     meaning=NCIT.C17998)

    _defn = EnumDefinition(
        name="TimePointEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "On Treatment",
                PermissibleValue(text="On Treatment",
                                 description="The time during which a patient is receiving treatment.",
                                 meaning=NCIT.C142170) )
        setattr(cls, "End of Treatment",
                PermissibleValue(text="End of Treatment",
                                 description="The end of the planned treatment.",
                                 meaning=NCIT.C168935) )
        setattr(cls, "Follow-Up Assessment",
                PermissibleValue(text="Follow-Up Assessment",
                                 description="An assessment performed as a follow-up to a treatment.",
                                 meaning=NCIT.C185703) )
        setattr(cls, "Not Reported",
                PermissibleValue(text="Not Reported",
                                 description="Not provided or available.",
                                 meaning=NCIT.C432234) )

class LateEffectEnum(EnumDefinitionImpl):

    Fatigue = PermissibleValue(text="Fatigue",
                                     description="Overall tiredness and lack of energy.",
                                     meaning=NCIT.C3036)
    Xerostomia = PermissibleValue(text="Xerostomia",
                                           description="Dryness of the oral mucosa secondary to a decrease in saliva production, or a change in saliva composition.",
                                           meaning=NCIT.C26917)
    Arrhythmia = PermissibleValue(text="Arrhythmia",
                                           description="Any variation from the normal rate or rhythm (which may include the origin of the impulse and/or its subsequent propagation) in the heart.",
                                           meaning=NCIT.C2881)
    Pericarditis = PermissibleValue(text="Pericarditis",
                                               description="An inflammatory process affecting the pericardium.",
                                               meaning=NCIT.C34915)
    Hypertension = PermissibleValue(text="Hypertension",
                                               description="Blood pressure that is abnormally high.",
                                               meaning=NCIT.C3117)
    Osteopenia = PermissibleValue(text="Osteopenia",
                                           description="Decreased calcification or density of bone tissue.",
                                           meaning=NCIT.C50910)
    Osteoporosis = PermissibleValue(text="Osteoporosis",
                                               description="A condition of reduced bone mass, with decreased cortical thickness and a decrease in the number and size of the trabeculae of cancellous bone (but normal chemical composition), resulting in increased fracture incidence. Osteoporosis is classified as primary (Type 1, postmenopausal osteoporosis; Type 2, age-associated osteoporosis; and idiopathic, which can affect juveniles, premenopausal women, and middle-aged men) and secondary osteoporosis (which results from an identifiable cause of bone mass loss).",
                                               meaning=NCIT.C3298)
    Scoliosis = PermissibleValue(text="Scoliosis",
                                         description="A congenital or acquired spinal deformity characterized by lateral curvature of the spine.",
                                         meaning=NCIT.C78603)
    Arthritis = PermissibleValue(text="Arthritis",
                                         description="An inflammatory process affecting a joint. Causes include infection, autoimmune processes, degenerative processes, and trauma. Signs and symptoms may include swelling around the affected joint and pain.",
                                         meaning=NCIT.C2883)
    Neuropathy = PermissibleValue(text="Neuropathy",
                                           description="A disorder affecting the cranial nerves or the peripheral nervous system. It manifests with pain, tingling, numbness, and muscle weakness. It may be the result of physical injury, toxic substances, viral diseases, diabetes, renal failure, cancer, and drugs.",
                                           meaning=NCIT.C4731)
    Neurocognitive = PermissibleValue(text="Neurocognitive",
                                                   description="Having to do with the ability to think and reason. This includes the ability to concentrate, remember things, process information, learn, speak, and understand.",
                                                   meaning=NCIT.C94321)
    Stroke = PermissibleValue(text="Stroke",
                                   description="A sudden loss of neurological function secondary to hemorrhage or ischemia in the brain parenchyma due to a vascular event.",
                                   meaning=NCIT.C3390)
    Dryness = PermissibleValue(text="Dryness",
                                     description="The lack of natural or normal moisture.",
                                     meaning=NCIT.C25489)
    Atrophy = PermissibleValue(text="Atrophy",
                                     description="Any weakening or degeneration, especially through lack of use.",
                                     meaning=NCIT.C79748)
    Contraction = PermissibleValue(text="Contraction",
                                             description="The process where thick (myosin) and thin (actin) filaments slide against each other to produce a shortening or tensing of the muscle cell or fiber.",
                                             meaning=NCIT.C75585)
    Scarring = PermissibleValue(text="Scarring",
                                       description="A permanent mark left on the skin in the process of wound healing.",
                                       meaning=NCIT.C34483)
    Telengectasia = PermissibleValue(text="Telengectasia",
                                                 description="Local dilatation of small vessels resulting in red discoloration of the skin or mucous membranes.",
                                                 meaning=NCIT.C28194)
    Pancreatitis = PermissibleValue(text="Pancreatitis",
                                               description="Inflammation of the pancreas.",
                                               meaning=NCIT.C3306)
    Esophagitis = PermissibleValue(text="Esophagitis",
                                             description="An acute or chronic inflammatory process affecting the esophageal wall.",
                                             meaning=NCIT.C9224)
    Gastritis = PermissibleValue(text="Gastritis",
                                         description="Inflammation of the stomach.",
                                         meaning=NCIT.C26780)
    Hyperthyroid = PermissibleValue(text="Hyperthyroid",
                                               description="Overactivity of the thyroid gland resulting in overproduction of thyroid hormone and increased metabolic rate. Causes include diffuse hyperplasia of the thyroid gland (Graves' disease), single nodule in the thyroid gland, and thyroiditis. The symptoms are related to the increased metabolic rate and include weight loss, fatigue, heat intolerance, excessive sweating, diarrhea, tachycardia, insomnia, muscle weakness, and tremor.",
                                               meaning=NCIT.C3123)
    Hypothyroid = PermissibleValue(text="Hypothyroid",
                                             description="Abnormally low levels of thyroid hormone.",
                                             meaning=NCIT.C26800)
    Ammenorrhea = PermissibleValue(text="Ammenorrhea",
                                             description="The absence of menses in a woman who has achieved reproductive age.",
                                             meaning=NCIT.C61443)
    Asthma = PermissibleValue(text="Asthma",
                                   description="A chronic respiratory disease manifested as difficulty breathing due to the narrowing of bronchial passageways.",
                                   meaning=NCIT.C28397)
    AKI = PermissibleValue(text="AKI",
                             description="Sudden and sustained deterioration of the kidney function characterized by decreased glomerular filtration rate, increased serum creatinine or oliguria.",
                             meaning=NCIT.C26808)
    AIN = PermissibleValue(text="AIN",
                             description="A condition characterized by the autoantibody-induced destruction of neutrophils.",
                             meaning=NCIT.C176730)
    Other = PermissibleValue(text="Other",
                                 description="Different than the one(s) previously specified or mentioned.",
                                 meaning=NCIT.C17649)

    _defn = EnumDefinition(
        name="LateEffectEnum",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Endocrine Disorder",
                PermissibleValue(text="Endocrine Disorder",
                                 description="A non-neoplastic or neoplastic disorder that affects the endocrine system. Representative examples of non-neoplastic disorders include diabetes mellitus, hyperthyroidism, and adrenal gland insufficiency. Representative examples of neoplastic disorders include carcinoid tumor, neuroendocrine carcinoma, and pheochromocytoma.",
                                 meaning=NCIT.C3009) )
        setattr(cls, "Cardiovascular Disorder",
                PermissibleValue(text="Cardiovascular Disorder",
                                 description="A non-neoplastic or neoplastic disorder affecting the heart or the vessels (arteries, veins and lymph vessels). Representative examples of non-neoplastic cardiovascular disorders are endocarditis and hypertension. Representative examples of neoplastic cardiovascular disorders are endocardial myxoma and angiosarcoma.",
                                 meaning=NCIT.C2931) )
        setattr(cls, "Muskuloskeletal Disorder",
                PermissibleValue(text="Muskuloskeletal Disorder",
                                 description="A non-neoplastic or neoplastic disorder that affects muscles and bones.",
                                 meaning=NCIT.C107377) )
        setattr(cls, "Neurological Disorder",
                PermissibleValue(text="Neurological Disorder",
                                 description="A non-neoplastic or neoplastic disorder that affects the brain, spinal cord, or peripheral nerves.",
                                 meaning=NCIT.C26835) )
        setattr(cls, "Pulmonary Disorder",
                PermissibleValue(text="Pulmonary Disorder",
                                 description="A non-neoplastic or neoplastic disorder affecting the lung. Representative examples of non-neoplastic disorders include chronic obstructive pulmonary disease and pneumonia. Representative examples of neoplastic disorders include benign processes (e.g., respiratory papilloma) and malignant processes (e.g., lung carcinoma and metastatic cancer to the lung).",
                                 meaning=NCIT.C3198) )
        setattr(cls, "Breast Hypoplasia",
                PermissibleValue(text="Breast Hypoplasia",
                                 description="Underdevelopment of the breast.",
                                 meaning=NCIT.C78222) )
        setattr(cls, "Dermatologic Disorder",
                PermissibleValue(text="Dermatologic Disorder",
                                 description="Any deviation from the normal structure or function of the skin or subcutaneous tissue that is manifested by a characteristic set of symptoms and signs.",
                                 meaning=NCIT.C3371) )
        setattr(cls, "Genitourinary Disorder",
                PermissibleValue(text="Genitourinary Disorder",
                                 description="A non-neoplastic or neoplastic disorder that affects the genitourinary system.",
                                 meaning=NCIT.C156660) )
        setattr(cls, "Immunologic Disorder",
                PermissibleValue(text="Immunologic Disorder",
                                 description="A disorder resulting from an abnormality in the immune system.",
                                 meaning=NCIT.C3507) )
        setattr(cls, "GI Disorder",
                PermissibleValue(text="GI Disorder",
                                 description="A non-neoplastic or neoplastic disorder that affects the gastrointestinal tract, anus, liver, biliary system, and pancreas.",
                                 meaning=NCIT.C2990) )
        setattr(cls, "Psychiatric Disorder",
                PermissibleValue(text="Psychiatric Disorder",
                                 description="A disorder characterized by behavioral and/or psychological abnormalities, often accompanied by physical symptoms. The symptoms may cause clinically significant distress or impairment in social and occupational areas of functioning. Representative examples include anxiety disorders, cognitive disorders, mood disorders and schizophrenia.",
                                 meaning=NCIT.C2893) )
        setattr(cls, "Thyroid Disorder",
                PermissibleValue(text="Thyroid Disorder",
                                 description="A non-neoplastic or neoplastic disorder that affects the thyroid gland. Representative examples include hyperthyroidism, hypothyroidism, thyroiditis, follicular adenoma, and carcinoma.",
                                 meaning=NCIT.C26893) )
        setattr(cls, "Gonadal Dysfunction",
                PermissibleValue(text="Gonadal Dysfunction",
                                 description="A non-neoplastic or neoplastic disorder that affects the testis or the ovary.",
                                 meaning=NCIT.C26786) )
        setattr(cls, "Conduction abnormality",
                PermissibleValue(text="Conduction abnormality",
                                 description="A disorder affecting the conduction system that sends electrical signals in the myocardium.",
                                 meaning=NCIT.C78245) )
        setattr(cls, "Valvular Disease",
                PermissibleValue(text="Valvular Disease",
                                 description="Any heart disorder characterized by a defect in valve structure or function.",
                                 meaning=NCIT.C45525) )
        setattr(cls, "Ventricular Dysfunction",
                PermissibleValue(text="Ventricular Dysfunction",
                                 description="Impairment of the ventricle to either fill or eject adequately.",
                                 meaning=NCIT.C111655) )
        setattr(cls, "Vascular Disorder",
                PermissibleValue(text="Vascular Disorder",
                                 description="A non-neoplastic or neoplastic disorder affecting the arteries, veins, or lymphatic vessels. Examples include vasculitis, thrombophlebitis, arteriosclerosis, lymphedema, hemangioma, and angiosarcoma.",
                                 meaning=NCIT.C35117) )
        setattr(cls, "Avascular-Necrosis",
                PermissibleValue(text="Avascular-Necrosis",
                                 description="Tissue death resulting from an interruption to the blood supply.",
                                 meaning=NCIT.C118385) )
        setattr(cls, "Musculoskeletal Hypoplasia",
                PermissibleValue(text="Musculoskeletal Hypoplasia",
                                 description="Underdevelopment or incomplete development of the musculoskeletal system.",
                                 meaning=NCIT.C185696) )
        setattr(cls, "Restrictive Lung Disease",
                PermissibleValue(text="Restrictive Lung Disease",
                                 description="Decreased lung volume and inadequate ventilation due to parenchymal lung disorders (e.g., interstitial pulmonary fibrosis) or extrapulmonary disorders (e.g., scoliosis). Patients present with shortness of breath and cough.",
                                 meaning=NCIT.C91762) )
        setattr(cls, "Obstructive Lung Disease",
                PermissibleValue(text="Obstructive Lung Disease",
                                 description="A chronic and progressive lung disorder characterized by the loss of elasticity of the bronchial tree and the air sacs, destruction of the air sacs wall, thickening of the bronchial wall, and mucous accumulation in the bronchial tree. The pathologic changes result in the disruption of the air flow in the bronchial airways. Signs and symptoms include shortness of breath, wheezing, productive cough, and chest tightness. The two main types of chronic obstructive pulmonary disease are chronic obstructive bronchitis and emphysema.",
                                 meaning=NCIT.C3199) )
        setattr(cls, "Reactive Airway Disease",
                PermissibleValue(text="Reactive Airway Disease",
                                 description="Coughing, wheezing, or shortness of breath that is triggered by allergens, infection, or other irritants.",
                                 meaning=NCIT.C113673) )
        setattr(cls, "Pigment Changes",
                PermissibleValue(text="Pigment Changes",
                                 description="Abnormal skin pigmentation.",
                                 meaning=NCIT.C124224) )
        setattr(cls, "Renal Disorder",
                PermissibleValue(text="Renal Disorder",
                                 description="A neoplastic or non-neoplastic condition affecting the kidney. Representative examples of non-neoplastic conditions include glomerulonephritis and nephrotic syndrome. Representative examples of neoplastic conditions include benign processes (e.g., renal lipoma and renal fibroma) and malignant processes (e.g., renal cell carcinoma and renal lymphoma).",
                                 meaning=NCIT.C3149) )
        setattr(cls, "Bladder Disorder",
                PermissibleValue(text="Bladder Disorder",
                                 description="A non-neoplastic or neoplastic disorder affecting the urinary bladder. A representative example of non-neoplastic bladder disorder is bacterial bladder infection. A representative example of neoplastic bladder disorder is bladder carcinoma.",
                                 meaning=NCIT.C2900) )
        setattr(cls, "Autoimmune Reaction",
                PermissibleValue(text="Autoimmune Reaction",
                                 description="A specific humoral or cell-mediated immune response against autologous (self) antigens.",
                                 meaning=NCIT.C16313) )
        setattr(cls, "Acquired Immunodeficiency",
                PermissibleValue(text="Acquired Immunodeficiency",
                                 description="A syndrome resulting from the acquired deficiency of cellular immunity caused by the human immunodeficiency virus (HIV). It is characterized by the reduction of the Helper T-lymphocytes in the peripheral blood and the lymph nodes. Symptoms include generalized lymphadenopathy, fever, weight loss, and chronic diarrhea. Patients with AIDS are especially susceptible to opportunistic infections (usually pneumocystis carinii pneumonia, cytomegalovirus (CMV) infections, tuberculosis, candida infections, and cryptococcosis), and the development of malignant neoplasms (usually non-Hodgkin lymphoma and Kaposi sarcoma). The human immunodeficiency virus is transmitted through sexual contact, sharing of contaminated needles, or transfusion of contaminated blood.",
                                 meaning=NCIT.C2851) )
        setattr(cls, "GI Adhesions",
                PermissibleValue(text="GI Adhesions",
                                 description="A fibrous connection of tissue that joins together normally separate gastrointestinal regions.",
                                 meaning=NCIT.C185688) )
        setattr(cls, "Hepatic Dysfunction",
                PermissibleValue(text="Hepatic Dysfunction",
                                 description="A finding that indicates abnormal liver function.",
                                 meaning=NCIT.C50634) )
        setattr(cls, "Thyroid Nodule",
                PermissibleValue(text="Thyroid Nodule",
                                 description="A nodular lesion that develops in the thyroid gland. Causes include adenoma, thyroiditis, fluid-filled cyst, multinodular goiter, and carcinoma.",
                                 meaning=NCIT.C3415) )
        setattr(cls, "Menstrual Cycle Dysfunction",
                PermissibleValue(text="Menstrual Cycle Dysfunction",
                                 description="A category of conditions related to menses.",
                                 meaning=NCIT.C34815) )
        setattr(cls, "Germ Cell Failure, Suspected",
                PermissibleValue(text="Germ Cell Failure, Suspected",
                                 description="Clinical suspicion for germ cell failure not proven with testing.",
                                 meaning=NCIT.C185684) )
        setattr(cls, "Germ Cell Failure, Confirmed",
                PermissibleValue(text="Germ Cell Failure, Confirmed",
                                 description="A germ cell failure confirmed with testing.",
                                 meaning=NCIT.C185685) )
        setattr(cls, "Testosterone Deficiency",
                PermissibleValue(text="Testosterone Deficiency",
                                 description="A disorder characterized by low testosterone.",
                                 meaning=NCIT.C143195) )
        setattr(cls, "Fertility Disorder",
                PermissibleValue(text="Fertility Disorder",
                                 description="Inability to conceive for at least one year after trying and having unprotected sex. Causes of female infertility include endometriosis, fallopian tubes obstruction, and polycystic ovary syndrome. Causes of male infertility include abnormal sperm production or function, blockage of the epididymis, blockage of the ejaculatory ducts, hypospadias, exposure to pesticides, and health related issues.",
                                 meaning=NCIT.C3836) )
        setattr(cls, "Heart Block",
                PermissibleValue(text="Heart Block",
                                 description="A disorder characterized by an electrocardiographic finding of complete failure of atrial electrical impulse conduction to the ventricles. This is manifested on the ECG by disassociation of atrial and ventricular rhythms. The atrial rate must be faster than the ventricular rate. (CDISC)",
                                 meaning=NCIT.C50501) )
        setattr(cls, "Prolonged QT",
                PermissibleValue(text="Prolonged QT",
                                 description="An electrocardiographic finding in which the QT interval not corrected for heart rate is prolonged. Thresholds for different age, gender, and patient populations exist.",
                                 meaning=NCIT.C71034) )
        setattr(cls, "Supraventricular Tachycardia",
                PermissibleValue(text="Supraventricular Tachycardia",
                                 description="A disorder characterized by an electrocardiographic finding of a tachycardia which does not originate in the ventricles or His Purkinje system. There is an abnormally high heart rate and QRS complexes are typically narrow, but aberration or preexcitation may be present.",
                                 meaning=NCIT.C35061) )
        setattr(cls, "Cardiomyopathy, NOS",
                PermissibleValue(text="Cardiomyopathy, NOS",
                                 description="A disease of the heart muscle or myocardium proper. Cardiomyopathies may be classified as either primary or secondary, on the basis of etiology, or on the pathophysiology of the lesion: hypertrophic, dilated, or restrictive.",
                                 meaning=NCIT.C34830) )
        setattr(cls, "Restrictive Cardiomyopathy",
                PermissibleValue(text="Restrictive Cardiomyopathy",
                                 description="A type of heart disorder referring to the inability of the ventricles to fill with blood because the myocardium (heart muscle) stiffens and looses its flexibility. Causes include replacement of the myocardium with scar tissue, abnormal cellular infiltration of the myocardium, or deposition of a substance (e.g., amyloid) in the myocardium.",
                                 meaning=NCIT.C62798) )
        setattr(cls, "Dilated Cardiomyopathy",
                PermissibleValue(text="Dilated Cardiomyopathy",
                                 description="Cardiomyopathy which is characterized by dilation and contractile dysfunction of the left and right ventricles. It may be idiopathic, or it may result from a myocardial infarction, myocardial infection, or alcohol abuse. It is a cause of congestive heart failure.",
                                 meaning=NCIT.C84673) )
        setattr(cls, "Sensory Neuropathy",
                PermissibleValue(text="Sensory Neuropathy",
                                 description="Inflammation or degeneration of the sensory nerves.",
                                 meaning=NCIT.C3501) )
        setattr(cls, "Motor Neuropathy",
                PermissibleValue(text="Motor Neuropathy",
                                 description="Inflammation or degeneration of the peripheral motor nerves.",
                                 meaning=NCIT.C3500) )
        setattr(cls, "Pulmonary Fibrosis",
                PermissibleValue(text="Pulmonary Fibrosis",
                                 description="Chronic progressive interstitial lung disorder characterized by the replacement of the lung tissue by connective tissue, leading to progressive dyspnea, respiratory failure, or right heart failure. Causes include chronic inflammatory processes, exposure to environmental irritants, radiation therapy, autoimmune disorders, certain drugs, or it may be idiopathic (no identifiable cause).",
                                 meaning=NCIT.C26869) )
        setattr(cls, "Decreased Creatinine Clearance",
                PermissibleValue(text="Decreased Creatinine Clearance",
                                 description="A laboratory test finding that indicates decreased creatinine clearance.",
                                 meaning=NCIT.C185671) )
        setattr(cls, "Tubular Damage",
                PermissibleValue(text="Tubular Damage",
                                 description="Damage to the renal tubules.",
                                 meaning=NCIT.C185689) )
        setattr(cls, "Decreased GFR",
                PermissibleValue(text="Decreased GFR",
                                 description="A laboratory test result which indicates a decreased glomerular filtration rate.",
                                 meaning=NCIT.C78326) )

class CodeSystemEnum(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="CodeSystemEnum",
    )

# Slots
class slots:
    pass

slots.submitter_id = Slot(uri=DEFAULT_.submitter_id, name="submitter_id", curie=DEFAULT_.curie('submitter_id'),
                   model_uri=DEFAULT_.submitter_id, domain=None, range=str)

slots.type = Slot(uri=DEFAULT_.type, name="type", curie=DEFAULT_.curie('type'),
                   model_uri=DEFAULT_.type, domain=None, range=str)

slots.subjects = Slot(uri=DEFAULT_.subjects, name="subjects", curie=DEFAULT_.curie('subjects'),
                   model_uri=DEFAULT_.subjects, domain=None, range=Union[dict, Subject])

slots.time_periods = Slot(uri=DEFAULT_.time_periods, name="time_periods", curie=DEFAULT_.curie('time_periods'),
                   model_uri=DEFAULT_.time_periods, domain=None, range=Optional[Union[dict, TimePeriod]])

slots.sex = Slot(uri=DEFAULT_.sex, name="sex", curie=DEFAULT_.curie('sex'),
                   model_uri=DEFAULT_.sex, domain=None, range=Optional[Union[str, "SexEnum"]])

slots.race = Slot(uri=DEFAULT_.race, name="race", curie=DEFAULT_.curie('race'),
                   model_uri=DEFAULT_.race, domain=None, range=Optional[Union[str, "RaceEnum"]])

slots.race_other = Slot(uri=DEFAULT_.race_other, name="race_other", curie=DEFAULT_.curie('race_other'),
                   model_uri=DEFAULT_.race_other, domain=None, range=Optional[str])

slots.ethnicity = Slot(uri=DEFAULT_.ethnicity, name="ethnicity", curie=DEFAULT_.curie('ethnicity'),
                   model_uri=DEFAULT_.ethnicity, domain=None, range=Optional[Union[str, "EthnicityEnum"]])

slots.country = Slot(uri=DEFAULT_.country, name="country", curie=DEFAULT_.curie('country'),
                   model_uri=DEFAULT_.country, domain=None, range=Optional[str])

slots.race_identification_source = Slot(uri=DEFAULT_.race_identification_source, name="race_identification_source", curie=DEFAULT_.curie('race_identification_source'),
                   model_uri=DEFAULT_.race_identification_source, domain=None, range=Optional[Union[str, "RaceIdentificationSourceEnum"]])

slots.honest_broker_subject_id = Slot(uri=DEFAULT_.honest_broker_subject_id, name="honest_broker_subject_id", curie=DEFAULT_.curie('honest_broker_subject_id'),
                   model_uri=DEFAULT_.honest_broker_subject_id, domain=None, range=Optional[str])

slots.consortium = Slot(uri=DEFAULT_.consortium, name="consortium", curie=DEFAULT_.curie('consortium'),
                   model_uri=DEFAULT_.consortium, domain=None, range=Optional[Union[str, "ConsortiumEnum"]])

slots.data_contributor_id = Slot(uri=DEFAULT_.data_contributor_id, name="data_contributor_id", curie=DEFAULT_.curie('data_contributor_id'),
                   model_uri=DEFAULT_.data_contributor_id, domain=None, range=Optional[Union[str, "DataContributorIdEnum"]])

slots.study_id = Slot(uri=DEFAULT_.study_id, name="study_id", curie=DEFAULT_.curie('study_id'),
                   model_uri=DEFAULT_.study_id, domain=None, range=Optional[Union[str, "StudyIdEnum"]])

slots.age_at_enrollment = Slot(uri=DEFAULT_.age_at_enrollment, name="age_at_enrollment", curie=DEFAULT_.curie('age_at_enrollment'),
                   model_uri=DEFAULT_.age_at_enrollment, domain=None, range=Optional[int])

slots.treatment_arm = Slot(uri=DEFAULT_.treatment_arm, name="treatment_arm", curie=DEFAULT_.curie('treatment_arm'),
                   model_uri=DEFAULT_.treatment_arm, domain=None, range=Optional[Union[str, "TreatmentArmEnum"]])

slots.enrolled_status = Slot(uri=DEFAULT_.enrolled_status, name="enrolled_status", curie=DEFAULT_.curie('enrolled_status'),
                   model_uri=DEFAULT_.enrolled_status, domain=None, range=Optional[Union[str, "EnrolledStatusEnum"]])

slots.data_source = Slot(uri=DEFAULT_.data_source, name="data_source", curie=DEFAULT_.curie('data_source'),
                   model_uri=DEFAULT_.data_source, domain=None, range=Optional[Union[str, "DataSourceEnum"]])

slots.year_at_enrollment = Slot(uri=DEFAULT_.year_at_enrollment, name="year_at_enrollment", curie=DEFAULT_.curie('year_at_enrollment'),
                   model_uri=DEFAULT_.year_at_enrollment, domain=None, range=Optional[int])

slots.study_phase = Slot(uri=DEFAULT_.study_phase, name="study_phase", curie=DEFAULT_.curie('study_phase'),
                   model_uri=DEFAULT_.study_phase, domain=None, range=Optional[Union[str, "StudyPhaseEnum"]])

slots.study_type = Slot(uri=DEFAULT_.study_type, name="study_type", curie=DEFAULT_.curie('study_type'),
                   model_uri=DEFAULT_.study_type, domain=None, range=Optional[Union[str, "StudyTypeEnum"]])

slots.efs_censor_status = Slot(uri=DEFAULT_.efs_censor_status, name="efs_censor_status", curie=DEFAULT_.curie('efs_censor_status'),
                   model_uri=DEFAULT_.efs_censor_status, domain=None, range=Optional[Union[str, "EfsCensorStatusEnum"]])

slots.age_at_censor_status = Slot(uri=DEFAULT_.age_at_censor_status, name="age_at_censor_status", curie=DEFAULT_.curie('age_at_censor_status'),
                   model_uri=DEFAULT_.age_at_censor_status, domain=None, range=Optional[int])

slots.randomized_status = Slot(uri=DEFAULT_.randomized_status, name="randomized_status", curie=DEFAULT_.curie('randomized_status'),
                   model_uri=DEFAULT_.randomized_status, domain=None, range=Optional[Union[str, "RandomizedStatusEnum"]])

slots.time_period_type = Slot(uri=DEFAULT_.time_period_type, name="time_period_type", curie=DEFAULT_.curie('time_period_type'),
                   model_uri=DEFAULT_.time_period_type, domain=None, range=Optional[Union[str, "TimePeriodTypeEnum"]])

slots.disease_phase = Slot(uri=DEFAULT_.disease_phase, name="disease_phase", curie=DEFAULT_.curie('disease_phase'),
                   model_uri=DEFAULT_.disease_phase, domain=None, range=Optional[Union[str, "DiseasePhaseEnum"]])

slots.course = Slot(uri=DEFAULT_.course, name="course", curie=DEFAULT_.curie('course'),
                   model_uri=DEFAULT_.course, domain=None, range=Optional[Union[str, "CourseEnum"]])

slots.time_period_number = Slot(uri=DEFAULT_.time_period_number, name="time_period_number", curie=DEFAULT_.curie('time_period_number'),
                   model_uri=DEFAULT_.time_period_number, domain=None, range=Optional[int])

slots.year_at_start = Slot(uri=DEFAULT_.year_at_start, name="year_at_start", curie=DEFAULT_.curie('year_at_start'),
                   model_uri=DEFAULT_.year_at_start, domain=None, range=Optional[int])

slots.age_at_start = Slot(uri=DEFAULT_.age_at_start, name="age_at_start", curie=DEFAULT_.curie('age_at_start'),
                   model_uri=DEFAULT_.age_at_start, domain=None, range=Optional[int])

slots.age_at_end = Slot(uri=DEFAULT_.age_at_end, name="age_at_end", curie=DEFAULT_.curie('age_at_end'),
                   model_uri=DEFAULT_.age_at_end, domain=None, range=Optional[int])

slots.course_other = Slot(uri=DEFAULT_.course_other, name="course_other", curie=DEFAULT_.curie('course_other'),
                   model_uri=DEFAULT_.course_other, domain=None, range=Optional[str])

slots.age_at_course_anc_500 = Slot(uri=DEFAULT_.age_at_course_anc_500, name="age_at_course_anc_500", curie=DEFAULT_.curie('age_at_course_anc_500'),
                   model_uri=DEFAULT_.age_at_course_anc_500, domain=None, range=Optional[int])

slots.age_at_txassign = Slot(uri=DEFAULT_.age_at_txassign, name="age_at_txassign", curie=DEFAULT_.curie('age_at_txassign'),
                   model_uri=DEFAULT_.age_at_txassign, domain=None, range=Optional[int])

slots.age_precision = Slot(uri=DEFAULT_.age_precision, name="age_precision", curie=DEFAULT_.curie('age_precision'),
                   model_uri=DEFAULT_.age_precision, domain=None, range=Optional[Union[str, "AgePrecisionEnum"]])

slots.exam_type = Slot(uri=DEFAULT_.exam_type, name="exam_type", curie=DEFAULT_.curie('exam_type'),
                   model_uri=DEFAULT_.exam_type, domain=None, range=Optional[Union[str, "ExamTypeEnum"]])

slots.age_off = Slot(uri=DEFAULT_.age_off, name="age_off", curie=DEFAULT_.curie('age_off'),
                   model_uri=DEFAULT_.age_off, domain=None, range=Optional[int])

slots.off_type = Slot(uri=DEFAULT_.off_type, name="off_type", curie=DEFAULT_.curie('off_type'),
                   model_uri=DEFAULT_.off_type, domain=None, range=Optional[Union[str, "OffTypeEnum"]])

slots.reason_off = Slot(uri=DEFAULT_.reason_off, name="reason_off", curie=DEFAULT_.curie('reason_off'),
                   model_uri=DEFAULT_.reason_off, domain=None, range=Optional[Union[str, "ReasonOffEnum"]])

slots.reason_off_other = Slot(uri=DEFAULT_.reason_off_other, name="reason_off_other", curie=DEFAULT_.curie('reason_off_other'),
                   model_uri=DEFAULT_.reason_off_other, domain=None, range=Optional[str])

slots.another_study = Slot(uri=DEFAULT_.another_study, name="another_study", curie=DEFAULT_.curie('another_study'),
                   model_uri=DEFAULT_.another_study, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.condition = Slot(uri=DEFAULT_.condition, name="condition", curie=DEFAULT_.curie('condition'),
                   model_uri=DEFAULT_.condition, domain=None, range=Optional[Union[str, "ConditionEnum"]])

slots.condition_other = Slot(uri=DEFAULT_.condition_other, name="condition_other", curie=DEFAULT_.curie('condition_other'),
                   model_uri=DEFAULT_.condition_other, domain=None, range=Optional[str])

slots.age_at_condition = Slot(uri=DEFAULT_.age_at_condition, name="age_at_condition", curie=DEFAULT_.curie('age_at_condition'),
                   model_uri=DEFAULT_.age_at_condition, domain=None, range=Optional[int])

slots.condition_type = Slot(uri=DEFAULT_.condition_type, name="condition_type", curie=DEFAULT_.curie('condition_type'),
                   model_uri=DEFAULT_.condition_type, domain=None, range=Optional[Union[str, "ConditionTypeEnum"]])

slots.diagnosis_basis = Slot(uri=DEFAULT_.diagnosis_basis, name="diagnosis_basis", curie=DEFAULT_.curie('diagnosis_basis'),
                   model_uri=DEFAULT_.diagnosis_basis, domain=None, range=Optional[Union[str, "DiagnosisBasisEnum"]])

slots.condition_status = Slot(uri=DEFAULT_.condition_status, name="condition_status", curie=DEFAULT_.curie('condition_status'),
                   model_uri=DEFAULT_.condition_status, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.assisted_conception = Slot(uri=DEFAULT_.assisted_conception, name="assisted_conception", curie=DEFAULT_.curie('assisted_conception'),
                   model_uri=DEFAULT_.assisted_conception, domain=None, range=Optional[Union[str, "AssistedConceptionEnum"]])

slots.developmental_delay = Slot(uri=DEFAULT_.developmental_delay, name="developmental_delay", curie=DEFAULT_.curie('developmental_delay'),
                   model_uri=DEFAULT_.developmental_delay, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.developmental_delay_type = Slot(uri=DEFAULT_.developmental_delay_type, name="developmental_delay_type", curie=DEFAULT_.curie('developmental_delay_type'),
                   model_uri=DEFAULT_.developmental_delay_type, domain=None, range=Optional[str])

slots.age_at_lkss = Slot(uri=DEFAULT_.age_at_lkss, name="age_at_lkss", curie=DEFAULT_.curie('age_at_lkss'),
                   model_uri=DEFAULT_.age_at_lkss, domain=None, range=Optional[int])

slots.lkss = Slot(uri=DEFAULT_.lkss, name="lkss", curie=DEFAULT_.curie('lkss'),
                   model_uri=DEFAULT_.lkss, domain=None, range=Optional[Union[str, "AliveDeadNotreportedUnknownEnum"]])

slots.lkss_with_disease = Slot(uri=DEFAULT_.lkss_with_disease, name="lkss_with_disease", curie=DEFAULT_.curie('lkss_with_disease'),
                   model_uri=DEFAULT_.lkss_with_disease, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.age_lost_to_follow_up = Slot(uri=DEFAULT_.age_lost_to_follow_up, name="age_lost_to_follow_up", curie=DEFAULT_.curie('age_lost_to_follow_up'),
                   model_uri=DEFAULT_.age_lost_to_follow_up, domain=None, range=Optional[int])

slots.cause_of_death = Slot(uri=DEFAULT_.cause_of_death, name="cause_of_death", curie=DEFAULT_.curie('cause_of_death'),
                   model_uri=DEFAULT_.cause_of_death, domain=None, range=Optional[Union[str, "CauseOfDeathEnum"]])

slots.cause_of_death_other = Slot(uri=DEFAULT_.cause_of_death_other, name="cause_of_death_other", curie=DEFAULT_.curie('cause_of_death_other'),
                   model_uri=DEFAULT_.cause_of_death_other, domain=None, range=Optional[str])

slots.trm_type = Slot(uri=DEFAULT_.trm_type, name="trm_type", curie=DEFAULT_.curie('trm_type'),
                   model_uri=DEFAULT_.trm_type, domain=None, range=Optional[Union[str, "TrmTypeEnum"]])

slots.trm_type_other = Slot(uri=DEFAULT_.trm_type_other, name="trm_type_other", curie=DEFAULT_.curie('trm_type_other'),
                   model_uri=DEFAULT_.trm_type_other, domain=None, range=Optional[str])

slots.cause_of_death_detail = Slot(uri=DEFAULT_.cause_of_death_detail, name="cause_of_death_detail", curie=DEFAULT_.curie('cause_of_death_detail'),
                   model_uri=DEFAULT_.cause_of_death_detail, domain=None, range=Optional[Union[str, "CauseOfDeathDetailEnum"]])

slots.cause_of_death_detail_other = Slot(uri=DEFAULT_.cause_of_death_detail_other, name="cause_of_death_detail_other", curie=DEFAULT_.curie('cause_of_death_detail_other'),
                   model_uri=DEFAULT_.cause_of_death_detail_other, domain=None, range=Optional[str])

slots.cause_of_death_ranking = Slot(uri=DEFAULT_.cause_of_death_ranking, name="cause_of_death_ranking", curie=DEFAULT_.curie('cause_of_death_ranking'),
                   model_uri=DEFAULT_.cause_of_death_ranking, domain=None, range=Optional[Union[str, "CauseOfDeathRankingEnum"]])

slots.course_timepoint = Slot(uri=DEFAULT_.course_timepoint, name="course_timepoint", curie=DEFAULT_.curie('course_timepoint'),
                   model_uri=DEFAULT_.course_timepoint, domain=None, range=Optional[Union[str, "CourseTimepointEnum"]])

slots.relation = Slot(uri=DEFAULT_.relation, name="relation", curie=DEFAULT_.curie('relation'),
                   model_uri=DEFAULT_.relation, domain=None, range=Optional[Union[str, "RelationEnum"]])

slots.relation_other = Slot(uri=DEFAULT_.relation_other, name="relation_other", curie=DEFAULT_.curie('relation_other'),
                   model_uri=DEFAULT_.relation_other, domain=None, range=Optional[str])

slots.shared_predisposition = Slot(uri=DEFAULT_.shared_predisposition, name="shared_predisposition", curie=DEFAULT_.curie('shared_predisposition'),
                   model_uri=DEFAULT_.shared_predisposition, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.relative_honest_broker_id = Slot(uri=DEFAULT_.relative_honest_broker_id, name="relative_honest_broker_id", curie=DEFAULT_.curie('relative_honest_broker_id'),
                   model_uri=DEFAULT_.relative_honest_broker_id, domain=None, range=Optional[str])

slots.prior_cancer = Slot(uri=DEFAULT_.prior_cancer, name="prior_cancer", curie=DEFAULT_.curie('prior_cancer'),
                   model_uri=DEFAULT_.prior_cancer, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.prior_cancer_type = Slot(uri=DEFAULT_.prior_cancer_type, name="prior_cancer_type", curie=DEFAULT_.curie('prior_cancer_type'),
                   model_uri=DEFAULT_.prior_cancer_type, domain=None, range=Optional[str])

slots.prior_cancer_laterality = Slot(uri=DEFAULT_.prior_cancer_laterality, name="prior_cancer_laterality", curie=DEFAULT_.curie('prior_cancer_laterality'),
                   model_uri=DEFAULT_.prior_cancer_laterality, domain=None, range=Optional[Union[str, "PriorCancerLateralityEnum"]])

slots.lkss_of_relative = Slot(uri=DEFAULT_.lkss_of_relative, name="lkss_of_relative", curie=DEFAULT_.curie('lkss_of_relative'),
                   model_uri=DEFAULT_.lkss_of_relative, domain=None, range=Optional[Union[str, "AliveDeadNotreportedUnknownEnum"]])

slots.age_at_measurement = Slot(uri=DEFAULT_.age_at_measurement, name="age_at_measurement", curie=DEFAULT_.curie('age_at_measurement'),
                   model_uri=DEFAULT_.age_at_measurement, domain=None, range=Optional[int])

slots.measurement_type = Slot(uri=DEFAULT_.measurement_type, name="measurement_type", curie=DEFAULT_.curie('measurement_type'),
                   model_uri=DEFAULT_.measurement_type, domain=None, range=Optional[Union[str, "MeasurementTypeEnum"]])

slots.measurement_text = Slot(uri=DEFAULT_.measurement_text, name="measurement_text", curie=DEFAULT_.curie('measurement_text'),
                   model_uri=DEFAULT_.measurement_text, domain=None, range=Optional[str])

slots.measurement_numeric = Slot(uri=DEFAULT_.measurement_numeric, name="measurement_numeric", curie=DEFAULT_.curie('measurement_numeric'),
                   model_uri=DEFAULT_.measurement_numeric, domain=None, range=Optional[Decimal])

slots.measurement_unit = Slot(uri=DEFAULT_.measurement_unit, name="measurement_unit", curie=DEFAULT_.curie('measurement_unit'),
                   model_uri=DEFAULT_.measurement_unit, domain=None, range=Optional[Union[str, "MeasurementUnitEnum"]])

slots.age_at_lab = Slot(uri=DEFAULT_.age_at_lab, name="age_at_lab", curie=DEFAULT_.curie('age_at_lab'),
                   model_uri=DEFAULT_.age_at_lab, domain=None, range=Optional[int])

slots.category = Slot(uri=DEFAULT_.category, name="category", curie=DEFAULT_.curie('category'),
                   model_uri=DEFAULT_.category, domain=None, range=Optional[Union[str, "CategoryEnum"]])

slots.test = Slot(uri=DEFAULT_.test, name="test", curie=DEFAULT_.curie('test'),
                   model_uri=DEFAULT_.test, domain=None, range=Optional[Union[str, "TestEnum"]])

slots.specimen = Slot(uri=DEFAULT_.specimen, name="specimen", curie=DEFAULT_.curie('specimen'),
                   model_uri=DEFAULT_.specimen, domain=None, range=Optional[Union[str, "SpecimenEnum"]])

slots.specimen_other = Slot(uri=DEFAULT_.specimen_other, name="specimen_other", curie=DEFAULT_.curie('specimen_other'),
                   model_uri=DEFAULT_.specimen_other, domain=None, range=Optional[str])

slots.method = Slot(uri=DEFAULT_.method, name="method", curie=DEFAULT_.curie('method'),
                   model_uri=DEFAULT_.method, domain=None, range=Optional[Union[str, "MethodEnum"]])

slots.method_other = Slot(uri=DEFAULT_.method_other, name="method_other", curie=DEFAULT_.curie('method_other'),
                   model_uri=DEFAULT_.method_other, domain=None, range=Optional[str])

slots.result_text = Slot(uri=DEFAULT_.result_text, name="result_text", curie=DEFAULT_.curie('result_text'),
                   model_uri=DEFAULT_.result_text, domain=None, range=Optional[str])

slots.result_numeric = Slot(uri=DEFAULT_.result_numeric, name="result_numeric", curie=DEFAULT_.curie('result_numeric'),
                   model_uri=DEFAULT_.result_numeric, domain=None, range=Optional[Decimal])

slots.result_unit = Slot(uri=DEFAULT_.result_unit, name="result_unit", curie=DEFAULT_.curie('result_unit'),
                   model_uri=DEFAULT_.result_unit, domain=None, range=Optional[Union[str, "ResultUnitEnum"]])

slots.traumatic_tap = Slot(uri=DEFAULT_.traumatic_tap, name="traumatic_tap", curie=DEFAULT_.curie('traumatic_tap'),
                   model_uri=DEFAULT_.traumatic_tap, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.bm_morphology = Slot(uri=DEFAULT_.bm_morphology, name="bm_morphology", curie=DEFAULT_.curie('bm_morphology'),
                   model_uri=DEFAULT_.bm_morphology, domain=None, range=Optional[Union[str, "BmMorphologyEnum"]])

slots.result = Slot(uri=DEFAULT_.result, name="result", curie=DEFAULT_.curie('result'),
                   model_uri=DEFAULT_.result, domain=None, range=Optional[Union[str, "NegativeNotreportedPositiveUnknownEnum"]])

slots.threshold_level = Slot(uri=DEFAULT_.threshold_level, name="threshold_level", curie=DEFAULT_.curie('threshold_level'),
                   model_uri=DEFAULT_.threshold_level, domain=None, range=Optional[Union[str, "ThresholdLevelEnum"]])

slots.threshold_high = Slot(uri=DEFAULT_.threshold_high, name="threshold_high", curie=DEFAULT_.curie('threshold_high'),
                   model_uri=DEFAULT_.threshold_high, domain=None, range=Optional[Decimal])

slots.thredhold_low = Slot(uri=DEFAULT_.thredhold_low, name="thredhold_low", curie=DEFAULT_.curie('thredhold_low'),
                   model_uri=DEFAULT_.thredhold_low, domain=None, range=Optional[Decimal])

slots.seq_method = Slot(uri=DEFAULT_.seq_method, name="seq_method", curie=DEFAULT_.curie('seq_method'),
                   model_uri=DEFAULT_.seq_method, domain=None, range=Optional[Union[str, "SeqMethodEnum"]])

slots.threshold_low = Slot(uri=DEFAULT_.threshold_low, name="threshold_low", curie=DEFAULT_.curie('threshold_low'),
                   model_uri=DEFAULT_.threshold_low, domain=None, range=Optional[Decimal])

slots.pmid_ref = Slot(uri=DEFAULT_.pmid_ref, name="pmid_ref", curie=DEFAULT_.curie('pmid_ref'),
                   model_uri=DEFAULT_.pmid_ref, domain=None, range=Optional[Decimal])

slots.malignant_cells = Slot(uri=DEFAULT_.malignant_cells, name="malignant_cells", curie=DEFAULT_.curie('malignant_cells'),
                   model_uri=DEFAULT_.malignant_cells, domain=None, range=Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]])

slots.test_other = Slot(uri=DEFAULT_.test_other, name="test_other", curie=DEFAULT_.curie('test_other'),
                   model_uri=DEFAULT_.test_other, domain=None, range=Optional[str])

slots.age_at_genetic_analysis = Slot(uri=DEFAULT_.age_at_genetic_analysis, name="age_at_genetic_analysis", curie=DEFAULT_.curie('age_at_genetic_analysis'),
                   model_uri=DEFAULT_.age_at_genetic_analysis, domain=None, range=Optional[int])

slots.common_name = Slot(uri=DEFAULT_.common_name, name="common_name", curie=DEFAULT_.curie('common_name'),
                   model_uri=DEFAULT_.common_name, domain=None, range=Optional[Union[str, "CommonNameEnum"]])

slots.karyotype_status = Slot(uri=DEFAULT_.karyotype_status, name="karyotype_status", curie=DEFAULT_.curie('karyotype_status'),
                   model_uri=DEFAULT_.karyotype_status, domain=None, range=Optional[Union[str, "KaryotypeStatusEnum"]])

slots.status = Slot(uri=DEFAULT_.status, name="status", curie=DEFAULT_.curie('status'),
                   model_uri=DEFAULT_.status, domain=None, range=Optional[Union[str, "StatusEnum"]])

slots.iscn = Slot(uri=DEFAULT_.iscn, name="iscn", curie=DEFAULT_.curie('iscn'),
                   model_uri=DEFAULT_.iscn, domain=None, range=Optional[str])

slots.total_chromosomes = Slot(uri=DEFAULT_.total_chromosomes, name="total_chromosomes", curie=DEFAULT_.curie('total_chromosomes'),
                   model_uri=DEFAULT_.total_chromosomes, domain=None, range=Optional[Decimal])

slots.chromosome = Slot(uri=DEFAULT_.chromosome, name="chromosome", curie=DEFAULT_.curie('chromosome'),
                   model_uri=DEFAULT_.chromosome, domain=None, range=Optional[str])

slots.gene = Slot(uri=DEFAULT_.gene, name="gene", curie=DEFAULT_.curie('gene'),
                   model_uri=DEFAULT_.gene, domain=None, range=Optional[str])

slots.gene2 = Slot(uri=DEFAULT_.gene2, name="gene2", curie=DEFAULT_.curie('gene2'),
                   model_uri=DEFAULT_.gene2, domain=None, range=Optional[str])

slots.variation_type = Slot(uri=DEFAULT_.variation_type, name="variation_type", curie=DEFAULT_.curie('variation_type'),
                   model_uri=DEFAULT_.variation_type, domain=None, range=Optional[Union[str, "VariationTypeEnum"]])

slots.variation_type_other = Slot(uri=DEFAULT_.variation_type_other, name="variation_type_other", curie=DEFAULT_.curie('variation_type_other'),
                   model_uri=DEFAULT_.variation_type_other, domain=None, range=Optional[str])

slots.copy_number_variation = Slot(uri=DEFAULT_.copy_number_variation, name="copy_number_variation", curie=DEFAULT_.curie('copy_number_variation'),
                   model_uri=DEFAULT_.copy_number_variation, domain=None, range=Optional[Union[str, "CopyNumberVariationEnum"]])

slots.copy_number = Slot(uri=DEFAULT_.copy_number, name="copy_number", curie=DEFAULT_.curie('copy_number'),
                   model_uri=DEFAULT_.copy_number, domain=None, range=Optional[Decimal])

slots.hgvs_coding = Slot(uri=DEFAULT_.hgvs_coding, name="hgvs_coding", curie=DEFAULT_.curie('hgvs_coding'),
                   model_uri=DEFAULT_.hgvs_coding, domain=None, range=Optional[str])

slots.hgvs_protein = Slot(uri=DEFAULT_.hgvs_protein, name="hgvs_protein", curie=DEFAULT_.curie('hgvs_protein'),
                   model_uri=DEFAULT_.hgvs_protein, domain=None, range=Optional[str])

slots.dna_index_numeric = Slot(uri=DEFAULT_.dna_index_numeric, name="dna_index_numeric", curie=DEFAULT_.curie('dna_index_numeric'),
                   model_uri=DEFAULT_.dna_index_numeric, domain=None, range=Optional[Decimal])

slots.independent_aberations = Slot(uri=DEFAULT_.independent_aberations, name="independent_aberations", curie=DEFAULT_.curie('independent_aberations'),
                   model_uri=DEFAULT_.independent_aberations, domain=None, range=Optional[Decimal])

slots.cells_in_metaphase = Slot(uri=DEFAULT_.cells_in_metaphase, name="cells_in_metaphase", curie=DEFAULT_.curie('cells_in_metaphase'),
                   model_uri=DEFAULT_.cells_in_metaphase, domain=None, range=Optional[Decimal])

slots.common_name_other = Slot(uri=DEFAULT_.common_name_other, name="common_name_other", curie=DEFAULT_.curie('common_name_other'),
                   model_uri=DEFAULT_.common_name_other, domain=None, range=Optional[str])

slots.mutant_allele_fraction = Slot(uri=DEFAULT_.mutant_allele_fraction, name="mutant_allele_fraction", curie=DEFAULT_.curie('mutant_allele_fraction'),
                   model_uri=DEFAULT_.mutant_allele_fraction, domain=None, range=Optional[Decimal])

slots.genomic_source_class = Slot(uri=DEFAULT_.genomic_source_class, name="genomic_source_class", curie=DEFAULT_.curie('genomic_source_class'),
                   model_uri=DEFAULT_.genomic_source_class, domain=None, range=Optional[Union[str, "GenomicSourceClassEnum"]])

slots.expression_consequence = Slot(uri=DEFAULT_.expression_consequence, name="expression_consequence", curie=DEFAULT_.curie('expression_consequence'),
                   model_uri=DEFAULT_.expression_consequence, domain=None, range=Optional[Union[str, "ExpressionConsequenceEnum"]])

slots.chromosomal_consequence = Slot(uri=DEFAULT_.chromosomal_consequence, name="chromosomal_consequence", curie=DEFAULT_.curie('chromosomal_consequence'),
                   model_uri=DEFAULT_.chromosomal_consequence, domain=None, range=Optional[Union[str, "ChromosomalConsequenceEnum"]])

slots.allelic_state = Slot(uri=DEFAULT_.allelic_state, name="allelic_state", curie=DEFAULT_.curie('allelic_state'),
                   model_uri=DEFAULT_.allelic_state, domain=None, range=Optional[Union[str, "AllelicStateEnum"]])

slots.allelic_frequency = Slot(uri=DEFAULT_.allelic_frequency, name="allelic_frequency", curie=DEFAULT_.curie('allelic_frequency'),
                   model_uri=DEFAULT_.allelic_frequency, domain=None, range=Optional[Decimal])

slots.external_ref_id = Slot(uri=DEFAULT_.external_ref_id, name="external_ref_id", curie=DEFAULT_.curie('external_ref_id'),
                   model_uri=DEFAULT_.external_ref_id, domain=None, range=Optional[str])

slots.external_ref_id_system = Slot(uri=DEFAULT_.external_ref_id_system, name="external_ref_id_system", curie=DEFAULT_.curie('external_ref_id_system'),
                   model_uri=DEFAULT_.external_ref_id_system, domain=None, range=Optional[Union[str, "ExternalRefIdSystemEnum"]])

slots.mosaicism_percent = Slot(uri=DEFAULT_.mosaicism_percent, name="mosaicism_percent", curie=DEFAULT_.curie('mosaicism_percent'),
                   model_uri=DEFAULT_.mosaicism_percent, domain=None, range=Optional[Decimal])

slots.variation_effect = Slot(uri=DEFAULT_.variation_effect, name="variation_effect", curie=DEFAULT_.curie('variation_effect'),
                   model_uri=DEFAULT_.variation_effect, domain=None, range=Optional[Union[str, "VariationEffectEnum"]])

slots.inheritance_pattern = Slot(uri=DEFAULT_.inheritance_pattern, name="inheritance_pattern", curie=DEFAULT_.curie('inheritance_pattern'),
                   model_uri=DEFAULT_.inheritance_pattern, domain=None, range=Optional[Union[str, "InheritancePatternEnum"]])

slots.parental_status = Slot(uri=DEFAULT_.parental_status, name="parental_status", curie=DEFAULT_.curie('parental_status'),
                   model_uri=DEFAULT_.parental_status, domain=None, range=Optional[Union[str, "ParentalStatusEnum"]])

slots.hgvs_coding_transcript = Slot(uri=DEFAULT_.hgvs_coding_transcript, name="hgvs_coding_transcript", curie=DEFAULT_.curie('hgvs_coding_transcript'),
                   model_uri=DEFAULT_.hgvs_coding_transcript, domain=None, range=Optional[str])

slots.hgvs_protein_transcript = Slot(uri=DEFAULT_.hgvs_protein_transcript, name="hgvs_protein_transcript", curie=DEFAULT_.curie('hgvs_protein_transcript'),
                   model_uri=DEFAULT_.hgvs_protein_transcript, domain=None, range=Optional[str])

slots.reported_significance = Slot(uri=DEFAULT_.reported_significance, name="reported_significance", curie=DEFAULT_.curie('reported_significance'),
                   model_uri=DEFAULT_.reported_significance, domain=None, range=Optional[Union[str, "ReportedSignificanceEnum"]])

slots.associated_condition = Slot(uri=DEFAULT_.associated_condition, name="associated_condition", curie=DEFAULT_.curie('associated_condition'),
                   model_uri=DEFAULT_.associated_condition, domain=None, range=Optional[Union[str, "AssociatedConditionEnum"]])

slots.associated_condition_other = Slot(uri=DEFAULT_.associated_condition_other, name="associated_condition_other", curie=DEFAULT_.curie('associated_condition_other'),
                   model_uri=DEFAULT_.associated_condition_other, domain=None, range=Optional[str])

slots.review_source = Slot(uri=DEFAULT_.review_source, name="review_source", curie=DEFAULT_.curie('review_source'),
                   model_uri=DEFAULT_.review_source, domain=None, range=Optional[Union[str, "ReviewSourceEnum"]])

slots.tumor_classification = Slot(uri=DEFAULT_.tumor_classification, name="tumor_classification", curie=DEFAULT_.curie('tumor_classification'),
                   model_uri=DEFAULT_.tumor_classification, domain=None, range=Optional[Union[str, "TumorClassificationEnum"]])

slots.biological_analyte = Slot(uri=DEFAULT_.biological_analyte, name="biological_analyte", curie=DEFAULT_.curie('biological_analyte'),
                   model_uri=DEFAULT_.biological_analyte, domain=None, range=Optional[Union[str, "BiologicalAnalyteEnum"]])

slots.biological_analyte_other = Slot(uri=DEFAULT_.biological_analyte_other, name="biological_analyte_other", curie=DEFAULT_.curie('biological_analyte_other'),
                   model_uri=DEFAULT_.biological_analyte_other, domain=None, range=Optional[str])

slots.source_pct = Slot(uri=DEFAULT_.source_pct, name="source_pct", curie=DEFAULT_.curie('source_pct'),
                   model_uri=DEFAULT_.source_pct, domain=None, range=Optional[Union[str, "SourcePctEnum"]])

slots.source_pct_numeric = Slot(uri=DEFAULT_.source_pct_numeric, name="source_pct_numeric", curie=DEFAULT_.curie('source_pct_numeric'),
                   model_uri=DEFAULT_.source_pct_numeric, domain=None, range=Optional[Decimal])

slots.tkd_involvement = Slot(uri=DEFAULT_.tkd_involvement, name="tkd_involvement", curie=DEFAULT_.curie('tkd_involvement'),
                   model_uri=DEFAULT_.tkd_involvement, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.maf = Slot(uri=DEFAULT_.maf, name="maf", curie=DEFAULT_.curie('maf'),
                   model_uri=DEFAULT_.maf, domain=None, range=Optional[Union[str, "MafEnum"]])

slots.maf_numeric = Slot(uri=DEFAULT_.maf_numeric, name="maf_numeric", curie=DEFAULT_.curie('maf_numeric'),
                   model_uri=DEFAULT_.maf_numeric, domain=None, range=Optional[Decimal])

slots.clonal_status = Slot(uri=DEFAULT_.clonal_status, name="clonal_status", curie=DEFAULT_.curie('clonal_status'),
                   model_uri=DEFAULT_.clonal_status, domain=None, range=Optional[Union[str, "ClonalStatusEnum"]])

slots.dna_index = Slot(uri=DEFAULT_.dna_index, name="dna_index", curie=DEFAULT_.curie('dna_index'),
                   model_uri=DEFAULT_.dna_index, domain=None, range=Optional[Union[str, "DnaIndexEnum"]])

slots.cytodifferentiation = Slot(uri=DEFAULT_.cytodifferentiation, name="cytodifferentiation", curie=DEFAULT_.curie('cytodifferentiation'),
                   model_uri=DEFAULT_.cytodifferentiation, domain=None, range=Optional[Union[str, "CytodifferentiationEnum"]])

slots.mitotic_rate = Slot(uri=DEFAULT_.mitotic_rate, name="mitotic_rate", curie=DEFAULT_.curie('mitotic_rate'),
                   model_uri=DEFAULT_.mitotic_rate, domain=None, range=Optional[Union[str, "MitoticRateEnum"]])

slots.mutated_allele_frequency = Slot(uri=DEFAULT_.mutated_allele_frequency, name="mutated_allele_frequency", curie=DEFAULT_.curie('mutated_allele_frequency'),
                   model_uri=DEFAULT_.mutated_allele_frequency, domain=None, range=Optional[int])

slots.cascade_testing = Slot(uri=DEFAULT_.cascade_testing, name="cascade_testing", curie=DEFAULT_.curie('cascade_testing'),
                   model_uri=DEFAULT_.cascade_testing, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.alt_status = Slot(uri=DEFAULT_.alt_status, name="alt_status", curie=DEFAULT_.curie('alt_status'),
                   model_uri=DEFAULT_.alt_status, domain=None, range=Optional[Union[str, "AltStatusEnum"]])

slots.age_at_function_test = Slot(uri=DEFAULT_.age_at_function_test, name="age_at_function_test", curie=DEFAULT_.curie('age_at_function_test'),
                   model_uri=DEFAULT_.age_at_function_test, domain=None, range=Optional[int])

slots.age_at_ihc = Slot(uri=DEFAULT_.age_at_ihc, name="age_at_ihc", curie=DEFAULT_.curie('age_at_ihc'),
                   model_uri=DEFAULT_.age_at_ihc, domain=None, range=Optional[int])

slots.age_at_imaging = Slot(uri=DEFAULT_.age_at_imaging, name="age_at_imaging", curie=DEFAULT_.curie('age_at_imaging'),
                   model_uri=DEFAULT_.age_at_imaging, domain=None, range=Optional[int])

slots.deauville_score = Slot(uri=DEFAULT_.deauville_score, name="deauville_score", curie=DEFAULT_.curie('deauville_score'),
                   model_uri=DEFAULT_.deauville_score, domain=None, range=Optional[Union[str, "DeauvilleScoreEnum"]])

slots.qpet_score = Slot(uri=DEFAULT_.qpet_score, name="qpet_score", curie=DEFAULT_.curie('qpet_score'),
                   model_uri=DEFAULT_.qpet_score, domain=None, range=Optional[Decimal])

slots.finding = Slot(uri=DEFAULT_.finding, name="finding", curie=DEFAULT_.curie('finding'),
                   model_uri=DEFAULT_.finding, domain=None, range=Optional[Union[str, "FindingEnum"]])

slots.finding_other = Slot(uri=DEFAULT_.finding_other, name="finding_other", curie=DEFAULT_.curie('finding_other'),
                   model_uri=DEFAULT_.finding_other, domain=None, range=Optional[str])

slots.finding_site = Slot(uri=DEFAULT_.finding_site, name="finding_site", curie=DEFAULT_.curie('finding_site'),
                   model_uri=DEFAULT_.finding_site, domain=None, range=Optional[Union[str, "FindingSiteEnum"]])

slots.finding_site_other = Slot(uri=DEFAULT_.finding_site_other, name="finding_site_other", curie=DEFAULT_.curie('finding_site_other'),
                   model_uri=DEFAULT_.finding_site_other, domain=None, range=Optional[str])

slots.bone_marrow = Slot(uri=DEFAULT_.bone_marrow, name="bone_marrow", curie=DEFAULT_.curie('bone_marrow'),
                   model_uri=DEFAULT_.bone_marrow, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.csf_result = Slot(uri=DEFAULT_.csf_result, name="csf_result", curie=DEFAULT_.curie('csf_result'),
                   model_uri=DEFAULT_.csf_result, domain=None, range=Optional[Union[str, "NegativeNotreportedPositiveUnknownEnum"]])

slots.age_at_hist_assessment = Slot(uri=DEFAULT_.age_at_hist_assessment, name="age_at_hist_assessment", curie=DEFAULT_.curie('age_at_hist_assessment'),
                   model_uri=DEFAULT_.age_at_hist_assessment, domain=None, range=Optional[int])

slots.morph_code = Slot(uri=DEFAULT_.morph_code, name="morph_code", curie=DEFAULT_.curie('morph_code'),
                   model_uri=DEFAULT_.morph_code, domain=None, range=Optional[str])

slots.morph_code_system = Slot(uri=DEFAULT_.morph_code_system, name="morph_code_system", curie=DEFAULT_.curie('morph_code_system'),
                   model_uri=DEFAULT_.morph_code_system, domain=None, range=Optional[Union[str, "MorphCodeSystemEnum"]])

slots.morph_code_system_version = Slot(uri=DEFAULT_.morph_code_system_version, name="morph_code_system_version", curie=DEFAULT_.curie('morph_code_system_version'),
                   model_uri=DEFAULT_.morph_code_system_version, domain=None, range=Optional[str])

slots.top_code = Slot(uri=DEFAULT_.top_code, name="top_code", curie=DEFAULT_.curie('top_code'),
                   model_uri=DEFAULT_.top_code, domain=None, range=Optional[str])

slots.top_code_system = Slot(uri=DEFAULT_.top_code_system, name="top_code_system", curie=DEFAULT_.curie('top_code_system'),
                   model_uri=DEFAULT_.top_code_system, domain=None, range=Optional[Union[str, "TopCodeSystemEnum"]])

slots.top_code_system_version = Slot(uri=DEFAULT_.top_code_system_version, name="top_code_system_version", curie=DEFAULT_.curie('top_code_system_version'),
                   model_uri=DEFAULT_.top_code_system_version, domain=None, range=Optional[str])

slots.all_type = Slot(uri=DEFAULT_.all_type, name="all_type", curie=DEFAULT_.curie('all_type'),
                   model_uri=DEFAULT_.all_type, domain=None, range=Optional[Union[str, "AllTypeEnum"]])

slots.fab_type = Slot(uri=DEFAULT_.fab_type, name="fab_type", curie=DEFAULT_.curie('fab_type'),
                   model_uri=DEFAULT_.fab_type, domain=None, range=Optional[Union[str, "FabTypeEnum"]])

slots.who_aml = Slot(uri=DEFAULT_.who_aml, name="who_aml", curie=DEFAULT_.curie('who_aml'),
                   model_uri=DEFAULT_.who_aml, domain=None, range=Optional[Union[str, "WhoAmlEnum"]])

slots.mpal = Slot(uri=DEFAULT_.mpal, name="mpal", curie=DEFAULT_.curie('mpal'),
                   model_uri=DEFAULT_.mpal, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.mlds = Slot(uri=DEFAULT_.mlds, name="mlds", curie=DEFAULT_.curie('mlds'),
                   model_uri=DEFAULT_.mlds, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.tam = Slot(uri=DEFAULT_.tam, name="tam", curie=DEFAULT_.curie('tam'),
                   model_uri=DEFAULT_.tam, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.secondary_aml = Slot(uri=DEFAULT_.secondary_aml, name="secondary_aml", curie=DEFAULT_.curie('secondary_aml'),
                   model_uri=DEFAULT_.secondary_aml, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.histology = Slot(uri=DEFAULT_.histology, name="histology", curie=DEFAULT_.curie('histology'),
                   model_uri=DEFAULT_.histology, domain=None, range=Optional[Union[str, "HistologyEnum"]])

slots.molecular_classification = Slot(uri=DEFAULT_.molecular_classification, name="molecular_classification", curie=DEFAULT_.curie('molecular_classification'),
                   model_uri=DEFAULT_.molecular_classification, domain=None, range=Optional[Union[str, "MolecularClassificationEnum"]])

slots.molecular_classification_other = Slot(uri=DEFAULT_.molecular_classification_other, name="molecular_classification_other", curie=DEFAULT_.curie('molecular_classification_other'),
                   model_uri=DEFAULT_.molecular_classification_other, domain=None, range=Optional[str])

slots.determination_source = Slot(uri=DEFAULT_.determination_source, name="determination_source", curie=DEFAULT_.curie('determination_source'),
                   model_uri=DEFAULT_.determination_source, domain=None, range=Optional[Union[str, "DeterminationSourceEnum"]])

slots.morph_code_txt = Slot(uri=DEFAULT_.morph_code_txt, name="morph_code_txt", curie=DEFAULT_.curie('morph_code_txt'),
                   model_uri=DEFAULT_.morph_code_txt, domain=None, range=Optional[str])

slots.histology_result_text = Slot(uri=DEFAULT_.histology_result_text, name="histology_result_text", curie=DEFAULT_.curie('histology_result_text'),
                   model_uri=DEFAULT_.histology_result_text, domain=None, range=Optional[str])

slots.histology_result_numeric = Slot(uri=DEFAULT_.histology_result_numeric, name="histology_result_numeric", curie=DEFAULT_.curie('histology_result_numeric'),
                   model_uri=DEFAULT_.histology_result_numeric, domain=None, range=Optional[Decimal])

slots.histology_result_unit = Slot(uri=DEFAULT_.histology_result_unit, name="histology_result_unit", curie=DEFAULT_.curie('histology_result_unit'),
                   model_uri=DEFAULT_.histology_result_unit, domain=None, range=Optional[Union[str, "HistologyResultUnitEnum"]])

slots.histology_grade = Slot(uri=DEFAULT_.histology_grade, name="histology_grade", curie=DEFAULT_.curie('histology_grade'),
                   model_uri=DEFAULT_.histology_grade, domain=None, range=Optional[Union[str, "HistologyGradeEnum"]])

slots.mature_glial_implants = Slot(uri=DEFAULT_.mature_glial_implants, name="mature_glial_implants", curie=DEFAULT_.curie('mature_glial_implants'),
                   model_uri=DEFAULT_.mature_glial_implants, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.somatic_malignancy_type = Slot(uri=DEFAULT_.somatic_malignancy_type, name="somatic_malignancy_type", curie=DEFAULT_.curie('somatic_malignancy_type'),
                   model_uri=DEFAULT_.somatic_malignancy_type, domain=None, range=Optional[Union[str, "SomaticMalignancyTypeEnum"]])

slots.somatic_malignancy_type_other = Slot(uri=DEFAULT_.somatic_malignancy_type_other, name="somatic_malignancy_type_other", curie=DEFAULT_.curie('somatic_malignancy_type_other'),
                   model_uri=DEFAULT_.somatic_malignancy_type_other, domain=None, range=Optional[str])

slots.revised_inpc = Slot(uri=DEFAULT_.revised_inpc, name="revised_inpc", curie=DEFAULT_.curie('revised_inpc'),
                   model_uri=DEFAULT_.revised_inpc, domain=None, range=Optional[Union[str, "RevisedInpcEnum"]])

slots.mki = Slot(uri=DEFAULT_.mki, name="mki", curie=DEFAULT_.curie('mki'),
                   model_uri=DEFAULT_.mki, domain=None, range=Optional[Union[str, "MkiEnum"]])

slots.histology_other = Slot(uri=DEFAULT_.histology_other, name="histology_other", curie=DEFAULT_.curie('histology_other'),
                   model_uri=DEFAULT_.histology_other, domain=None, range=Optional[str])

slots.tumor_site = Slot(uri=DEFAULT_.tumor_site, name="tumor_site", curie=DEFAULT_.curie('tumor_site'),
                   model_uri=DEFAULT_.tumor_site, domain=None, range=Optional[Union[str, "TumorSiteEnum"]])

slots.disease_site = Slot(uri=DEFAULT_.disease_site, name="disease_site", curie=DEFAULT_.curie('disease_site'),
                   model_uri=DEFAULT_.disease_site, domain=None, range=Optional[Union[str, "DiseaseSiteEnum"]])

slots.detection_method_other = Slot(uri=DEFAULT_.detection_method_other, name="detection_method_other", curie=DEFAULT_.curie('detection_method_other'),
                   model_uri=DEFAULT_.detection_method_other, domain=None, range=Optional[str])

slots.cns_disease_status = Slot(uri=DEFAULT_.cns_disease_status, name="cns_disease_status", curie=DEFAULT_.curie('cns_disease_status'),
                   model_uri=DEFAULT_.cns_disease_status, domain=None, range=Optional[Union[str, "CnsDiseaseStatusEnum"]])

slots.prior_steroids_week = Slot(uri=DEFAULT_.prior_steroids_week, name="prior_steroids_week", curie=DEFAULT_.curie('prior_steroids_week'),
                   model_uri=DEFAULT_.prior_steroids_week, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.prior_steroids_month = Slot(uri=DEFAULT_.prior_steroids_month, name="prior_steroids_month", curie=DEFAULT_.curie('prior_steroids_month'),
                   model_uri=DEFAULT_.prior_steroids_month, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.bulk_med_mass = Slot(uri=DEFAULT_.bulk_med_mass, name="bulk_med_mass", curie=DEFAULT_.curie('bulk_med_mass'),
                   model_uri=DEFAULT_.bulk_med_mass, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.disease_site_other = Slot(uri=DEFAULT_.disease_site_other, name="disease_site_other", curie=DEFAULT_.curie('disease_site_other'),
                   model_uri=DEFAULT_.disease_site_other, domain=None, range=Optional[str])

slots.detection_method = Slot(uri=DEFAULT_.detection_method, name="detection_method", curie=DEFAULT_.curie('detection_method'),
                   model_uri=DEFAULT_.detection_method, domain=None, range=Optional[Union[str, "DetectionMethodEnum"]])

slots.myeloid_sarcoma = Slot(uri=DEFAULT_.myeloid_sarcoma, name="myeloid_sarcoma", curie=DEFAULT_.curie('myeloid_sarcoma'),
                   model_uri=DEFAULT_.myeloid_sarcoma, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.myeloid_sarcoma_site = Slot(uri=DEFAULT_.myeloid_sarcoma_site, name="myeloid_sarcoma_site", curie=DEFAULT_.curie('myeloid_sarcoma_site'),
                   model_uri=DEFAULT_.myeloid_sarcoma_site, domain=None, range=Optional[Union[str, "MyeloidSarcomaSiteEnum"]])

slots.myeloid_sarcoma_site_other = Slot(uri=DEFAULT_.myeloid_sarcoma_site_other, name="myeloid_sarcoma_site_other", curie=DEFAULT_.curie('myeloid_sarcoma_site_other'),
                   model_uri=DEFAULT_.myeloid_sarcoma_site_other, domain=None, range=Optional[str])

slots.age_at_disease_characteristic = Slot(uri=DEFAULT_.age_at_disease_characteristic, name="age_at_disease_characteristic", curie=DEFAULT_.curie('age_at_disease_characteristic'),
                   model_uri=DEFAULT_.age_at_disease_characteristic, domain=None, range=Optional[int])

slots.performance_score = Slot(uri=DEFAULT_.performance_score, name="performance_score", curie=DEFAULT_.curie('performance_score'),
                   model_uri=DEFAULT_.performance_score, domain=None, range=Optional[Union[str, "PerformanceScoreEnum"]])

slots.performance_score_system = Slot(uri=DEFAULT_.performance_score_system, name="performance_score_system", curie=DEFAULT_.curie('performance_score_system'),
                   model_uri=DEFAULT_.performance_score_system, domain=None, range=Optional[Union[str, "PerformanceScoreSystemEnum"]])

slots.gpoh_score = Slot(uri=DEFAULT_.gpoh_score, name="gpoh_score", curie=DEFAULT_.curie('gpoh_score'),
                   model_uri=DEFAULT_.gpoh_score, domain=None, range=Optional[Union[str, "GpohScoreEnum"]])

slots.risk_group_system = Slot(uri=DEFAULT_.risk_group_system, name="risk_group_system", curie=DEFAULT_.curie('risk_group_system'),
                   model_uri=DEFAULT_.risk_group_system, domain=None, range=Optional[Union[str, "RiskGroupSystemEnum"]])

slots.risk_group = Slot(uri=DEFAULT_.risk_group, name="risk_group", curie=DEFAULT_.curie('risk_group'),
                   model_uri=DEFAULT_.risk_group, domain=None, range=Optional[Union[str, "RiskGroupEnum"]])

slots.gts_treatment = Slot(uri=DEFAULT_.gts_treatment, name="gts_treatment", curie=DEFAULT_.curie('gts_treatment'),
                   model_uri=DEFAULT_.gts_treatment, domain=None, range=Optional[Union[str, "GtsTreatmentEnum"]])

slots.bulk_disease = Slot(uri=DEFAULT_.bulk_disease, name="bulk_disease", curie=DEFAULT_.curie('bulk_disease'),
                   model_uri=DEFAULT_.bulk_disease, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.bulk_nodal_aggregate = Slot(uri=DEFAULT_.bulk_nodal_aggregate, name="bulk_nodal_aggregate", curie=DEFAULT_.curie('bulk_nodal_aggregate'),
                   model_uri=DEFAULT_.bulk_nodal_aggregate, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.med_ratio = Slot(uri=DEFAULT_.med_ratio, name="med_ratio", curie=DEFAULT_.curie('med_ratio'),
                   model_uri=DEFAULT_.med_ratio, domain=None, range=Optional[Decimal])

slots.fever = Slot(uri=DEFAULT_.fever, name="fever", curie=DEFAULT_.curie('fever'),
                   model_uri=DEFAULT_.fever, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.night_sweats = Slot(uri=DEFAULT_.night_sweats, name="night_sweats", curie=DEFAULT_.curie('night_sweats'),
                   model_uri=DEFAULT_.night_sweats, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.weight_loss = Slot(uri=DEFAULT_.weight_loss, name="weight_loss", curie=DEFAULT_.curie('weight_loss'),
                   model_uri=DEFAULT_.weight_loss, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.nodular_splenic = Slot(uri=DEFAULT_.nodular_splenic, name="nodular_splenic", curie=DEFAULT_.curie('nodular_splenic'),
                   model_uri=DEFAULT_.nodular_splenic, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.initial_treatment_category = Slot(uri=DEFAULT_.initial_treatment_category, name="initial_treatment_category", curie=DEFAULT_.curie('initial_treatment_category'),
                   model_uri=DEFAULT_.initial_treatment_category, domain=None, range=Optional[Union[str, "InitialTreatmentCategoryEnum"]])

slots.evaluator = Slot(uri=DEFAULT_.evaluator, name="evaluator", curie=DEFAULT_.curie('evaluator'),
                   model_uri=DEFAULT_.evaluator, domain=None, range=Optional[Union[str, "EvaluatorEnum"]])

slots.evaluator_other = Slot(uri=DEFAULT_.evaluator_other, name="evaluator_other", curie=DEFAULT_.curie('evaluator_other'),
                   model_uri=DEFAULT_.evaluator_other, domain=None, range=Optional[str])

slots.presentation_symptoms = Slot(uri=DEFAULT_.presentation_symptoms, name="presentation_symptoms", curie=DEFAULT_.curie('presentation_symptoms'),
                   model_uri=DEFAULT_.presentation_symptoms, domain=None, range=Optional[Union[str, "PresentationSymptomsEnum"]])

slots.presentation_symptoms_other = Slot(uri=DEFAULT_.presentation_symptoms_other, name="presentation_symptoms_other", curie=DEFAULT_.curie('presentation_symptoms_other'),
                   model_uri=DEFAULT_.presentation_symptoms_other, domain=None, range=Optional[str])

slots.clinical_signs = Slot(uri=DEFAULT_.clinical_signs, name="clinical_signs", curie=DEFAULT_.curie('clinical_signs'),
                   model_uri=DEFAULT_.clinical_signs, domain=None, range=Optional[Union[str, "ClinicalSignsEnum"]])

slots.clinical_signs_other = Slot(uri=DEFAULT_.clinical_signs_other, name="clinical_signs_other", curie=DEFAULT_.curie('clinical_signs_other'),
                   model_uri=DEFAULT_.clinical_signs_other, domain=None, range=Optional[str])

slots.suspected_referring_diagnosis = Slot(uri=DEFAULT_.suspected_referring_diagnosis, name="suspected_referring_diagnosis", curie=DEFAULT_.curie('suspected_referring_diagnosis'),
                   model_uri=DEFAULT_.suspected_referring_diagnosis, domain=None, range=Optional[Union[str, "SuspectedReferringDiagnosisEnum"]])

slots.suspected_diagnosis_other = Slot(uri=DEFAULT_.suspected_diagnosis_other, name="suspected_diagnosis_other", curie=DEFAULT_.curie('suspected_diagnosis_other'),
                   model_uri=DEFAULT_.suspected_diagnosis_other, domain=None, range=Optional[str])

slots.visual_acuity_technique = Slot(uri=DEFAULT_.visual_acuity_technique, name="visual_acuity_technique", curie=DEFAULT_.curie('visual_acuity_technique'),
                   model_uri=DEFAULT_.visual_acuity_technique, domain=None, range=Optional[Union[str, "VisualAcuityTechniqueEnum"]])

slots.visual_acuity_result = Slot(uri=DEFAULT_.visual_acuity_result, name="visual_acuity_result", curie=DEFAULT_.curie('visual_acuity_result'),
                   model_uri=DEFAULT_.visual_acuity_result, domain=None, range=Optional[Union[str, "VisualAcuityResultEnum"]])

slots.visual_acuity_result_numeric = Slot(uri=DEFAULT_.visual_acuity_result_numeric, name="visual_acuity_result_numeric", curie=DEFAULT_.curie('visual_acuity_result_numeric'),
                   model_uri=DEFAULT_.visual_acuity_result_numeric, domain=None, range=Optional[Decimal])

slots.visual_acuity_notation = Slot(uri=DEFAULT_.visual_acuity_notation, name="visual_acuity_notation", curie=DEFAULT_.curie('visual_acuity_notation'),
                   model_uri=DEFAULT_.visual_acuity_notation, domain=None, range=Optional[Union[str, "VisualAcuityNotationEnum"]])

slots.anterior_segment_exam = Slot(uri=DEFAULT_.anterior_segment_exam, name="anterior_segment_exam", curie=DEFAULT_.curie('anterior_segment_exam'),
                   model_uri=DEFAULT_.anterior_segment_exam, domain=None, range=Optional[Union[str, "AnteriorSegmentExamEnum"]])

slots.anterior_segment_details = Slot(uri=DEFAULT_.anterior_segment_details, name="anterior_segment_details", curie=DEFAULT_.curie('anterior_segment_details'),
                   model_uri=DEFAULT_.anterior_segment_details, domain=None, range=Optional[Union[str, "AnteriorSegmentDetailsEnum"]])

slots.anterior_segment_details_other = Slot(uri=DEFAULT_.anterior_segment_details_other, name="anterior_segment_details_other", curie=DEFAULT_.curie('anterior_segment_details_other'),
                   model_uri=DEFAULT_.anterior_segment_details_other, domain=None, range=Optional[str])

slots.intraocular_pressure = Slot(uri=DEFAULT_.intraocular_pressure, name="intraocular_pressure", curie=DEFAULT_.curie('intraocular_pressure'),
                   model_uri=DEFAULT_.intraocular_pressure, domain=None, range=Optional[Decimal])

slots.intraocular_pressure_unit = Slot(uri=DEFAULT_.intraocular_pressure_unit, name="intraocular_pressure_unit", curie=DEFAULT_.curie('intraocular_pressure_unit'),
                   model_uri=DEFAULT_.intraocular_pressure_unit, domain=None, range=Optional[Union[str, "IntraocularPressureUnitEnum"]])

slots.retinal_detachment = Slot(uri=DEFAULT_.retinal_detachment, name="retinal_detachment", curie=DEFAULT_.curie('retinal_detachment'),
                   model_uri=DEFAULT_.retinal_detachment, domain=None, range=Optional[Union[str, "RetinalDetachmentEnum"]])

slots.advanced_disease_signs = Slot(uri=DEFAULT_.advanced_disease_signs, name="advanced_disease_signs", curie=DEFAULT_.curie('advanced_disease_signs'),
                   model_uri=DEFAULT_.advanced_disease_signs, domain=None, range=Optional[Union[str, "AdvancedDiseaseSignsEnum"]])

slots.advanced_disease_signs_other = Slot(uri=DEFAULT_.advanced_disease_signs_other, name="advanced_disease_signs_other", curie=DEFAULT_.curie('advanced_disease_signs_other'),
                   model_uri=DEFAULT_.advanced_disease_signs_other, domain=None, range=Optional[str])

slots.age_at_assessment = Slot(uri=DEFAULT_.age_at_assessment, name="age_at_assessment", curie=DEFAULT_.curie('age_at_assessment'),
                   model_uri=DEFAULT_.age_at_assessment, domain=None, range=Optional[int])

slots.mri_sequence = Slot(uri=DEFAULT_.mri_sequence, name="mri_sequence", curie=DEFAULT_.curie('mri_sequence'),
                   model_uri=DEFAULT_.mri_sequence, domain=None, range=Optional[Union[str, "MriSequenceEnum"]])

slots.tumor_presentation = Slot(uri=DEFAULT_.tumor_presentation, name="tumor_presentation", curie=DEFAULT_.curie('tumor_presentation'),
                   model_uri=DEFAULT_.tumor_presentation, domain=None, range=Optional[Union[str, "TumorPresentationEnum"]])

slots.classification = Slot(uri=DEFAULT_.classification, name="classification", curie=DEFAULT_.curie('classification'),
                   model_uri=DEFAULT_.classification, domain=None, range=Optional[Union[str, "ClassificationEnum"]])

slots.site = Slot(uri=DEFAULT_.site, name="site", curie=DEFAULT_.curie('site'),
                   model_uri=DEFAULT_.site, domain=None, range=Optional[Union[str, "SiteEnum"]])

slots.site_other = Slot(uri=DEFAULT_.site_other, name="site_other", curie=DEFAULT_.curie('site_other'),
                   model_uri=DEFAULT_.site_other, domain=None, range=Optional[str])

slots.age_at_tumor_assessment = Slot(uri=DEFAULT_.age_at_tumor_assessment, name="age_at_tumor_assessment", curie=DEFAULT_.curie('age_at_tumor_assessment'),
                   model_uri=DEFAULT_.age_at_tumor_assessment, domain=None, range=Optional[int])

slots.assessment_reason = Slot(uri=DEFAULT_.assessment_reason, name="assessment_reason", curie=DEFAULT_.curie('assessment_reason'),
                   model_uri=DEFAULT_.assessment_reason, domain=None, range=Optional[Union[str, "AssessmentReasonEnum"]])

slots.top_code_txt = Slot(uri=DEFAULT_.top_code_txt, name="top_code_txt", curie=DEFAULT_.curie('top_code_txt'),
                   model_uri=DEFAULT_.top_code_txt, domain=None, range=Optional[str])

slots.longest_diam_dim1 = Slot(uri=DEFAULT_.longest_diam_dim1, name="longest_diam_dim1", curie=DEFAULT_.curie('longest_diam_dim1'),
                   model_uri=DEFAULT_.longest_diam_dim1, domain=None, range=Optional[Decimal])

slots.longest_diam_dim2 = Slot(uri=DEFAULT_.longest_diam_dim2, name="longest_diam_dim2", curie=DEFAULT_.curie('longest_diam_dim2'),
                   model_uri=DEFAULT_.longest_diam_dim2, domain=None, range=Optional[Decimal])

slots.longest_diam_dim3 = Slot(uri=DEFAULT_.longest_diam_dim3, name="longest_diam_dim3", curie=DEFAULT_.curie('longest_diam_dim3'),
                   model_uri=DEFAULT_.longest_diam_dim3, domain=None, range=Optional[Decimal])

slots.tumor_submitter_id = Slot(uri=DEFAULT_.tumor_submitter_id, name="tumor_submitter_id", curie=DEFAULT_.curie('tumor_submitter_id'),
                   model_uri=DEFAULT_.tumor_submitter_id, domain=None, range=Optional[str])

slots.primary_tumor_submitter_id = Slot(uri=DEFAULT_.primary_tumor_submitter_id, name="primary_tumor_submitter_id", curie=DEFAULT_.curie('primary_tumor_submitter_id'),
                   model_uri=DEFAULT_.primary_tumor_submitter_id, domain=None, range=Optional[str])

slots.tissue_type = Slot(uri=DEFAULT_.tissue_type, name="tissue_type", curie=DEFAULT_.curie('tissue_type'),
                   model_uri=DEFAULT_.tissue_type, domain=None, range=Optional[Union[str, "TissueTypeEnum"]])

slots.classification_status = Slot(uri=DEFAULT_.classification_status, name="classification_status", curie=DEFAULT_.curie('classification_status'),
                   model_uri=DEFAULT_.classification_status, domain=None, range=Optional[Union[str, "ClassificationStatusEnum"]])

slots.multiplicity = Slot(uri=DEFAULT_.multiplicity, name="multiplicity", curie=DEFAULT_.curie('multiplicity'),
                   model_uri=DEFAULT_.multiplicity, domain=None, range=Optional[Union[str, "MultiplicityEnum"]])

slots.tumor_size = Slot(uri=DEFAULT_.tumor_size, name="tumor_size", curie=DEFAULT_.curie('tumor_size'),
                   model_uri=DEFAULT_.tumor_size, domain=None, range=Optional[Union[str, "TumorSizeEnum"]])

slots.tumor_volume = Slot(uri=DEFAULT_.tumor_volume, name="tumor_volume", curie=DEFAULT_.curie('tumor_volume'),
                   model_uri=DEFAULT_.tumor_volume, domain=None, range=Optional[Union[str, "TumorVolumeEnum"]])

slots.estimated_volume = Slot(uri=DEFAULT_.estimated_volume, name="estimated_volume", curie=DEFAULT_.curie('estimated_volume'),
                   model_uri=DEFAULT_.estimated_volume, domain=None, range=Optional[Decimal])

slots.laterality = Slot(uri=DEFAULT_.laterality, name="laterality", curie=DEFAULT_.curie('laterality'),
                   model_uri=DEFAULT_.laterality, domain=None, range=Optional[Union[str, "BilateralLeftMidlineNotreportedRightUnknownEnum"]])

slots.fracture = Slot(uri=DEFAULT_.fracture, name="fracture", curie=DEFAULT_.curie('fracture'),
                   model_uri=DEFAULT_.fracture, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.skip_tumor = Slot(uri=DEFAULT_.skip_tumor, name="skip_tumor", curie=DEFAULT_.curie('skip_tumor'),
                   model_uri=DEFAULT_.skip_tumor, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.ipsilateral_nodules = Slot(uri=DEFAULT_.ipsilateral_nodules, name="ipsilateral_nodules", curie=DEFAULT_.curie('ipsilateral_nodules'),
                   model_uri=DEFAULT_.ipsilateral_nodules, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.joint_involvement = Slot(uri=DEFAULT_.joint_involvement, name="joint_involvement", curie=DEFAULT_.curie('joint_involvement'),
                   model_uri=DEFAULT_.joint_involvement, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.site_within_bone = Slot(uri=DEFAULT_.site_within_bone, name="site_within_bone", curie=DEFAULT_.curie('site_within_bone'),
                   model_uri=DEFAULT_.site_within_bone, domain=None, range=Optional[Union[str, "SiteWithinBoneEnum"]])

slots.nodal_involvement = Slot(uri=DEFAULT_.nodal_involvement, name="nodal_involvement", curie=DEFAULT_.curie('nodal_involvement'),
                   model_uri=DEFAULT_.nodal_involvement, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.nodal_site = Slot(uri=DEFAULT_.nodal_site, name="nodal_site", curie=DEFAULT_.curie('nodal_site'),
                   model_uri=DEFAULT_.nodal_site, domain=None, range=Optional[Union[str, "NodalSiteEnum"]])

slots.extension_tumor_type = Slot(uri=DEFAULT_.extension_tumor_type, name="extension_tumor_type", curie=DEFAULT_.curie('extension_tumor_type'),
                   model_uri=DEFAULT_.extension_tumor_type, domain=None, range=Optional[Union[str, "ExtensionTumorTypeEnum"]])

slots.e_extension_site = Slot(uri=DEFAULT_.e_extension_site, name="e_extension_site", curie=DEFAULT_.curie('e_extension_site'),
                   model_uri=DEFAULT_.e_extension_site, domain=None, range=Optional[Union[str, "EExtensionSiteEnum"]])

slots.e_extension_site_other = Slot(uri=DEFAULT_.e_extension_site_other, name="e_extension_site_other", curie=DEFAULT_.curie('e_extension_site_other'),
                   model_uri=DEFAULT_.e_extension_site_other, domain=None, range=Optional[str])

slots.diam_type = Slot(uri=DEFAULT_.diam_type, name="diam_type", curie=DEFAULT_.curie('diam_type'),
                   model_uri=DEFAULT_.diam_type, domain=None, range=Optional[Union[str, "DiamTypeEnum"]])

slots.bulky_disease = Slot(uri=DEFAULT_.bulky_disease, name="bulky_disease", curie=DEFAULT_.curie('bulky_disease'),
                   model_uri=DEFAULT_.bulky_disease, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.effusion = Slot(uri=DEFAULT_.effusion, name="effusion", curie=DEFAULT_.curie('effusion'),
                   model_uri=DEFAULT_.effusion, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.effusion_type = Slot(uri=DEFAULT_.effusion_type, name="effusion_type", curie=DEFAULT_.curie('effusion_type'),
                   model_uri=DEFAULT_.effusion_type, domain=None, range=Optional[Union[str, "EffusionTypeEnum"]])

slots.response = Slot(uri=DEFAULT_.response, name="response", curie=DEFAULT_.curie('response'),
                   model_uri=DEFAULT_.response, domain=None, range=Optional[Union[str, "ResponseEnum"]])

slots.pct_change = Slot(uri=DEFAULT_.pct_change, name="pct_change", curie=DEFAULT_.curie('pct_change'),
                   model_uri=DEFAULT_.pct_change, domain=None, range=Optional[Decimal])

slots.tumor_type = Slot(uri=DEFAULT_.tumor_type, name="tumor_type", curie=DEFAULT_.curie('tumor_type'),
                   model_uri=DEFAULT_.tumor_type, domain=None, range=Optional[Union[str, "TumorTypeEnum"]])

slots.mibg_avidity = Slot(uri=DEFAULT_.mibg_avidity, name="mibg_avidity", curie=DEFAULT_.curie('mibg_avidity'),
                   model_uri=DEFAULT_.mibg_avidity, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.invasiveness_status = Slot(uri=DEFAULT_.invasiveness_status, name="invasiveness_status", curie=DEFAULT_.curie('invasiveness_status'),
                   model_uri=DEFAULT_.invasiveness_status, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.depth = Slot(uri=DEFAULT_.depth, name="depth", curie=DEFAULT_.curie('depth'),
                   model_uri=DEFAULT_.depth, domain=None, range=Optional[Union[str, "DepthEnum"]])

slots.skip_met_involvement = Slot(uri=DEFAULT_.skip_met_involvement, name="skip_met_involvement", curie=DEFAULT_.curie('skip_met_involvement'),
                   model_uri=DEFAULT_.skip_met_involvement, domain=None, range=Optional[Union[str, "SkipMetInvolvementEnum"]])

slots.fracture_site = Slot(uri=DEFAULT_.fracture_site, name="fracture_site", curie=DEFAULT_.curie('fracture_site'),
                   model_uri=DEFAULT_.fracture_site, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.massive_choroidal_extension = Slot(uri=DEFAULT_.massive_choroidal_extension, name="massive_choroidal_extension", curie=DEFAULT_.curie('massive_choroidal_extension'),
                   model_uri=DEFAULT_.massive_choroidal_extension, domain=None, range=Optional[Union[str, "MassiveChoroidalExtensionEnum"]])

slots.visual_discrete_tumors = Slot(uri=DEFAULT_.visual_discrete_tumors, name="visual_discrete_tumors", curie=DEFAULT_.curie('visual_discrete_tumors'),
                   model_uri=DEFAULT_.visual_discrete_tumors, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.tumor_number = Slot(uri=DEFAULT_.tumor_number, name="tumor_number", curie=DEFAULT_.curie('tumor_number'),
                   model_uri=DEFAULT_.tumor_number, domain=None, range=Optional[Decimal])

slots.tumor_from_fovea = Slot(uri=DEFAULT_.tumor_from_fovea, name="tumor_from_fovea", curie=DEFAULT_.curie('tumor_from_fovea'),
                   model_uri=DEFAULT_.tumor_from_fovea, domain=None, range=Optional[Union[str, "TumorFromFoveaEnum"]])

slots.tumor_from_optic_nerve = Slot(uri=DEFAULT_.tumor_from_optic_nerve, name="tumor_from_optic_nerve", curie=DEFAULT_.curie('tumor_from_optic_nerve'),
                   model_uri=DEFAULT_.tumor_from_optic_nerve, domain=None, range=Optional[Union[str, "TumorFromOpticNerveEnum"]])

slots.fluid_from_tumor = Slot(uri=DEFAULT_.fluid_from_tumor, name="fluid_from_tumor", curie=DEFAULT_.curie('fluid_from_tumor'),
                   model_uri=DEFAULT_.fluid_from_tumor, domain=None, range=Optional[Union[str, "FluidFromTumorEnum"]])

slots.seeds_present = Slot(uri=DEFAULT_.seeds_present, name="seeds_present", curie=DEFAULT_.curie('seeds_present'),
                   model_uri=DEFAULT_.seeds_present, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.seeds_pattern = Slot(uri=DEFAULT_.seeds_pattern, name="seeds_pattern", curie=DEFAULT_.curie('seeds_pattern'),
                   model_uri=DEFAULT_.seeds_pattern, domain=None, range=Optional[Union[str, "SeedsPatternEnum"]])

slots.seeds_status = Slot(uri=DEFAULT_.seeds_status, name="seeds_status", curie=DEFAULT_.curie('seeds_status'),
                   model_uri=DEFAULT_.seeds_status, domain=None, range=Optional[Union[str, "SeedsStatusEnum"]])

slots.seeds_classification = Slot(uri=DEFAULT_.seeds_classification, name="seeds_classification", curie=DEFAULT_.curie('seeds_classification'),
                   model_uri=DEFAULT_.seeds_classification, domain=None, range=Optional[Union[str, "SeedsClassificationEnum"]])

slots.invasiveness = Slot(uri=DEFAULT_.invasiveness, name="invasiveness", curie=DEFAULT_.curie('invasiveness'),
                   model_uri=DEFAULT_.invasiveness, domain=None, range=Optional[Union[str, "InvasivenessEnum"]])

slots.nodal_determination = Slot(uri=DEFAULT_.nodal_determination, name="nodal_determination", curie=DEFAULT_.curie('nodal_determination'),
                   model_uri=DEFAULT_.nodal_determination, domain=None, range=Optional[Union[str, "NodalDeterminationEnum"]])

slots.nodal_determination_source = Slot(uri=DEFAULT_.nodal_determination_source, name="nodal_determination_source", curie=DEFAULT_.curie('nodal_determination_source'),
                   model_uri=DEFAULT_.nodal_determination_source, domain=None, range=Optional[Union[str, "NodalDeterminationSourceEnum"]])

slots.parameningeal_extension = Slot(uri=DEFAULT_.parameningeal_extension, name="parameningeal_extension", curie=DEFAULT_.curie('parameningeal_extension'),
                   model_uri=DEFAULT_.parameningeal_extension, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.necrosis_status = Slot(uri=DEFAULT_.necrosis_status, name="necrosis_status", curie=DEFAULT_.curie('necrosis_status'),
                   model_uri=DEFAULT_.necrosis_status, domain=None, range=Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]])

slots.necrosis_pct_numeric = Slot(uri=DEFAULT_.necrosis_pct_numeric, name="necrosis_pct_numeric", curie=DEFAULT_.curie('necrosis_pct_numeric'),
                   model_uri=DEFAULT_.necrosis_pct_numeric, domain=None, range=Optional[Decimal])

slots.anaplasia_status = Slot(uri=DEFAULT_.anaplasia_status, name="anaplasia_status", curie=DEFAULT_.curie('anaplasia_status'),
                   model_uri=DEFAULT_.anaplasia_status, domain=None, range=Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]])

slots.anaplasia_type = Slot(uri=DEFAULT_.anaplasia_type, name="anaplasia_type", curie=DEFAULT_.curie('anaplasia_type'),
                   model_uri=DEFAULT_.anaplasia_type, domain=None, range=Optional[Union[str, "AnaplasiaTypeEnum"]])

slots.anaplasia_pct_numeric = Slot(uri=DEFAULT_.anaplasia_pct_numeric, name="anaplasia_pct_numeric", curie=DEFAULT_.curie('anaplasia_pct_numeric'),
                   model_uri=DEFAULT_.anaplasia_pct_numeric, domain=None, range=Optional[Decimal])

slots.age_at_staging = Slot(uri=DEFAULT_.age_at_staging, name="age_at_staging", curie=DEFAULT_.curie('age_at_staging'),
                   model_uri=DEFAULT_.age_at_staging, domain=None, range=Optional[int])

slots.stage_system = Slot(uri=DEFAULT_.stage_system, name="stage_system", curie=DEFAULT_.curie('stage_system'),
                   model_uri=DEFAULT_.stage_system, domain=None, range=Optional[Union[str, "StageSystemEnum"]])

slots.stage = Slot(uri=DEFAULT_.stage, name="stage", curie=DEFAULT_.curie('stage'),
                   model_uri=DEFAULT_.stage, domain=None, range=Optional[Union[str, "StageEnum"]])

slots.stage_other = Slot(uri=DEFAULT_.stage_other, name="stage_other", curie=DEFAULT_.curie('stage_other'),
                   model_uri=DEFAULT_.stage_other, domain=None, range=Optional[str])

slots.ann_arbor_mod_ab = Slot(uri=DEFAULT_.ann_arbor_mod_ab, name="ann_arbor_mod_ab", curie=DEFAULT_.curie('ann_arbor_mod_ab'),
                   model_uri=DEFAULT_.ann_arbor_mod_ab, domain=None, range=Optional[Union[str, "AnnArborModAbEnum"]])

slots.ann_arbor_mod_e = Slot(uri=DEFAULT_.ann_arbor_mod_e, name="ann_arbor_mod_e", curie=DEFAULT_.curie('ann_arbor_mod_e'),
                   model_uri=DEFAULT_.ann_arbor_mod_e, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.ann_arbor_mod_s = Slot(uri=DEFAULT_.ann_arbor_mod_s, name="ann_arbor_mod_s", curie=DEFAULT_.curie('ann_arbor_mod_s'),
                   model_uri=DEFAULT_.ann_arbor_mod_s, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.stage_system_category = Slot(uri=DEFAULT_.stage_system_category, name="stage_system_category", curie=DEFAULT_.curie('stage_system_category'),
                   model_uri=DEFAULT_.stage_system_category, domain=None, range=Optional[Union[str, "StageSystemCategoryEnum"]])

slots.stage_type = Slot(uri=DEFAULT_.stage_type, name="stage_type", curie=DEFAULT_.curie('stage_type'),
                   model_uri=DEFAULT_.stage_type, domain=None, range=Optional[Union[str, "StageTypeEnum"]])

slots.h_stage = Slot(uri=DEFAULT_.h_stage, name="h_stage", curie=DEFAULT_.curie('h_stage'),
                   model_uri=DEFAULT_.h_stage, domain=None, range=Optional[Union[str, "HStageEnum"]])

slots.group_system = Slot(uri=DEFAULT_.group_system, name="group_system", curie=DEFAULT_.curie('group_system'),
                   model_uri=DEFAULT_.group_system, domain=None, range=Optional[Union[str, "GroupSystemEnum"]])

slots.group = Slot(uri=DEFAULT_.group, name="group", curie=DEFAULT_.curie('group'),
                   model_uri=DEFAULT_.group, domain=None, range=Optional[Union[str, "GroupEnum"]])

slots.tnm_finding = Slot(uri=DEFAULT_.tnm_finding, name="tnm_finding", curie=DEFAULT_.curie('tnm_finding'),
                   model_uri=DEFAULT_.tnm_finding, domain=None, range=Optional[Union[str, "TnmFindingEnum"]])

slots.irs_group = Slot(uri=DEFAULT_.irs_group, name="irs_group", curie=DEFAULT_.curie('irs_group'),
                   model_uri=DEFAULT_.irs_group, domain=None, range=Optional[Union[str, "IrsGroupEnum"]])

slots.age_at_rt_start = Slot(uri=DEFAULT_.age_at_rt_start, name="age_at_rt_start", curie=DEFAULT_.curie('age_at_rt_start'),
                   model_uri=DEFAULT_.age_at_rt_start, domain=None, range=Optional[int])

slots.age_at_rt_end = Slot(uri=DEFAULT_.age_at_rt_end, name="age_at_rt_end", curie=DEFAULT_.curie('age_at_rt_end'),
                   model_uri=DEFAULT_.age_at_rt_end, domain=None, range=Optional[int])

slots.protocol_radiation_therapy = Slot(uri=DEFAULT_.protocol_radiation_therapy, name="protocol_radiation_therapy", curie=DEFAULT_.curie('protocol_radiation_therapy'),
                   model_uri=DEFAULT_.protocol_radiation_therapy, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.non_protocol_timing = Slot(uri=DEFAULT_.non_protocol_timing, name="non_protocol_timing", curie=DEFAULT_.curie('non_protocol_timing'),
                   model_uri=DEFAULT_.non_protocol_timing, domain=None, range=Optional[Union[str, "NonProtocolTimingEnum"]])

slots.total_dose = Slot(uri=DEFAULT_.total_dose, name="total_dose", curie=DEFAULT_.curie('total_dose'),
                   model_uri=DEFAULT_.total_dose, domain=None, range=Optional[Decimal])

slots.total_dose_unit = Slot(uri=DEFAULT_.total_dose_unit, name="total_dose_unit", curie=DEFAULT_.curie('total_dose_unit'),
                   model_uri=DEFAULT_.total_dose_unit, domain=None, range=Optional[Union[str, "TotalDoseUnitEnum"]])

slots.technique = Slot(uri=DEFAULT_.technique, name="technique", curie=DEFAULT_.curie('technique'),
                   model_uri=DEFAULT_.technique, domain=None, range=Optional[Union[str, "TechniqueEnum"]])

slots.energy_type = Slot(uri=DEFAULT_.energy_type, name="energy_type", curie=DEFAULT_.curie('energy_type'),
                   model_uri=DEFAULT_.energy_type, domain=None, range=Optional[Union[str, "EnergyTypeEnum"]])

slots.margin = Slot(uri=DEFAULT_.margin, name="margin", curie=DEFAULT_.curie('margin'),
                   model_uri=DEFAULT_.margin, domain=None, range=Optional[Union[str, "MarginEnum"]])

slots.rt_data_source = Slot(uri=DEFAULT_.rt_data_source, name="rt_data_source", curie=DEFAULT_.curie('rt_data_source'),
                   model_uri=DEFAULT_.rt_data_source, domain=None, range=Optional[Union[str, "RtDataSourceEnum"]])

slots.fraction_dose = Slot(uri=DEFAULT_.fraction_dose, name="fraction_dose", curie=DEFAULT_.curie('fraction_dose'),
                   model_uri=DEFAULT_.fraction_dose, domain=None, range=Optional[Decimal])

slots.fraction_dose_unit = Slot(uri=DEFAULT_.fraction_dose_unit, name="fraction_dose_unit", curie=DEFAULT_.curie('fraction_dose_unit'),
                   model_uri=DEFAULT_.fraction_dose_unit, domain=None, range=Optional[Union[str, "CgeNotreportedUnknownCgyEnum"]])

slots.num_fraction = Slot(uri=DEFAULT_.num_fraction, name="num_fraction", curie=DEFAULT_.curie('num_fraction'),
                   model_uri=DEFAULT_.num_fraction, domain=None, range=Optional[Decimal])

slots.target_volume = Slot(uri=DEFAULT_.target_volume, name="target_volume", curie=DEFAULT_.curie('target_volume'),
                   model_uri=DEFAULT_.target_volume, domain=None, range=Optional[Union[str, "TargetVolumeEnum"]])

slots.boost = Slot(uri=DEFAULT_.boost, name="boost", curie=DEFAULT_.curie('boost'),
                   model_uri=DEFAULT_.boost, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.boost_dose = Slot(uri=DEFAULT_.boost_dose, name="boost_dose", curie=DEFAULT_.curie('boost_dose'),
                   model_uri=DEFAULT_.boost_dose, domain=None, range=Optional[Decimal])

slots.boost_unit = Slot(uri=DEFAULT_.boost_unit, name="boost_unit", curie=DEFAULT_.curie('boost_unit'),
                   model_uri=DEFAULT_.boost_unit, domain=None, range=Optional[Union[str, "CgeNotreportedUnknownCgyEnum"]])

slots.boost_target_volume = Slot(uri=DEFAULT_.boost_target_volume, name="boost_target_volume", curie=DEFAULT_.curie('boost_target_volume'),
                   model_uri=DEFAULT_.boost_target_volume, domain=None, range=Optional[Union[str, "BoostTargetVolumeEnum"]])

slots.technique_other = Slot(uri=DEFAULT_.technique_other, name="technique_other", curie=DEFAULT_.curie('technique_other'),
                   model_uri=DEFAULT_.technique_other, domain=None, range=Optional[str])

slots.transposition_organ = Slot(uri=DEFAULT_.transposition_organ, name="transposition_organ", curie=DEFAULT_.curie('transposition_organ'),
                   model_uri=DEFAULT_.transposition_organ, domain=None, range=Optional[Union[str, "TranspositionOrganEnum"]])

slots.boost_dose_unit = Slot(uri=DEFAULT_.boost_dose_unit, name="boost_dose_unit", curie=DEFAULT_.curie('boost_dose_unit'),
                   model_uri=DEFAULT_.boost_dose_unit, domain=None, range=Optional[Union[str, "BoostDoseUnitEnum"]])

slots.energy_type_other = Slot(uri=DEFAULT_.energy_type_other, name="energy_type_other", curie=DEFAULT_.curie('energy_type_other'),
                   model_uri=DEFAULT_.energy_type_other, domain=None, range=Optional[str])

slots.indication = Slot(uri=DEFAULT_.indication, name="indication", curie=DEFAULT_.curie('indication'),
                   model_uri=DEFAULT_.indication, domain=None, range=Optional[Union[str, "IndicationEnum"]])

slots.indication_other = Slot(uri=DEFAULT_.indication_other, name="indication_other", curie=DEFAULT_.curie('indication_other'),
                   model_uri=DEFAULT_.indication_other, domain=None, range=Optional[str])

slots.proton_delivery_mode = Slot(uri=DEFAULT_.proton_delivery_mode, name="proton_delivery_mode", curie=DEFAULT_.curie('proton_delivery_mode'),
                   model_uri=DEFAULT_.proton_delivery_mode, domain=None, range=Optional[Union[str, "ProtonDeliveryModeEnum"]])

slots.plaque_size = Slot(uri=DEFAULT_.plaque_size, name="plaque_size", curie=DEFAULT_.curie('plaque_size'),
                   model_uri=DEFAULT_.plaque_size, domain=None, range=Optional[Union[str, "PlaqueSizeEnum"]])

slots.apex_dose = Slot(uri=DEFAULT_.apex_dose, name="apex_dose", curie=DEFAULT_.curie('apex_dose'),
                   model_uri=DEFAULT_.apex_dose, domain=None, range=Optional[Decimal])

slots.rt_completed = Slot(uri=DEFAULT_.rt_completed, name="rt_completed", curie=DEFAULT_.curie('rt_completed'),
                   model_uri=DEFAULT_.rt_completed, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.age_at_sct = Slot(uri=DEFAULT_.age_at_sct, name="age_at_sct", curie=DEFAULT_.curie('age_at_sct'),
                   model_uri=DEFAULT_.age_at_sct, domain=None, range=Optional[int])

slots.protocol_sct = Slot(uri=DEFAULT_.protocol_sct, name="protocol_sct", curie=DEFAULT_.curie('protocol_sct'),
                   model_uri=DEFAULT_.protocol_sct, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.sct_type = Slot(uri=DEFAULT_.sct_type, name="sct_type", curie=DEFAULT_.curie('sct_type'),
                   model_uri=DEFAULT_.sct_type, domain=None, range=Optional[Union[str, "SctTypeEnum"]])

slots.stem_cell_source = Slot(uri=DEFAULT_.stem_cell_source, name="stem_cell_source", curie=DEFAULT_.curie('stem_cell_source'),
                   model_uri=DEFAULT_.stem_cell_source, domain=None, range=Optional[Union[str, "StemCellSourceEnum"]])

slots.donor_relationship = Slot(uri=DEFAULT_.donor_relationship, name="donor_relationship", curie=DEFAULT_.curie('donor_relationship'),
                   model_uri=DEFAULT_.donor_relationship, domain=None, range=Optional[Union[str, "DonorRelationshipEnum"]])

slots.hla_match = Slot(uri=DEFAULT_.hla_match, name="hla_match", curie=DEFAULT_.curie('hla_match'),
                   model_uri=DEFAULT_.hla_match, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.number_hla = Slot(uri=DEFAULT_.number_hla, name="number_hla", curie=DEFAULT_.curie('number_hla'),
                   model_uri=DEFAULT_.number_hla, domain=None, range=Optional[Decimal])

slots.number_matches = Slot(uri=DEFAULT_.number_matches, name="number_matches", curie=DEFAULT_.curie('number_matches'),
                   model_uri=DEFAULT_.number_matches, domain=None, range=Optional[Decimal])

slots.conditioning_type = Slot(uri=DEFAULT_.conditioning_type, name="conditioning_type", curie=DEFAULT_.curie('conditioning_type'),
                   model_uri=DEFAULT_.conditioning_type, domain=None, range=Optional[Union[str, "ConditioningTypeEnum"]])

slots.prior_tbi = Slot(uri=DEFAULT_.prior_tbi, name="prior_tbi", curie=DEFAULT_.curie('prior_tbi'),
                   model_uri=DEFAULT_.prior_tbi, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.hla_a_result = Slot(uri=DEFAULT_.hla_a_result, name="hla_a_result", curie=DEFAULT_.curie('hla_a_result'),
                   model_uri=DEFAULT_.hla_a_result, domain=None, range=Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]])

slots.hla_b_result = Slot(uri=DEFAULT_.hla_b_result, name="hla_b_result", curie=DEFAULT_.curie('hla_b_result'),
                   model_uri=DEFAULT_.hla_b_result, domain=None, range=Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]])

slots.hla_c_result = Slot(uri=DEFAULT_.hla_c_result, name="hla_c_result", curie=DEFAULT_.curie('hla_c_result'),
                   model_uri=DEFAULT_.hla_c_result, domain=None, range=Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]])

slots.hla_drb1_result = Slot(uri=DEFAULT_.hla_drb1_result, name="hla_drb1_result", curie=DEFAULT_.curie('hla_drb1_result'),
                   model_uri=DEFAULT_.hla_drb1_result, domain=None, range=Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]])

slots.hla_dq_result = Slot(uri=DEFAULT_.hla_dq_result, name="hla_dq_result", curie=DEFAULT_.curie('hla_dq_result'),
                   model_uri=DEFAULT_.hla_dq_result, domain=None, range=Optional[Union[str, "BothallelesmatchedNotreportedOneallelemismatchedTwoallelesmismatchedUnknownEnum"]])

slots.age_at_sct_harvest = Slot(uri=DEFAULT_.age_at_sct_harvest, name="age_at_sct_harvest", curie=DEFAULT_.curie('age_at_sct_harvest'),
                   model_uri=DEFAULT_.age_at_sct_harvest, domain=None, range=Optional[int])

slots.age_at_recovery = Slot(uri=DEFAULT_.age_at_recovery, name="age_at_recovery", curie=DEFAULT_.curie('age_at_recovery'),
                   model_uri=DEFAULT_.age_at_recovery, domain=None, range=Optional[int])

slots.recovery_type = Slot(uri=DEFAULT_.recovery_type, name="recovery_type", curie=DEFAULT_.curie('recovery_type'),
                   model_uri=DEFAULT_.recovery_type, domain=None, range=Optional[Union[str, "RecoveryTypeEnum"]])

slots.recovery_status = Slot(uri=DEFAULT_.recovery_status, name="recovery_status", curie=DEFAULT_.curie('recovery_status'),
                   model_uri=DEFAULT_.recovery_status, domain=None, range=Optional[Union[str, "RecoveryStatusEnum"]])

slots.cd34_collected = Slot(uri=DEFAULT_.cd34_collected, name="cd34_collected", curie=DEFAULT_.curie('cd34_collected'),
                   model_uri=DEFAULT_.cd34_collected, domain=None, range=Optional[Decimal])

slots.cd34_transplant = Slot(uri=DEFAULT_.cd34_transplant, name="cd34_transplant", curie=DEFAULT_.curie('cd34_transplant'),
                   model_uri=DEFAULT_.cd34_transplant, domain=None, range=Optional[Decimal])

slots.sct_cycles = Slot(uri=DEFAULT_.sct_cycles, name="sct_cycles", curie=DEFAULT_.curie('sct_cycles'),
                   model_uri=DEFAULT_.sct_cycles, domain=None, range=Optional[Decimal])

slots.stem_cell_source_other = Slot(uri=DEFAULT_.stem_cell_source_other, name="stem_cell_source_other", curie=DEFAULT_.curie('stem_cell_source_other'),
                   model_uri=DEFAULT_.stem_cell_source_other, domain=None, range=Optional[str])

slots.sct_success = Slot(uri=DEFAULT_.sct_success, name="sct_success", curie=DEFAULT_.curie('sct_success'),
                   model_uri=DEFAULT_.sct_success, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.age_at_medication_start = Slot(uri=DEFAULT_.age_at_medication_start, name="age_at_medication_start", curie=DEFAULT_.curie('age_at_medication_start'),
                   model_uri=DEFAULT_.age_at_medication_start, domain=None, range=Optional[int])

slots.age_at_medication_end = Slot(uri=DEFAULT_.age_at_medication_end, name="age_at_medication_end", curie=DEFAULT_.curie('age_at_medication_end'),
                   model_uri=DEFAULT_.age_at_medication_end, domain=None, range=Optional[int])

slots.route = Slot(uri=DEFAULT_.route, name="route", curie=DEFAULT_.curie('route'),
                   model_uri=DEFAULT_.route, domain=None, range=Optional[Union[str, "RouteEnum"]])

slots.medication = Slot(uri=DEFAULT_.medication, name="medication", curie=DEFAULT_.curie('medication'),
                   model_uri=DEFAULT_.medication, domain=None, range=Optional[Union[str, "MedicationEnum"]])

slots.administration_status = Slot(uri=DEFAULT_.administration_status, name="administration_status", curie=DEFAULT_.curie('administration_status'),
                   model_uri=DEFAULT_.administration_status, domain=None, range=Optional[Union[str, "AdministrationStatusEnum"]])

slots.number_doses = Slot(uri=DEFAULT_.number_doses, name="number_doses", curie=DEFAULT_.curie('number_doses'),
                   model_uri=DEFAULT_.number_doses, domain=None, range=Optional[Decimal])

slots.total_dose_administered = Slot(uri=DEFAULT_.total_dose_administered, name="total_dose_administered", curie=DEFAULT_.curie('total_dose_administered'),
                   model_uri=DEFAULT_.total_dose_administered, domain=None, range=Optional[Decimal])

slots.total_dose_intended = Slot(uri=DEFAULT_.total_dose_intended, name="total_dose_intended", curie=DEFAULT_.curie('total_dose_intended'),
                   model_uri=DEFAULT_.total_dose_intended, domain=None, range=Optional[Decimal])

slots.protocol_medication = Slot(uri=DEFAULT_.protocol_medication, name="protocol_medication", curie=DEFAULT_.curie('protocol_medication'),
                   model_uri=DEFAULT_.protocol_medication, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.non_protocol_reason = Slot(uri=DEFAULT_.non_protocol_reason, name="non_protocol_reason", curie=DEFAULT_.curie('non_protocol_reason'),
                   model_uri=DEFAULT_.non_protocol_reason, domain=None, range=Optional[Union[str, "NonProtocolReasonEnum"]])

slots.medication_other = Slot(uri=DEFAULT_.medication_other, name="medication_other", curie=DEFAULT_.curie('medication_other'),
                   model_uri=DEFAULT_.medication_other, domain=None, range=Optional[str])

slots.concomitant_reason = Slot(uri=DEFAULT_.concomitant_reason, name="concomitant_reason", curie=DEFAULT_.curie('concomitant_reason'),
                   model_uri=DEFAULT_.concomitant_reason, domain=None, range=Optional[Union[str, "ConcomitantReasonEnum"]])

slots.concomitant_reason_other = Slot(uri=DEFAULT_.concomitant_reason_other, name="concomitant_reason_other", curie=DEFAULT_.curie('concomitant_reason_other'),
                   model_uri=DEFAULT_.concomitant_reason_other, domain=None, range=Optional[str])

slots.route_detail = Slot(uri=DEFAULT_.route_detail, name="route_detail", curie=DEFAULT_.curie('route_detail'),
                   model_uri=DEFAULT_.route_detail, domain=None, range=Optional[Union[str, "RouteDetailEnum"]])

slots.normalization_basis = Slot(uri=DEFAULT_.normalization_basis, name="normalization_basis", curie=DEFAULT_.curie('normalization_basis'),
                   model_uri=DEFAULT_.normalization_basis, domain=None, range=Optional[Union[str, "NormalizationBasisEnum"]])

slots.cycle_number = Slot(uri=DEFAULT_.cycle_number, name="cycle_number", curie=DEFAULT_.curie('cycle_number'),
                   model_uri=DEFAULT_.cycle_number, domain=None, range=Optional[int])

slots.cycles_planned = Slot(uri=DEFAULT_.cycles_planned, name="cycles_planned", curie=DEFAULT_.curie('cycles_planned'),
                   model_uri=DEFAULT_.cycles_planned, domain=None, range=Optional[int])

slots.session_number = Slot(uri=DEFAULT_.session_number, name="session_number", curie=DEFAULT_.curie('session_number'),
                   model_uri=DEFAULT_.session_number, domain=None, range=Optional[int])

slots.administration_site = Slot(uri=DEFAULT_.administration_site, name="administration_site", curie=DEFAULT_.curie('administration_site'),
                   model_uri=DEFAULT_.administration_site, domain=None, range=Optional[Union[str, "AdministrationSiteEnum"]])

slots.total_dose_given = Slot(uri=DEFAULT_.total_dose_given, name="total_dose_given", curie=DEFAULT_.curie('total_dose_given'),
                   model_uri=DEFAULT_.total_dose_given, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.delivery_status = Slot(uri=DEFAULT_.delivery_status, name="delivery_status", curie=DEFAULT_.curie('delivery_status'),
                   model_uri=DEFAULT_.delivery_status, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.age_at_tmp_start = Slot(uri=DEFAULT_.age_at_tmp_start, name="age_at_tmp_start", curie=DEFAULT_.curie('age_at_tmp_start'),
                   model_uri=DEFAULT_.age_at_tmp_start, domain=None, range=Optional[int])

slots.product = Slot(uri=DEFAULT_.product, name="product", curie=DEFAULT_.curie('product'),
                   model_uri=DEFAULT_.product, domain=None, range=Optional[Union[str, "ProductEnum"]])

slots.age_at_tmp = Slot(uri=DEFAULT_.age_at_tmp, name="age_at_tmp", curie=DEFAULT_.curie('age_at_tmp'),
                   model_uri=DEFAULT_.age_at_tmp, domain=None, range=Optional[int])

slots.product_processing = Slot(uri=DEFAULT_.product_processing, name="product_processing", curie=DEFAULT_.curie('product_processing'),
                   model_uri=DEFAULT_.product_processing, domain=None, range=Optional[Union[str, "ProductProcessingEnum"]])

slots.product_processing_other = Slot(uri=DEFAULT_.product_processing_other, name="product_processing_other", curie=DEFAULT_.curie('product_processing_other'),
                   model_uri=DEFAULT_.product_processing_other, domain=None, range=Optional[str])

slots.number_units = Slot(uri=DEFAULT_.number_units, name="number_units", curie=DEFAULT_.curie('number_units'),
                   model_uri=DEFAULT_.number_units, domain=None, range=Optional[Decimal])

slots.age_at_cimt_start = Slot(uri=DEFAULT_.age_at_cimt_start, name="age_at_cimt_start", curie=DEFAULT_.curie('age_at_cimt_start'),
                   model_uri=DEFAULT_.age_at_cimt_start, domain=None, range=Optional[int])

slots.type_other = Slot(uri=DEFAULT_.type_other, name="type_other", curie=DEFAULT_.curie('type_other'),
                   model_uri=DEFAULT_.type_other, domain=None, range=Optional[str])

slots.age_at_procedure = Slot(uri=DEFAULT_.age_at_procedure, name="age_at_procedure", curie=DEFAULT_.curie('age_at_procedure'),
                   model_uri=DEFAULT_.age_at_procedure, domain=None, range=Optional[int])

slots.protocol_procedure = Slot(uri=DEFAULT_.protocol_procedure, name="protocol_procedure", curie=DEFAULT_.curie('protocol_procedure'),
                   model_uri=DEFAULT_.protocol_procedure, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.procedure = Slot(uri=DEFAULT_.procedure, name="procedure", curie=DEFAULT_.curie('procedure'),
                   model_uri=DEFAULT_.procedure, domain=None, range=Optional[Union[str, "ProcedureEnum"]])

slots.extent = Slot(uri=DEFAULT_.extent, name="extent", curie=DEFAULT_.curie('extent'),
                   model_uri=DEFAULT_.extent, domain=None, range=Optional[Union[str, "ExtentEnum"]])

slots.outcome = Slot(uri=DEFAULT_.outcome, name="outcome", curie=DEFAULT_.curie('outcome'),
                   model_uri=DEFAULT_.outcome, domain=None, range=Optional[Union[str, "OutcomeEnum"]])

slots.hydrocephalus = Slot(uri=DEFAULT_.hydrocephalus, name="hydrocephalus", curie=DEFAULT_.curie('hydrocephalus'),
                   model_uri=DEFAULT_.hydrocephalus, domain=None, range=Optional[Union[str, "HydrocephalusEnum"]])

slots.posterior_fossa_syndrome = Slot(uri=DEFAULT_.posterior_fossa_syndrome, name="posterior_fossa_syndrome", curie=DEFAULT_.curie('posterior_fossa_syndrome'),
                   model_uri=DEFAULT_.posterior_fossa_syndrome, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.csf_diversion = Slot(uri=DEFAULT_.csf_diversion, name="csf_diversion", curie=DEFAULT_.curie('csf_diversion'),
                   model_uri=DEFAULT_.csf_diversion, domain=None, range=Optional[Union[str, "CsfDiversionEnum"]])

slots.nephron_sparing_partial_nephrectomy = Slot(uri=DEFAULT_.nephron_sparing_partial_nephrectomy, name="nephron_sparing_partial_nephrectomy", curie=DEFAULT_.curie('nephron_sparing_partial_nephrectomy'),
                   model_uri=DEFAULT_.nephron_sparing_partial_nephrectomy, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.surgery_type_limb = Slot(uri=DEFAULT_.surgery_type_limb, name="surgery_type_limb", curie=DEFAULT_.curie('surgery_type_limb'),
                   model_uri=DEFAULT_.surgery_type_limb, domain=None, range=Optional[Union[str, "SurgeryTypeLimbEnum"]])

slots.margins = Slot(uri=DEFAULT_.margins, name="margins", curie=DEFAULT_.curie('margins'),
                   model_uri=DEFAULT_.margins, domain=None, range=Optional[Union[str, "MarginsEnum"]])

slots.tumor_rupture = Slot(uri=DEFAULT_.tumor_rupture, name="tumor_rupture", curie=DEFAULT_.curie('tumor_rupture'),
                   model_uri=DEFAULT_.tumor_rupture, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.surgical_complications = Slot(uri=DEFAULT_.surgical_complications, name="surgical_complications", curie=DEFAULT_.curie('surgical_complications'),
                   model_uri=DEFAULT_.surgical_complications, domain=None, range=Optional[Union[str, "SurgicalComplicationsEnum"]])

slots.surgical_complications_other = Slot(uri=DEFAULT_.surgical_complications_other, name="surgical_complications_other", curie=DEFAULT_.curie('surgical_complications_other'),
                   model_uri=DEFAULT_.surgical_complications_other, domain=None, range=Optional[str])

slots.biopsy_type = Slot(uri=DEFAULT_.biopsy_type, name="biopsy_type", curie=DEFAULT_.curie('biopsy_type'),
                   model_uri=DEFAULT_.biopsy_type, domain=None, range=Optional[Union[str, "BiopsyTypeEnum"]])

slots.surgery_type_amputation = Slot(uri=DEFAULT_.surgery_type_amputation, name="surgery_type_amputation", curie=DEFAULT_.curie('surgery_type_amputation'),
                   model_uri=DEFAULT_.surgery_type_amputation, domain=None, range=Optional[Union[str, "SurgeryTypeAmputationEnum"]])

slots.surgery_type_limb_salvage = Slot(uri=DEFAULT_.surgery_type_limb_salvage, name="surgery_type_limb_salvage", curie=DEFAULT_.curie('surgery_type_limb_salvage'),
                   model_uri=DEFAULT_.surgery_type_limb_salvage, domain=None, range=Optional[Union[str, "SurgeryTypeLimbSalvageEnum"]])

slots.reconstruction_type = Slot(uri=DEFAULT_.reconstruction_type, name="reconstruction_type", curie=DEFAULT_.curie('reconstruction_type'),
                   model_uri=DEFAULT_.reconstruction_type, domain=None, range=Optional[Union[str, "ReconstructionTypeEnum"]])

slots.procedure_extent = Slot(uri=DEFAULT_.procedure_extent, name="procedure_extent", curie=DEFAULT_.curie('procedure_extent'),
                   model_uri=DEFAULT_.procedure_extent, domain=None, range=Optional[Union[str, "ProcedureExtentEnum"]])

slots.met_non_lung_mgmt = Slot(uri=DEFAULT_.met_non_lung_mgmt, name="met_non_lung_mgmt", curie=DEFAULT_.curie('met_non_lung_mgmt'),
                   model_uri=DEFAULT_.met_non_lung_mgmt, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.met_lung_mgmt = Slot(uri=DEFAULT_.met_lung_mgmt, name="met_lung_mgmt", curie=DEFAULT_.curie('met_lung_mgmt'),
                   model_uri=DEFAULT_.met_lung_mgmt, domain=None, range=Optional[Union[str, "MetLungMgmtEnum"]])

slots.localization_technique = Slot(uri=DEFAULT_.localization_technique, name="localization_technique", curie=DEFAULT_.curie('localization_technique'),
                   model_uri=DEFAULT_.localization_technique, domain=None, range=Optional[Union[str, "LocalizationTechniqueEnum"]])

slots.distance_margin_tumor = Slot(uri=DEFAULT_.distance_margin_tumor, name="distance_margin_tumor", curie=DEFAULT_.curie('distance_margin_tumor'),
                   model_uri=DEFAULT_.distance_margin_tumor, domain=None, range=Optional[Decimal])

slots.procedure_other = Slot(uri=DEFAULT_.procedure_other, name="procedure_other", curie=DEFAULT_.curie('procedure_other'),
                   model_uri=DEFAULT_.procedure_other, domain=None, range=Optional[str])

slots.biopsy_type_other = Slot(uri=DEFAULT_.biopsy_type_other, name="biopsy_type_other", curie=DEFAULT_.curie('biopsy_type_other'),
                   model_uri=DEFAULT_.biopsy_type_other, domain=None, range=Optional[str])

slots.number_nodes = Slot(uri=DEFAULT_.number_nodes, name="number_nodes", curie=DEFAULT_.curie('number_nodes'),
                   model_uri=DEFAULT_.number_nodes, domain=None, range=Optional[Union[str, "NumberNodesEnum"]])

slots.number_nodes_numeric = Slot(uri=DEFAULT_.number_nodes_numeric, name="number_nodes_numeric", curie=DEFAULT_.curie('number_nodes_numeric'),
                   model_uri=DEFAULT_.number_nodes_numeric, domain=None, range=Optional[Decimal])

slots.procedure_purpose = Slot(uri=DEFAULT_.procedure_purpose, name="procedure_purpose", curie=DEFAULT_.curie('procedure_purpose'),
                   model_uri=DEFAULT_.procedure_purpose, domain=None, range=Optional[Union[str, "ProcedurePurposeEnum"]])

slots.procedure_purpose_other = Slot(uri=DEFAULT_.procedure_purpose_other, name="procedure_purpose_other", curie=DEFAULT_.curie('procedure_purpose_other'),
                   model_uri=DEFAULT_.procedure_purpose_other, domain=None, range=Optional[str])

slots.amputation_type = Slot(uri=DEFAULT_.amputation_type, name="amputation_type", curie=DEFAULT_.curie('amputation_type'),
                   model_uri=DEFAULT_.amputation_type, domain=None, range=Optional[Union[str, "AmputationTypeEnum"]])

slots.resection_type = Slot(uri=DEFAULT_.resection_type, name="resection_type", curie=DEFAULT_.curie('resection_type'),
                   model_uri=DEFAULT_.resection_type, domain=None, range=Optional[Union[str, "ResectionTypeEnum"]])

slots.distance_margin = Slot(uri=DEFAULT_.distance_margin, name="distance_margin", curie=DEFAULT_.curie('distance_margin'),
                   model_uri=DEFAULT_.distance_margin, domain=None, range=Optional[Decimal])

slots.hemipelvectomy_type = Slot(uri=DEFAULT_.hemipelvectomy_type, name="hemipelvectomy_type", curie=DEFAULT_.curie('hemipelvectomy_type'),
                   model_uri=DEFAULT_.hemipelvectomy_type, domain=None, range=Optional[Union[str, "HemipelvectomyTypeEnum"]])

slots.hemipelvectomy_site = Slot(uri=DEFAULT_.hemipelvectomy_site, name="hemipelvectomy_site", curie=DEFAULT_.curie('hemipelvectomy_site'),
                   model_uri=DEFAULT_.hemipelvectomy_site, domain=None, range=Optional[Union[str, "HemipelvectomySiteEnum"]])

slots.intraop_adjuvant = Slot(uri=DEFAULT_.intraop_adjuvant, name="intraop_adjuvant", curie=DEFAULT_.curie('intraop_adjuvant'),
                   model_uri=DEFAULT_.intraop_adjuvant, domain=None, range=Optional[Union[str, "IntraopAdjuvantEnum"]])

slots.intraop_adjuvant_other = Slot(uri=DEFAULT_.intraop_adjuvant_other, name="intraop_adjuvant_other", curie=DEFAULT_.curie('intraop_adjuvant_other'),
                   model_uri=DEFAULT_.intraop_adjuvant_other, domain=None, range=Optional[str])

slots.laser_type = Slot(uri=DEFAULT_.laser_type, name="laser_type", curie=DEFAULT_.curie('laser_type'),
                   model_uri=DEFAULT_.laser_type, domain=None, range=Optional[Union[str, "LaserTypeEnum"]])

slots.laser_type_other = Slot(uri=DEFAULT_.laser_type_other, name="laser_type_other", curie=DEFAULT_.curie('laser_type_other'),
                   model_uri=DEFAULT_.laser_type_other, domain=None, range=Optional[str])

slots.laser_power = Slot(uri=DEFAULT_.laser_power, name="laser_power", curie=DEFAULT_.curie('laser_power'),
                   model_uri=DEFAULT_.laser_power, domain=None, range=Optional[Union[str, "LaserPowerEnum"]])

slots.laser_duration = Slot(uri=DEFAULT_.laser_duration, name="laser_duration", curie=DEFAULT_.curie('laser_duration'),
                   model_uri=DEFAULT_.laser_duration, domain=None, range=Optional[Union[str, "LaserDurationEnum"]])

slots.laser_duration_numeric = Slot(uri=DEFAULT_.laser_duration_numeric, name="laser_duration_numeric", curie=DEFAULT_.curie('laser_duration_numeric'),
                   model_uri=DEFAULT_.laser_duration_numeric, domain=None, range=Optional[Decimal])

slots.cryotherapy_freezes = Slot(uri=DEFAULT_.cryotherapy_freezes, name="cryotherapy_freezes", curie=DEFAULT_.curie('cryotherapy_freezes'),
                   model_uri=DEFAULT_.cryotherapy_freezes, domain=None, range=Optional[int])

slots.freeze_thaw_cycle_number = Slot(uri=DEFAULT_.freeze_thaw_cycle_number, name="freeze_thaw_cycle_number", curie=DEFAULT_.curie('freeze_thaw_cycle_number'),
                   model_uri=DEFAULT_.freeze_thaw_cycle_number, domain=None, range=Optional[int])

slots.age_at_modification = Slot(uri=DEFAULT_.age_at_modification, name="age_at_modification", curie=DEFAULT_.curie('age_at_modification'),
                   model_uri=DEFAULT_.age_at_modification, domain=None, range=Optional[int])

slots.modification = Slot(uri=DEFAULT_.modification, name="modification", curie=DEFAULT_.curie('modification'),
                   model_uri=DEFAULT_.modification, domain=None, range=Optional[Union[str, "ModificationEnum"]])

slots.modification_other = Slot(uri=DEFAULT_.modification_other, name="modification_other", curie=DEFAULT_.curie('modification_other'),
                   model_uri=DEFAULT_.modification_other, domain=None, range=Optional[str])

slots.modification_basis = Slot(uri=DEFAULT_.modification_basis, name="modification_basis", curie=DEFAULT_.curie('modification_basis'),
                   model_uri=DEFAULT_.modification_basis, domain=None, range=Optional[Union[str, "ModificationBasisEnum"]])

slots.reason = Slot(uri=DEFAULT_.reason, name="reason", curie=DEFAULT_.curie('reason'),
                   model_uri=DEFAULT_.reason, domain=None, range=Optional[Union[str, "ReasonEnum"]])

slots.reason_other = Slot(uri=DEFAULT_.reason_other, name="reason_other", curie=DEFAULT_.curie('reason_other'),
                   model_uri=DEFAULT_.reason_other, domain=None, range=Optional[str])

slots.toxicity_detail = Slot(uri=DEFAULT_.toxicity_detail, name="toxicity_detail", curie=DEFAULT_.curie('toxicity_detail'),
                   model_uri=DEFAULT_.toxicity_detail, domain=None, range=Optional[Union[str, "ToxicityDetailEnum"]])

slots.toxicity_detail_other = Slot(uri=DEFAULT_.toxicity_detail_other, name="toxicity_detail_other", curie=DEFAULT_.curie('toxicity_detail_other'),
                   model_uri=DEFAULT_.toxicity_detail_other, domain=None, range=Optional[str])

slots.toxicity_immune = Slot(uri=DEFAULT_.toxicity_immune, name="toxicity_immune", curie=DEFAULT_.curie('toxicity_immune'),
                   model_uri=DEFAULT_.toxicity_immune, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.toxicity_infusion = Slot(uri=DEFAULT_.toxicity_infusion, name="toxicity_infusion", curie=DEFAULT_.curie('toxicity_infusion'),
                   model_uri=DEFAULT_.toxicity_infusion, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.original_agent = Slot(uri=DEFAULT_.original_agent, name="original_agent", curie=DEFAULT_.curie('original_agent'),
                   model_uri=DEFAULT_.original_agent, domain=None, range=Optional[Union[str, "BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum"]])

slots.original_agent_other = Slot(uri=DEFAULT_.original_agent_other, name="original_agent_other", curie=DEFAULT_.curie('original_agent_other'),
                   model_uri=DEFAULT_.original_agent_other, domain=None, range=Optional[str])

slots.sub_agent = Slot(uri=DEFAULT_.sub_agent, name="sub_agent", curie=DEFAULT_.curie('sub_agent'),
                   model_uri=DEFAULT_.sub_agent, domain=None, range=Optional[Union[str, "BendamustineBleomycinBrentuximabvedotinBusulfanCarboplatinCarmustineCisplatinCyclophosphamideCytarabEnum"]])

slots.sub_agent_other = Slot(uri=DEFAULT_.sub_agent_other, name="sub_agent_other", curie=DEFAULT_.curie('sub_agent_other'),
                   model_uri=DEFAULT_.sub_agent_other, domain=None, range=Optional[str])

slots.age_at_mrd_assessment = Slot(uri=DEFAULT_.age_at_mrd_assessment, name="age_at_mrd_assessment", curie=DEFAULT_.curie('age_at_mrd_assessment'),
                   model_uri=DEFAULT_.age_at_mrd_assessment, domain=None, range=Optional[int])

slots.sensitivity = Slot(uri=DEFAULT_.sensitivity, name="sensitivity", curie=DEFAULT_.curie('sensitivity'),
                   model_uri=DEFAULT_.sensitivity, domain=None, range=Optional[Decimal])

slots.sample_source = Slot(uri=DEFAULT_.sample_source, name="sample_source", curie=DEFAULT_.curie('sample_source'),
                   model_uri=DEFAULT_.sample_source, domain=None, range=Optional[Union[str, "SampleSourceEnum"]])

slots.molecular_markers = Slot(uri=DEFAULT_.molecular_markers, name="molecular_markers", curie=DEFAULT_.curie('molecular_markers'),
                   model_uri=DEFAULT_.molecular_markers, domain=None, range=Optional[Union[str, "MolecularMarkersEnum"]])

slots.molecular_markers_other = Slot(uri=DEFAULT_.molecular_markers_other, name="molecular_markers_other", curie=DEFAULT_.curie('molecular_markers_other'),
                   model_uri=DEFAULT_.molecular_markers_other, domain=None, range=Optional[str])

slots.age_at_response = Slot(uri=DEFAULT_.age_at_response, name="age_at_response", curie=DEFAULT_.curie('age_at_response'),
                   model_uri=DEFAULT_.age_at_response, domain=None, range=Optional[int])

slots.response_category = Slot(uri=DEFAULT_.response_category, name="response_category", curie=DEFAULT_.curie('response_category'),
                   model_uri=DEFAULT_.response_category, domain=None, range=Optional[Union[str, "ResponseCategoryEnum"]])

slots.bm_pct_blasts_at_response = Slot(uri=DEFAULT_.bm_pct_blasts_at_response, name="bm_pct_blasts_at_response", curie=DEFAULT_.curie('bm_pct_blasts_at_response'),
                   model_uri=DEFAULT_.bm_pct_blasts_at_response, domain=None, range=Optional[Decimal])

slots.bm_analysis_method_at_response = Slot(uri=DEFAULT_.bm_analysis_method_at_response, name="bm_analysis_method_at_response", curie=DEFAULT_.curie('bm_analysis_method_at_response'),
                   model_uri=DEFAULT_.bm_analysis_method_at_response, domain=None, range=Optional[Union[str, "BmAnalysisMethodAtResponseEnum"]])

slots.anc_at_response = Slot(uri=DEFAULT_.anc_at_response, name="anc_at_response", curie=DEFAULT_.curie('anc_at_response'),
                   model_uri=DEFAULT_.anc_at_response, domain=None, range=Optional[Decimal])

slots.anc_threshold_at_response = Slot(uri=DEFAULT_.anc_threshold_at_response, name="anc_threshold_at_response", curie=DEFAULT_.curie('anc_threshold_at_response'),
                   model_uri=DEFAULT_.anc_threshold_at_response, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.platelet_count_at_response = Slot(uri=DEFAULT_.platelet_count_at_response, name="platelet_count_at_response", curie=DEFAULT_.curie('platelet_count_at_response'),
                   model_uri=DEFAULT_.platelet_count_at_response, domain=None, range=Optional[Decimal])

slots.platelet_threshold_at_response = Slot(uri=DEFAULT_.platelet_threshold_at_response, name="platelet_threshold_at_response", curie=DEFAULT_.curie('platelet_threshold_at_response'),
                   model_uri=DEFAULT_.platelet_threshold_at_response, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.response_method = Slot(uri=DEFAULT_.response_method, name="response_method", curie=DEFAULT_.curie('response_method'),
                   model_uri=DEFAULT_.response_method, domain=None, range=Optional[Union[str, "ResponseMethodEnum"]])

slots.response_system = Slot(uri=DEFAULT_.response_system, name="response_system", curie=DEFAULT_.curie('response_system'),
                   model_uri=DEFAULT_.response_system, domain=None, range=Optional[Union[str, "ResponseSystemEnum"]])

slots.neurological_status = Slot(uri=DEFAULT_.neurological_status, name="neurological_status", curie=DEFAULT_.curie('neurological_status'),
                   model_uri=DEFAULT_.neurological_status, domain=None, range=Optional[Union[str, "NeurologicalStatusEnum"]])

slots.response_system_version = Slot(uri=DEFAULT_.response_system_version, name="response_system_version", curie=DEFAULT_.curie('response_system_version'),
                   model_uri=DEFAULT_.response_system_version, domain=None, range=Optional[str])

slots.necrosis = Slot(uri=DEFAULT_.necrosis, name="necrosis", curie=DEFAULT_.curie('necrosis'),
                   model_uri=DEFAULT_.necrosis, domain=None, range=Optional[Union[str, "NecrosisEnum"]])

slots.necrosis_pct = Slot(uri=DEFAULT_.necrosis_pct, name="necrosis_pct", curie=DEFAULT_.curie('necrosis_pct'),
                   model_uri=DEFAULT_.necrosis_pct, domain=None, range=Optional[Decimal])

slots.interim_response = Slot(uri=DEFAULT_.interim_response, name="interim_response", curie=DEFAULT_.curie('interim_response'),
                   model_uri=DEFAULT_.interim_response, domain=None, range=Optional[Union[str, "InterimResponseEnum"]])

slots.response_method_other = Slot(uri=DEFAULT_.response_method_other, name="response_method_other", curie=DEFAULT_.curie('response_method_other'),
                   model_uri=DEFAULT_.response_method_other, domain=None, range=Optional[str])

slots.symptoms = Slot(uri=DEFAULT_.symptoms, name="symptoms", curie=DEFAULT_.curie('symptoms'),
                   model_uri=DEFAULT_.symptoms, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.palpable_nodes = Slot(uri=DEFAULT_.palpable_nodes, name="palpable_nodes", curie=DEFAULT_.curie('palpable_nodes'),
                   model_uri=DEFAULT_.palpable_nodes, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.tx_prior_response = Slot(uri=DEFAULT_.tx_prior_response, name="tx_prior_response", curie=DEFAULT_.curie('tx_prior_response'),
                   model_uri=DEFAULT_.tx_prior_response, domain=None, range=Optional[Union[str, "TxPriorResponseEnum"]])

slots.microscopic_change_type = Slot(uri=DEFAULT_.microscopic_change_type, name="microscopic_change_type", curie=DEFAULT_.curie('microscopic_change_type'),
                   model_uri=DEFAULT_.microscopic_change_type, domain=None, range=Optional[Union[str, "MicroscopicChangeTypeEnum"]])

slots.microscopic_change_status = Slot(uri=DEFAULT_.microscopic_change_status, name="microscopic_change_status", curie=DEFAULT_.curie('microscopic_change_status'),
                   model_uri=DEFAULT_.microscopic_change_status, domain=None, range=Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]])

slots.microscopic_change_pct = Slot(uri=DEFAULT_.microscopic_change_pct, name="microscopic_change_pct", curie=DEFAULT_.curie('microscopic_change_pct'),
                   model_uri=DEFAULT_.microscopic_change_pct, domain=None, range=Optional[Union[str, "MicroscopicChangePctEnum"]])

slots.microscopic_change_pct_numeric = Slot(uri=DEFAULT_.microscopic_change_pct_numeric, name="microscopic_change_pct_numeric", curie=DEFAULT_.curie('microscopic_change_pct_numeric'),
                   model_uri=DEFAULT_.microscopic_change_pct_numeric, domain=None, range=Optional[Decimal])

slots.macroscopic_change_type = Slot(uri=DEFAULT_.macroscopic_change_type, name="macroscopic_change_type", curie=DEFAULT_.curie('macroscopic_change_type'),
                   model_uri=DEFAULT_.macroscopic_change_type, domain=None, range=Optional[Union[str, "MacroscopicChangeTypeEnum"]])

slots.macroscopic_change_status = Slot(uri=DEFAULT_.macroscopic_change_status, name="macroscopic_change_status", curie=DEFAULT_.curie('macroscopic_change_status'),
                   model_uri=DEFAULT_.macroscopic_change_status, domain=None, range=Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]])

slots.macroscopic_change_pct_numeric = Slot(uri=DEFAULT_.macroscopic_change_pct_numeric, name="macroscopic_change_pct_numeric", curie=DEFAULT_.curie('macroscopic_change_pct_numeric'),
                   model_uri=DEFAULT_.macroscopic_change_pct_numeric, domain=None, range=Optional[Decimal])

slots.age_at_ae = Slot(uri=DEFAULT_.age_at_ae, name="age_at_ae", curie=DEFAULT_.curie('age_at_ae'),
                   model_uri=DEFAULT_.age_at_ae, domain=None, range=Optional[int])

slots.ae_code = Slot(uri=DEFAULT_.ae_code, name="ae_code", curie=DEFAULT_.curie('ae_code'),
                   model_uri=DEFAULT_.ae_code, domain=None, range=Optional[str])

slots.ae_code_system = Slot(uri=DEFAULT_.ae_code_system, name="ae_code_system", curie=DEFAULT_.curie('ae_code_system'),
                   model_uri=DEFAULT_.ae_code_system, domain=None, range=Optional[Union[str, "AeCodeSystemEnum"]])

slots.ae_code_system_version = Slot(uri=DEFAULT_.ae_code_system_version, name="ae_code_system_version", curie=DEFAULT_.curie('ae_code_system_version'),
                   model_uri=DEFAULT_.ae_code_system_version, domain=None, range=Optional[str])

slots.grade = Slot(uri=DEFAULT_.grade, name="grade", curie=DEFAULT_.curie('grade'),
                   model_uri=DEFAULT_.grade, domain=None, range=Optional[Union[str, "GradeEnum"]])

slots.grade_system = Slot(uri=DEFAULT_.grade_system, name="grade_system", curie=DEFAULT_.curie('grade_system'),
                   model_uri=DEFAULT_.grade_system, domain=None, range=Optional[Union[str, "GradeSystemEnum"]])

slots.grade_system_version = Slot(uri=DEFAULT_.grade_system_version, name="grade_system_version", curie=DEFAULT_.curie('grade_system_version'),
                   model_uri=DEFAULT_.grade_system_version, domain=None, range=Optional[str])

slots.attribution = Slot(uri=DEFAULT_.attribution, name="attribution", curie=DEFAULT_.curie('attribution'),
                   model_uri=DEFAULT_.attribution, domain=None, range=Optional[Union[str, "AttributionEnum"]])

slots.avn_joint = Slot(uri=DEFAULT_.avn_joint, name="avn_joint", curie=DEFAULT_.curie('avn_joint'),
                   model_uri=DEFAULT_.avn_joint, domain=None, range=Optional[Union[str, "AvnJointEnum"]])

slots.avn_joint_other = Slot(uri=DEFAULT_.avn_joint_other, name="avn_joint_other", curie=DEFAULT_.curie('avn_joint_other'),
                   model_uri=DEFAULT_.avn_joint_other, domain=None, range=Optional[str])

slots.avn_joint_laterality = Slot(uri=DEFAULT_.avn_joint_laterality, name="avn_joint_laterality", curie=DEFAULT_.curie('avn_joint_laterality'),
                   model_uri=DEFAULT_.avn_joint_laterality, domain=None, range=Optional[Union[str, "BilateralLeftMidlineNotreportedRightUnknownEnum"]])

slots.avn_method = Slot(uri=DEFAULT_.avn_method, name="avn_method", curie=DEFAULT_.curie('avn_method'),
                   model_uri=DEFAULT_.avn_method, domain=None, range=Optional[Union[str, "AvnMethodEnum"]])

slots.orthopedic_procedure = Slot(uri=DEFAULT_.orthopedic_procedure, name="orthopedic_procedure", curie=DEFAULT_.curie('orthopedic_procedure'),
                   model_uri=DEFAULT_.orthopedic_procedure, domain=None, range=Optional[Union[str, "OrthopedicProcedureEnum"]])

slots.orthopedic_procedure_other = Slot(uri=DEFAULT_.orthopedic_procedure_other, name="orthopedic_procedure_other", curie=DEFAULT_.curie('orthopedic_procedure_other'),
                   model_uri=DEFAULT_.orthopedic_procedure_other, domain=None, range=Optional[str])

slots.ae_pathogen = Slot(uri=DEFAULT_.ae_pathogen, name="ae_pathogen", curie=DEFAULT_.curie('ae_pathogen'),
                   model_uri=DEFAULT_.ae_pathogen, domain=None, range=Optional[Union[str, "AePathogenEnum"]])

slots.ae_pathogen_other = Slot(uri=DEFAULT_.ae_pathogen_other, name="ae_pathogen_other", curie=DEFAULT_.curie('ae_pathogen_other'),
                   model_uri=DEFAULT_.ae_pathogen_other, domain=None, range=Optional[str])

slots.infection_classification = Slot(uri=DEFAULT_.infection_classification, name="infection_classification", curie=DEFAULT_.curie('infection_classification'),
                   model_uri=DEFAULT_.infection_classification, domain=None, range=Optional[Union[str, "InfectionClassificationEnum"]])

slots.age_at_ae_resolved = Slot(uri=DEFAULT_.age_at_ae_resolved, name="age_at_ae_resolved", curie=DEFAULT_.curie('age_at_ae_resolved'),
                   model_uri=DEFAULT_.age_at_ae_resolved, domain=None, range=Optional[int])

slots.adverse_event = Slot(uri=DEFAULT_.adverse_event, name="adverse_event", curie=DEFAULT_.curie('adverse_event'),
                   model_uri=DEFAULT_.adverse_event, domain=None, range=Optional[Union[str, "AdverseEventEnum"]])

slots.adverse_event_other = Slot(uri=DEFAULT_.adverse_event_other, name="adverse_event_other", curie=DEFAULT_.curie('adverse_event_other'),
                   model_uri=DEFAULT_.adverse_event_other, domain=None, range=Optional[str])

slots.icu = Slot(uri=DEFAULT_.icu, name="icu", curie=DEFAULT_.curie('icu'),
                   model_uri=DEFAULT_.icu, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.supportive_medication = Slot(uri=DEFAULT_.supportive_medication, name="supportive_medication", curie=DEFAULT_.curie('supportive_medication'),
                   model_uri=DEFAULT_.supportive_medication, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.intervention_status = Slot(uri=DEFAULT_.intervention_status, name="intervention_status", curie=DEFAULT_.curie('intervention_status'),
                   model_uri=DEFAULT_.intervention_status, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.intervention = Slot(uri=DEFAULT_.intervention, name="intervention", curie=DEFAULT_.curie('intervention'),
                   model_uri=DEFAULT_.intervention, domain=None, range=Optional[Union[str, "InterventionEnum"]])

slots.intervention_other = Slot(uri=DEFAULT_.intervention_other, name="intervention_other", curie=DEFAULT_.curie('intervention_other'),
                   model_uri=DEFAULT_.intervention_other, domain=None, range=Optional[str])

slots.ae_pathogen_confirmation = Slot(uri=DEFAULT_.ae_pathogen_confirmation, name="ae_pathogen_confirmation", curie=DEFAULT_.curie('ae_pathogen_confirmation'),
                   model_uri=DEFAULT_.ae_pathogen_confirmation, domain=None, range=Optional[Union[str, "ConfirmedNotreportedSuspectedUnknownEnum"]])

slots.gvhd_acuity = Slot(uri=DEFAULT_.gvhd_acuity, name="gvhd_acuity", curie=DEFAULT_.curie('gvhd_acuity'),
                   model_uri=DEFAULT_.gvhd_acuity, domain=None, range=Optional[Union[str, "GvhdAcuityEnum"]])

slots.gvhd_organ = Slot(uri=DEFAULT_.gvhd_organ, name="gvhd_organ", curie=DEFAULT_.curie('gvhd_organ'),
                   model_uri=DEFAULT_.gvhd_organ, domain=None, range=Optional[Union[str, "GvhdOrganEnum"]])

slots.gvhd_organ_other = Slot(uri=DEFAULT_.gvhd_organ_other, name="gvhd_organ_other", curie=DEFAULT_.curie('gvhd_organ_other'),
                   model_uri=DEFAULT_.gvhd_organ_other, domain=None, range=Optional[str])

slots.ae_outcome = Slot(uri=DEFAULT_.ae_outcome, name="ae_outcome", curie=DEFAULT_.curie('ae_outcome'),
                   model_uri=DEFAULT_.ae_outcome, domain=None, range=Optional[Union[str, "AeOutcomeEnum"]])

slots.modification_required = Slot(uri=DEFAULT_.modification_required, name="modification_required", curie=DEFAULT_.curie('modification_required'),
                   model_uri=DEFAULT_.modification_required, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.tox_delay = Slot(uri=DEFAULT_.tox_delay, name="tox_delay", curie=DEFAULT_.curie('tox_delay'),
                   model_uri=DEFAULT_.tox_delay, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.tox_high_grade_events = Slot(uri=DEFAULT_.tox_high_grade_events, name="tox_high_grade_events", curie=DEFAULT_.curie('tox_high_grade_events'),
                   model_uri=DEFAULT_.tox_high_grade_events, domain=None, range=Optional[int])

slots.tox_dose_reductions = Slot(uri=DEFAULT_.tox_dose_reductions, name="tox_dose_reductions", curie=DEFAULT_.curie('tox_dose_reductions'),
                   model_uri=DEFAULT_.tox_dose_reductions, domain=None, range=Optional[int])

slots.ae_immune = Slot(uri=DEFAULT_.ae_immune, name="ae_immune", curie=DEFAULT_.curie('ae_immune'),
                   model_uri=DEFAULT_.ae_immune, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.ae_infusion = Slot(uri=DEFAULT_.ae_infusion, name="ae_infusion", curie=DEFAULT_.curie('ae_infusion'),
                   model_uri=DEFAULT_.ae_infusion, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.reported = Slot(uri=DEFAULT_.reported, name="reported", curie=DEFAULT_.curie('reported'),
                   model_uri=DEFAULT_.reported, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.as_expected = Slot(uri=DEFAULT_.as_expected, name="as_expected", curie=DEFAULT_.curie('as_expected'),
                   model_uri=DEFAULT_.as_expected, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.hospitalization = Slot(uri=DEFAULT_.hospitalization, name="hospitalization", curie=DEFAULT_.curie('hospitalization'),
                   model_uri=DEFAULT_.hospitalization, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.ae_pathogen_status = Slot(uri=DEFAULT_.ae_pathogen_status, name="ae_pathogen_status", curie=DEFAULT_.curie('ae_pathogen_status'),
                   model_uri=DEFAULT_.ae_pathogen_status, domain=None, range=Optional[Union[str, "ConfirmedNotreportedSuspectedUnknownEnum"]])

slots.ae_hospitalization_reason_other = Slot(uri=DEFAULT_.ae_hospitalization_reason_other, name="ae_hospitalization_reason_other", curie=DEFAULT_.curie('ae_hospitalization_reason_other'),
                   model_uri=DEFAULT_.ae_hospitalization_reason_other, domain=None, range=Optional[str])

slots.ae_hospitalization = Slot(uri=DEFAULT_.ae_hospitalization, name="ae_hospitalization", curie=DEFAULT_.curie('ae_hospitalization'),
                   model_uri=DEFAULT_.ae_hospitalization, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.age_at_smn = Slot(uri=DEFAULT_.age_at_smn, name="age_at_smn", curie=DEFAULT_.curie('age_at_smn'),
                   model_uri=DEFAULT_.age_at_smn, domain=None, range=Optional[int])

slots.treatment_related = Slot(uri=DEFAULT_.treatment_related, name="treatment_related", curie=DEFAULT_.curie('treatment_related'),
                   model_uri=DEFAULT_.treatment_related, domain=None, range=Optional[Union[str, "NoNotreportedUnknownYesEnum"]])

slots.smn_status = Slot(uri=DEFAULT_.smn_status, name="smn_status", curie=DEFAULT_.curie('smn_status'),
                   model_uri=DEFAULT_.smn_status, domain=None, range=Optional[Union[str, "AbsentNotreportedPresentUnknownEnum"]])

slots.smn_field = Slot(uri=DEFAULT_.smn_field, name="smn_field", curie=DEFAULT_.curie('smn_field'),
                   model_uri=DEFAULT_.smn_field, domain=None, range=Optional[Union[str, "SmnFieldEnum"]])

slots.smn = Slot(uri=DEFAULT_.smn, name="smn", curie=DEFAULT_.curie('smn'),
                   model_uri=DEFAULT_.smn, domain=None, range=Optional[Union[str, "SmnEnum"]])

slots.smn_other = Slot(uri=DEFAULT_.smn_other, name="smn_other", curie=DEFAULT_.curie('smn_other'),
                   model_uri=DEFAULT_.smn_other, domain=None, range=Optional[str])

slots.smn_type_other = Slot(uri=DEFAULT_.smn_type_other, name="smn_type_other", curie=DEFAULT_.curie('smn_type_other'),
                   model_uri=DEFAULT_.smn_type_other, domain=None, range=Optional[str])

slots.pro_measures = Slot(uri=DEFAULT_.pro_measures, name="pro_measures", curie=DEFAULT_.curie('pro_measures'),
                   model_uri=DEFAULT_.pro_measures, domain=None, range=Optional[Union[str, "ProMeasuresEnum"]])

slots.pro_measures_other = Slot(uri=DEFAULT_.pro_measures_other, name="pro_measures_other", curie=DEFAULT_.curie('pro_measures_other'),
                   model_uri=DEFAULT_.pro_measures_other, domain=None, range=Optional[str])

slots.pro_measurement_type = Slot(uri=DEFAULT_.pro_measurement_type, name="pro_measurement_type", curie=DEFAULT_.curie('pro_measurement_type'),
                   model_uri=DEFAULT_.pro_measurement_type, domain=None, range=Optional[Union[str, "ProMeasurementTypeEnum"]])

slots.pro_measurement_type_other = Slot(uri=DEFAULT_.pro_measurement_type_other, name="pro_measurement_type_other", curie=DEFAULT_.curie('pro_measurement_type_other'),
                   model_uri=DEFAULT_.pro_measurement_type_other, domain=None, range=Optional[str])

slots.raters = Slot(uri=DEFAULT_.raters, name="raters", curie=DEFAULT_.curie('raters'),
                   model_uri=DEFAULT_.raters, domain=None, range=Optional[Union[str, "RatersEnum"]])

slots.raters_other = Slot(uri=DEFAULT_.raters_other, name="raters_other", curie=DEFAULT_.curie('raters_other'),
                   model_uri=DEFAULT_.raters_other, domain=None, range=Optional[str])

slots.eligible_age_lower = Slot(uri=DEFAULT_.eligible_age_lower, name="eligible_age_lower", curie=DEFAULT_.curie('eligible_age_lower'),
                   model_uri=DEFAULT_.eligible_age_lower, domain=None, range=Optional[int])

slots.eligible_age_upper = Slot(uri=DEFAULT_.eligible_age_upper, name="eligible_age_upper", curie=DEFAULT_.curie('eligible_age_upper'),
                   model_uri=DEFAULT_.eligible_age_upper, domain=None, range=Optional[int])

slots.time_point = Slot(uri=DEFAULT_.time_point, name="time_point", curie=DEFAULT_.curie('time_point'),
                   model_uri=DEFAULT_.time_point, domain=None, range=Optional[Union[str, "TimePointEnum"]])

slots.age_at_le_eval = Slot(uri=DEFAULT_.age_at_le_eval, name="age_at_le_eval", curie=DEFAULT_.curie('age_at_le_eval'),
                   model_uri=DEFAULT_.age_at_le_eval, domain=None, range=Optional[int])

slots.late_effect = Slot(uri=DEFAULT_.late_effect, name="late_effect", curie=DEFAULT_.curie('late_effect'),
                   model_uri=DEFAULT_.late_effect, domain=None, range=Optional[Union[str, "LateEffectEnum"]])

slots.code = Slot(uri=DEFAULT_.code, name="code", curie=DEFAULT_.curie('code'),
                   model_uri=DEFAULT_.code, domain=None, range=Optional[str])

slots.code_system = Slot(uri=DEFAULT_.code_system, name="code_system", curie=DEFAULT_.curie('code_system'),
                   model_uri=DEFAULT_.code_system, domain=None, range=Optional[Union[str, "CodeSystemEnum"]])

slots.code_system_version = Slot(uri=DEFAULT_.code_system_version, name="code_system_version", curie=DEFAULT_.curie('code_system_version'),
                   model_uri=DEFAULT_.code_system_version, domain=None, range=Optional[str])

slots.subject__persons = Slot(uri=DEFAULT_.persons, name="subject__persons", curie=DEFAULT_.curie('persons'),
                   model_uri=DEFAULT_.subject__persons, domain=None, range=Union[dict, Person])
